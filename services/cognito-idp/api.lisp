;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/cognito-idp/api (:use)
                             (:nicknames #:aws/cognito-idp)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cognito-idp/api)
(common-lisp:progn
 (common-lisp:define-condition cognito-idp-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cognito-idp-error))
(common-lisp:progn
 (common-lisp:defclass cognito-idp-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "cognito-idp" :api-version
                        "2016-04-18" :host-prefix "cognito-idp" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AWSCognitoIdentityProviderService"
                        :json-version "1.1"))
 (common-lisp:export 'cognito-idp-request))
(common-lisp:defvar *error-map*
  '(("AliasExistsException" . alias-exists-exception)
    ("CodeDeliveryFailureException" . code-delivery-failure-exception)
    ("CodeMismatchException" . code-mismatch-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("DuplicateProviderException" . duplicate-provider-exception)
    ("EnableSoftwareTokenMFAException" . enable-software-token-mfaexception)
    ("ExpiredCodeException" . expired-code-exception)
    ("ForbiddenException" . forbidden-exception)
    ("GroupExistsException" . group-exists-exception)
    ("InternalErrorException" . internal-error-exception)
    ("InvalidEmailRoleAccessPolicyException"
     . invalid-email-role-access-policy-exception)
    ("InvalidLambdaResponseException" . invalid-lambda-response-exception)
    ("InvalidOAuthFlowException" . invalid-oauth-flow-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPasswordException" . invalid-password-exception)
    ("InvalidSmsRoleAccessPolicyException"
     . invalid-sms-role-access-policy-exception)
    ("InvalidSmsRoleTrustRelationshipException"
     . invalid-sms-role-trust-relationship-exception)
    ("InvalidUserPoolConfigurationException"
     . invalid-user-pool-configuration-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MFAMethodNotFoundException" . mfamethod-not-found-exception)
    ("NotAuthorizedException" . not-authorized-exception)
    ("PasswordResetRequiredException" . password-reset-required-exception)
    ("PreconditionNotMetException" . precondition-not-met-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ScopeDoesNotExistException" . scope-does-not-exist-exception)
    ("SoftwareTokenMFANotFoundException"
     . software-token-mfanot-found-exception)
    ("TooManyFailedAttemptsException" . too-many-failed-attempts-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("UnexpectedLambdaException" . unexpected-lambda-exception)
    ("UnsupportedIdentityProviderException"
     . unsupported-identity-provider-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)
    ("UnsupportedTokenTypeException" . unsupported-token-type-exception)
    ("UnsupportedUserStateException" . unsupported-user-state-exception)
    ("UserImportInProgressException" . user-import-in-progress-exception)
    ("UserLambdaValidationException" . user-lambda-validation-exception)
    ("UserNotConfirmedException" . user-not-confirmed-exception)
    ("UserNotFoundException" . user-not-found-exception)
    ("UserPoolAddOnNotEnabledException"
     . user-pool-add-on-not-enabled-exception)
    ("UserPoolTaggingException" . user-pool-tagging-exception)
    ("UsernameExistsException" . username-exists-exception)))
(common-lisp:deftype awsaccount-id-type () 'common-lisp:string)
(common-lisp:deftype access-token-validity-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass account-recovery-setting-type common-lisp:nil
                       ((recovery-mechanisms :initarg :recovery-mechanisms
                         :initform common-lisp:nil :type
                         (common-lisp:or recovery-mechanisms-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-recovery-setting-type-recovery-mechanisms
                         :shape "RecoveryMechanismsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-recovery-setting-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'account-recovery-setting-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-recovery-setting-type
                    'make-account-recovery-setting-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-recovery-setting-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-recovery-setting-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-mechanisms))
      (common-lisp:list
       (common-lisp:cons "RecoveryMechanisms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-recovery-setting-type))
   common-lisp:nil))
(common-lisp:deftype account-takeover-action-notify-type ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass account-takeover-action-type common-lisp:nil
                       ((notify :initarg :notify :initform
                         (common-lisp:error ":notify is required") :type
                         (common-lisp:or account-takeover-action-notify-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-action-type-notify
                         :shape "AccountTakeoverActionNotifyType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-action :initarg :event-action :initform
                         (common-lisp:error ":event-action is required") :type
                         (common-lisp:or account-takeover-event-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-action-type-event-action
                         :shape "AccountTakeoverEventActionType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-takeover-action-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-takeover-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-takeover-action-type
                    'make-account-takeover-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notify))
      (common-lisp:list
       (common-lisp:cons "Notify"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-action))
      (common-lisp:list
       (common-lisp:cons "EventAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-takeover-actions-type common-lisp:nil
                       ((low-action :initarg :low-action :initform
                         common-lisp:nil :type
                         (common-lisp:or account-takeover-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-actions-type-low-action
                         :shape "AccountTakeoverActionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (medium-action :initarg :medium-action :initform
                         common-lisp:nil :type
                         (common-lisp:or account-takeover-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-actions-type-medium-action
                         :shape "AccountTakeoverActionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (high-action :initarg :high-action :initform
                         common-lisp:nil :type
                         (common-lisp:or account-takeover-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-actions-type-high-action
                         :shape "AccountTakeoverActionType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-takeover-actions-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'account-takeover-actions-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-takeover-actions-type
                    'make-account-takeover-actions-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-actions-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-actions-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'low-action))
      (common-lisp:list
       (common-lisp:cons "LowAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medium-action))
      (common-lisp:list
       (common-lisp:cons "MediumAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'high-action))
      (common-lisp:list
       (common-lisp:cons "HighAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-actions-type))
   common-lisp:nil))
(common-lisp:deftype account-takeover-event-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-takeover-risk-configuration-type common-lisp:nil
                       ((notify-configuration :initarg :notify-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or notify-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-risk-configuration-type-notify-configuration
                         :shape "NotifyConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or account-takeover-actions-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-takeover-risk-configuration-type-actions
                         :shape "AccountTakeoverActionsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-takeover-risk-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'account-takeover-risk-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-takeover-risk-configuration-type
                    'make-account-takeover-risk-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-risk-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-risk-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-configuration))
      (common-lisp:list
       (common-lisp:cons "NotifyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-takeover-risk-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-custom-attributes-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-add-custom-attributes-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-attributes :initarg :custom-attributes
                         :initform
                         (common-lisp:error ":custom-attributes is required")
                         :type
                         (common-lisp:or custom-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-custom-attributes-request-custom-attributes
                         :shape "CustomAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-custom-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-custom-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-custom-attributes-request
                    'make-add-custom-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-attributes))
      (common-lisp:list
       (common-lisp:cons "CustomAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-custom-attributes-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-custom-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-custom-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-custom-attributes-response
                    'make-add-custom-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-add-user-to-group-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-add-user-to-group-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-add-user-to-group-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor
                         struct-shape-admin-add-user-to-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-add-user-to-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-add-user-to-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-add-user-to-group-request
                    'make-admin-add-user-to-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-add-user-to-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-add-user-to-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-add-user-to-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-confirm-sign-up-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-confirm-sign-up-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-confirm-sign-up-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-admin-confirm-sign-up-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-confirm-sign-up-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-confirm-sign-up-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-confirm-sign-up-request
                    'make-admin-confirm-sign-up-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-confirm-sign-up-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-confirm-sign-up-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-confirm-sign-up-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-confirm-sign-up-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-confirm-sign-up-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-confirm-sign-up-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-confirm-sign-up-response
                    'make-admin-confirm-sign-up-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-confirm-sign-up-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-confirm-sign-up-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-confirm-sign-up-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-create-user-config-type common-lisp:nil
                       ((allow-admin-create-user-only :initarg
                         :allow-admin-create-user-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-config-type-allow-admin-create-user-only
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unused-account-validity-days :initarg
                         :unused-account-validity-days :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          admin-create-user-unused-account-validity-days-type
                          common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-config-type-unused-account-validity-days
                         :shape "AdminCreateUserUnusedAccountValidityDaysType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (invite-message-template :initarg
                         :invite-message-template :initform common-lisp:nil
                         :type
                         (common-lisp:or message-template-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-config-type-invite-message-template
                         :shape "MessageTemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-create-user-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-create-user-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-create-user-config-type
                    'make-admin-create-user-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-admin-create-user-only))
      (common-lisp:list
       (common-lisp:cons "AllowAdminCreateUserOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unused-account-validity-days))
      (common-lisp:list
       (common-lisp:cons "UnusedAccountValidityDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invite-message-template))
      (common-lisp:list
       (common-lisp:cons "InviteMessageTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-config-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-create-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attributes :initarg :user-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-user-attributes
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation-data :initarg :validation-data :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-validation-data
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temporary-password :initarg :temporary-password
                         :initform common-lisp:nil :type
                         (common-lisp:or password-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-temporary-password
                         :shape "PasswordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-alias-creation :initarg :force-alias-creation
                         :initform common-lisp:nil :type
                         (common-lisp:or force-alias-creation common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-force-alias-creation
                         :shape "ForceAliasCreation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-action :initarg :message-action :initform
                         common-lisp:nil :type
                         (common-lisp:or message-action-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-message-action
                         :shape "MessageActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (desired-delivery-mediums :initarg
                         :desired-delivery-mediums :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-medium-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-desired-delivery-mediums
                         :shape "DeliveryMediumListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-admin-create-user-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-create-user-request
                    'make-admin-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-data))
      (common-lisp:list
       (common-lisp:cons "ValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporary-password))
      (common-lisp:list
       (common-lisp:cons "TemporaryPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-alias-creation))
      (common-lisp:list
       (common-lisp:cons "ForceAliasCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-action))
      (common-lisp:list
       (common-lisp:cons "MessageAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-delivery-mediums))
      (common-lisp:list
       (common-lisp:cons "DesiredDeliveryMediums"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-create-user-response common-lisp:nil
                       ((user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-admin-create-user-response-user :shape
                         "UserType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-create-user-response
                    'make-admin-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-create-user-response))
   common-lisp:nil))
(common-lisp:deftype admin-create-user-unused-account-validity-days-type ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass admin-delete-user-attributes-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-delete-user-attributes-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-delete-user-attributes-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attribute-names :initarg :user-attribute-names
                         :initform
                         (common-lisp:error
                          ":user-attribute-names is required")
                         :type
                         (common-lisp:or attribute-name-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-delete-user-attributes-request-user-attribute-names
                         :shape "AttributeNameListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-delete-user-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-delete-user-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-delete-user-attributes-request
                    'make-admin-delete-user-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attribute-names))
      (common-lisp:list
       (common-lisp:cons "UserAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-delete-user-attributes-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-delete-user-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-delete-user-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-delete-user-attributes-response
                    'make-admin-delete-user-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-delete-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-delete-user-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-delete-user-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-delete-user-request
                    'make-admin-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-disable-provider-for-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-admin-disable-provider-for-user-request-user-pool-id
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform
                         (common-lisp:error ":user is required") :type
                         (common-lisp:or provider-user-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-disable-provider-for-user-request-user
                         :shape "ProviderUserIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-disable-provider-for-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-disable-provider-for-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-disable-provider-for-user-request
                    'make-admin-disable-provider-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-provider-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-provider-for-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-provider-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-disable-provider-for-user-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-disable-provider-for-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-disable-provider-for-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-disable-provider-for-user-response
                    'make-admin-disable-provider-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-provider-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-provider-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-provider-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-disable-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-disable-user-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-disable-user-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-disable-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-disable-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-disable-user-request
                    'make-admin-disable-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-disable-user-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-disable-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-disable-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-disable-user-response
                    'make-admin-disable-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-disable-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-enable-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-enable-user-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-enable-user-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-enable-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-enable-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-enable-user-request
                    'make-admin-enable-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-enable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-enable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-enable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-enable-user-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-enable-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-enable-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-enable-user-response
                    'make-admin-enable-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-enable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-enable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-enable-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-forget-device-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-forget-device-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-forget-device-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-admin-forget-device-request-device-key
                         :shape "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-forget-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-forget-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-forget-device-request
                    'make-admin-forget-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-forget-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-forget-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-forget-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-get-device-request common-lisp:nil
                       ((device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-device-request-device-key
                         :shape "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-device-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-device-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-get-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-get-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-get-device-request 'make-admin-get-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-get-device-response common-lisp:nil
                       ((device :initarg :device :initform
                         (common-lisp:error ":device is required") :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-device-response-device :shape
                         "DeviceType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-get-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-get-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-get-device-response
                    'make-admin-get-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-get-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor struct-shape-admin-get-user-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-get-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-get-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-get-user-request 'make-admin-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-get-user-response common-lisp:nil
                       ((username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attributes :initarg :user-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-user-attributes
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-create-date :initarg :user-create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-admin-get-user-response-user-create-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-last-modified-date :initarg
                         :user-last-modified-date :initform common-lisp:nil
                         :type (common-lisp:or date-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-user-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-admin-get-user-response-enabled
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-status :initarg :user-status :initform
                         common-lisp:nil :type
                         (common-lisp:or user-status-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-user-status
                         :shape "UserStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mfaoptions :initarg :mfaoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or mfaoption-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-mfaoptions :shape
                         "MFAOptionListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-mfa-setting :initarg :preferred-mfa-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-preferred-mfa-setting
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-mfasetting-list :initarg :user-mfasetting-list
                         :initform common-lisp:nil :type
                         (common-lisp:or user-mfasetting-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-get-user-response-user-mfasetting-list
                         :shape "UserMFASettingListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-get-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-get-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-get-user-response 'make-admin-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-create-date))
      (common-lisp:list
       (common-lisp:cons "UserCreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "UserLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-status))
      (common-lisp:list
       (common-lisp:cons "UserStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfaoptions))
      (common-lisp:list
       (common-lisp:cons "MFAOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-mfa-setting))
      (common-lisp:list
       (common-lisp:cons "PreferredMfaSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-mfasetting-list))
      (common-lisp:list
       (common-lisp:cons "UserMFASettingList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-initiate-auth-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-flow :initarg :auth-flow :initform
                         (common-lisp:error ":auth-flow is required") :type
                         (common-lisp:or auth-flow-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-auth-flow
                         :shape "AuthFlowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-parameters :initarg :auth-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-parameters-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-auth-parameters
                         :shape "AuthParametersType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (context-data :initarg :context-data :initform
                         common-lisp:nil :type
                         (common-lisp:or context-data-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-request-context-data
                         :shape "ContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-initiate-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-initiate-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-initiate-auth-request
                    'make-admin-initiate-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-initiate-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-initiate-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-flow))
      (common-lisp:list
       (common-lisp:cons "AuthFlow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-parameters))
      (common-lisp:list
       (common-lisp:cons "AuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-data))
      (common-lisp:list
       (common-lisp:cons "ContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-initiate-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-initiate-auth-response common-lisp:nil
                       ((challenge-name :initarg :challenge-name :initform
                         common-lisp:nil :type
                         (common-lisp:or challenge-name-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-response-challenge-name
                         :shape "ChallengeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-response-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-parameters :initarg :challenge-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-parameters-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-response-challenge-parameters
                         :shape "ChallengeParametersType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-result :initarg :authentication-result
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-result-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-initiate-auth-response-authentication-result
                         :shape "AuthenticationResultType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-initiate-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-initiate-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-initiate-auth-response
                    'make-admin-initiate-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-initiate-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-initiate-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'challenge-parameters))
      (common-lisp:list
       (common-lisp:cons "ChallengeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-result))
      (common-lisp:list
       (common-lisp:cons "AuthenticationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-initiate-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-link-provider-for-user-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-admin-link-provider-for-user-request-user-pool-id
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-user :initarg :destination-user :initform
                         (common-lisp:error ":destination-user is required")
                         :type
                         (common-lisp:or provider-user-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-link-provider-for-user-request-destination-user
                         :shape "ProviderUserIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-user :initarg :source-user :initform
                         (common-lisp:error ":source-user is required") :type
                         (common-lisp:or provider-user-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-link-provider-for-user-request-source-user
                         :shape "ProviderUserIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-link-provider-for-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-link-provider-for-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-link-provider-for-user-request
                    'make-admin-link-provider-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-link-provider-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-link-provider-for-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-user))
      (common-lisp:list
       (common-lisp:cons "DestinationUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-user))
      (common-lisp:list
       (common-lisp:cons "SourceUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-link-provider-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-link-provider-for-user-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-link-provider-for-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-link-provider-for-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-link-provider-for-user-response
                    'make-admin-link-provider-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-link-provider-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-link-provider-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-link-provider-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-list-devices-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-devices-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-devices-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-devices-request-limit :shape
                         "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or search-pagination-token-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-list-devices-request-pagination-token
                         :shape "SearchPaginationTokenType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-list-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-list-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-list-devices-request
                    'make-admin-list-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-list-devices-response common-lisp:nil
                       ((devices :initarg :devices :initform common-lisp:nil
                         :type
                         (common-lisp:or device-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-devices-response-devices
                         :shape "DeviceListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or search-pagination-token-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-list-devices-response-pagination-token
                         :shape "SearchPaginationTokenType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-list-devices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-list-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-list-devices-response
                    'make-admin-list-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-list-groups-for-user-request common-lisp:nil
                       ((username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-groups-for-user-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-groups-for-user-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-groups-for-user-request-limit
                         :shape "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-admin-list-groups-for-user-request-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-list-groups-for-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-list-groups-for-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-list-groups-for-user-request
                    'make-admin-list-groups-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-groups-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-groups-for-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-groups-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-list-groups-for-user-response common-lisp:nil
                       ((groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or group-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-groups-for-user-response-groups
                         :shape "GroupListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-admin-list-groups-for-user-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-list-groups-for-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-list-groups-for-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-list-groups-for-user-response
                    'make-admin-list-groups-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-groups-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-groups-for-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-groups-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-list-user-auth-events-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-user-auth-events-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-user-auth-events-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-user-auth-events-request-max-results
                         :shape "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-admin-list-user-auth-events-request-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-list-user-auth-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-list-user-auth-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-list-user-auth-events-request
                    'make-admin-list-user-auth-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-user-auth-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-user-auth-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-user-auth-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-list-user-auth-events-response common-lisp:nil
                       ((auth-events :initarg :auth-events :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-events-type common-lisp:null)
                         :accessor
                         struct-shape-admin-list-user-auth-events-response-auth-events
                         :shape "AuthEventsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-admin-list-user-auth-events-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-list-user-auth-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-list-user-auth-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-list-user-auth-events-response
                    'make-admin-list-user-auth-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-user-auth-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-user-auth-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-events))
      (common-lisp:list
       (common-lisp:cons "AuthEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-list-user-auth-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-remove-user-from-group-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-remove-user-from-group-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-remove-user-from-group-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor
                         struct-shape-admin-remove-user-from-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-remove-user-from-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-remove-user-from-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-remove-user-from-group-request
                    'make-admin-remove-user-from-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-remove-user-from-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-remove-user-from-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-remove-user-from-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-reset-user-password-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-reset-user-password-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-reset-user-password-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-admin-reset-user-password-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-reset-user-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-reset-user-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-reset-user-password-request
                    'make-admin-reset-user-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-reset-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-reset-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-reset-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-reset-user-password-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-reset-user-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-reset-user-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-reset-user-password-response
                    'make-admin-reset-user-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-reset-user-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-reset-user-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-reset-user-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-respond-to-auth-challenge-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-name :initarg :challenge-name :initform
                         (common-lisp:error ":challenge-name is required")
                         :type
                         (common-lisp:or challenge-name-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-challenge-name
                         :shape "ChallengeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-responses :initarg :challenge-responses
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-responses-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-challenge-responses
                         :shape "ChallengeResponsesType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (context-data :initarg :context-data :initform
                         common-lisp:nil :type
                         (common-lisp:or context-data-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-context-data
                         :shape "ContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-respond-to-auth-challenge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-respond-to-auth-challenge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-respond-to-auth-challenge-request
                    'make-admin-respond-to-auth-challenge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-respond-to-auth-challenge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-respond-to-auth-challenge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-responses))
      (common-lisp:list
       (common-lisp:cons "ChallengeResponses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-data))
      (common-lisp:list
       (common-lisp:cons "ContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-respond-to-auth-challenge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-respond-to-auth-challenge-response common-lisp:nil
                       ((challenge-name :initarg :challenge-name :initform
                         common-lisp:nil :type
                         (common-lisp:or challenge-name-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-response-challenge-name
                         :shape "ChallengeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-response-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-parameters :initarg :challenge-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-parameters-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-response-challenge-parameters
                         :shape "ChallengeParametersType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-result :initarg :authentication-result
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-result-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-respond-to-auth-challenge-response-authentication-result
                         :shape "AuthenticationResultType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-respond-to-auth-challenge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-respond-to-auth-challenge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-respond-to-auth-challenge-response
                    'make-admin-respond-to-auth-challenge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-respond-to-auth-challenge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-respond-to-auth-challenge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'challenge-parameters))
      (common-lisp:list
       (common-lisp:cons "ChallengeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-result))
      (common-lisp:list
       (common-lisp:cons "AuthenticationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-respond-to-auth-challenge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-set-user-mfapreference-request common-lisp:nil
                       ((smsmfa-settings :initarg :smsmfa-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or smsmfa-settings-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-mfapreference-request-smsmfa-settings
                         :shape "SMSMfaSettingsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-token-mfa-settings :initarg
                         :software-token-mfa-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or software-token-mfa-settings-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-mfapreference-request-software-token-mfa-settings
                         :shape "SoftwareTokenMfaSettingsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-mfapreference-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-mfapreference-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-set-user-mfapreference-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-set-user-mfapreference-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-set-user-mfapreference-request
                    'make-admin-set-user-mfapreference-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-mfapreference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-mfapreference-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smsmfa-settings))
      (common-lisp:list
       (common-lisp:cons "SMSMfaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-token-mfa-settings))
      (common-lisp:list
       (common-lisp:cons "SoftwareTokenMfaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-mfapreference-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-set-user-mfapreference-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-set-user-mfapreference-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-set-user-mfapreference-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-set-user-mfapreference-response
                    'make-admin-set-user-mfapreference-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-mfapreference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-mfapreference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-mfapreference-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-set-user-password-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-password-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-password-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform
                         (common-lisp:error ":password is required") :type
                         (common-lisp:or password-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-password-request-password
                         :shape "PasswordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permanent :initarg :permanent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-password-request-permanent
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-set-user-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-set-user-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-set-user-password-request
                    'make-admin-set-user-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permanent))
      (common-lisp:list
       (common-lisp:cons "Permanent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-set-user-password-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-set-user-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-set-user-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-set-user-password-response
                    'make-admin-set-user-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-set-user-settings-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-settings-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-settings-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mfaoptions :initarg :mfaoptions :initform
                         (common-lisp:error ":mfaoptions is required") :type
                         (common-lisp:or mfaoption-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-set-user-settings-request-mfaoptions
                         :shape "MFAOptionListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-set-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-set-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-set-user-settings-request
                    'make-admin-set-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfaoptions))
      (common-lisp:list
       (common-lisp:cons "MFAOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-set-user-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-set-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-set-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-set-user-settings-response
                    'make-admin-set-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-set-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-update-auth-event-feedback-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-auth-event-feedback-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-auth-event-feedback-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-id :initarg :event-id :initform
                         (common-lisp:error ":event-id is required") :type
                         (common-lisp:or event-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-auth-event-feedback-request-event-id
                         :shape "EventIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback-value :initarg :feedback-value :initform
                         (common-lisp:error ":feedback-value is required")
                         :type
                         (common-lisp:or feedback-value-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-auth-event-feedback-request-feedback-value
                         :shape "FeedbackValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-update-auth-event-feedback-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-update-auth-event-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-update-auth-event-feedback-request
                    'make-admin-update-auth-event-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-auth-event-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-auth-event-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-value))
      (common-lisp:list
       (common-lisp:cons "FeedbackValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-auth-event-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-update-auth-event-feedback-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-update-auth-event-feedback-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-update-auth-event-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-update-auth-event-feedback-response
                    'make-admin-update-auth-event-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-auth-event-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-auth-event-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-auth-event-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-update-device-status-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-device-status-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-device-status-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-device-status-request-device-key
                         :shape "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-remembered-status :initarg
                         :device-remembered-status :initform common-lisp:nil
                         :type
                         (common-lisp:or device-remembered-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-admin-update-device-status-request-device-remembered-status
                         :shape "DeviceRememberedStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-update-device-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-update-device-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-update-device-status-request
                    'make-admin-update-device-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-device-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-device-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-remembered-status))
      (common-lisp:list
       (common-lisp:cons "DeviceRememberedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-device-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-update-device-status-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-update-device-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-update-device-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-update-device-status-response
                    'make-admin-update-device-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-device-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-device-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-device-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-update-user-attributes-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-user-attributes-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-user-attributes-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attributes :initarg :user-attributes :initform
                         (common-lisp:error ":user-attributes is required")
                         :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-user-attributes-request-user-attributes
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-admin-update-user-attributes-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-update-user-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-update-user-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-update-user-attributes-request
                    'make-admin-update-user-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-user-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-user-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-user-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-update-user-attributes-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-update-user-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-update-user-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-update-user-attributes-response
                    'make-admin-update-user-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-update-user-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-user-global-sign-out-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-admin-user-global-sign-out-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-admin-user-global-sign-out-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-user-global-sign-out-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-user-global-sign-out-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-user-global-sign-out-request
                    'make-admin-user-global-sign-out-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-user-global-sign-out-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-user-global-sign-out-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-user-global-sign-out-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-user-global-sign-out-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-user-global-sign-out-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'admin-user-global-sign-out-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'admin-user-global-sign-out-response
                    'make-admin-user-global-sign-out-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          admin-user-global-sign-out-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          admin-user-global-sign-out-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          admin-user-global-sign-out-response))
   common-lisp:nil))
(common-lisp:deftype advanced-security-mode-type () 'common-lisp:string)
(common-lisp:deftype alias-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alias-attributes-list-type ()
   '(trivial-types:proper-list alias-attribute-type))
 (common-lisp:defun make-alias-attributes-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias-attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition alias-exists-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       alias-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'alias-exists-exception 'alias-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass analytics-configuration-type common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hex-string-type common-lisp:null)
                         :accessor
                         struct-shape-analytics-configuration-type-application-id
                         :shape "HexStringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-arn :initarg :application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-analytics-configuration-type-application-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor
                         struct-shape-analytics-configuration-type-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-analytics-configuration-type-external-id
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-data-shared :initarg :user-data-shared :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-analytics-configuration-type-user-data-shared
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-configuration-type
                    'make-analytics-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data-shared))
      (common-lisp:list
       (common-lisp:cons "UserDataShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-metadata-type common-lisp:nil
                       ((analytics-endpoint-id :initarg :analytics-endpoint-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-analytics-metadata-type-analytics-endpoint-id
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-metadata-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-metadata-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-metadata-type 'make-analytics-metadata-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-metadata-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-metadata-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "AnalyticsEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-metadata-type))
   common-lisp:nil))
(common-lisp:deftype arn-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-software-token-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-associate-software-token-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-associate-software-token-request-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-software-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-software-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-software-token-request
                    'make-associate-software-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-software-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-software-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-software-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-software-token-response common-lisp:nil
                       ((secret-code :initarg :secret-code :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-code-type common-lisp:null)
                         :accessor
                         struct-shape-associate-software-token-response-secret-code
                         :shape "SecretCodeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-associate-software-token-response-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-software-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-software-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-software-token-response
                    'make-associate-software-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-software-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-software-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-code))
      (common-lisp:list
       (common-lisp:cons "SecretCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-software-token-response))
   common-lisp:nil))
(common-lisp:deftype attribute-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-list-type ()
   '(trivial-types:proper-list attribute-type))
 (common-lisp:defun make-attribute-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-mapping-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-mapping-type () 'common-lisp:hash-table)
 (common-lisp:defun make-attribute-mapping-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype attribute-name-list-type ()
   '(trivial-types:proper-list attribute-name-type))
 (common-lisp:defun make-attribute-name-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute-type common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or attribute-name-type common-lisp:null)
                         :accessor struct-shape-attribute-type-name :shape
                         "AttributeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or attribute-value-type common-lisp:null)
                         :accessor struct-shape-attribute-type-value :shape
                         "AttributeValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute-type 'make-attribute-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-type))
   common-lisp:nil))
(common-lisp:deftype attribute-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes-require-verification-before-update-type ()
   '(trivial-types:proper-list verified-attribute-type))
 (common-lisp:defun make-attributes-require-verification-before-update-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list verified-attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auth-event-type common-lisp:nil
                       ((event-id :initarg :event-id :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-auth-event-type-event-id :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-type :initarg :event-type :initform
                         common-lisp:nil :type
                         (common-lisp:or event-type common-lisp:null) :accessor
                         struct-shape-auth-event-type-event-type :shape
                         "EventType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-auth-event-type-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-response :initarg :event-response :initform
                         common-lisp:nil :type
                         (common-lisp:or event-response-type common-lisp:null)
                         :accessor struct-shape-auth-event-type-event-response
                         :shape "EventResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-risk :initarg :event-risk :initform
                         common-lisp:nil :type
                         (common-lisp:or event-risk-type common-lisp:null)
                         :accessor struct-shape-auth-event-type-event-risk
                         :shape "EventRiskType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-responses :initarg :challenge-responses
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-response-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-auth-event-type-challenge-responses
                         :shape "ChallengeResponseListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-context-data :initarg :event-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or event-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-auth-event-type-event-context-data :shape
                         "EventContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-feedback :initarg :event-feedback :initform
                         common-lisp:nil :type
                         (common-lisp:or event-feedback-type common-lisp:null)
                         :accessor struct-shape-auth-event-type-event-feedback
                         :shape "EventFeedbackType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auth-event-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auth-event-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'auth-event-type 'make-auth-event-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auth-event-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auth-event-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-response))
      (common-lisp:list
       (common-lisp:cons "EventResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-risk))
      (common-lisp:list
       (common-lisp:cons "EventRisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-responses))
      (common-lisp:list
       (common-lisp:cons "ChallengeResponses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-context-data))
      (common-lisp:list
       (common-lisp:cons "EventContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-feedback))
      (common-lisp:list
       (common-lisp:cons "EventFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auth-event-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auth-events-type ()
   '(trivial-types:proper-list auth-event-type))
 (common-lisp:defun make-auth-events-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auth-flow-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auth-parameters-type () 'common-lisp:hash-table)
 (common-lisp:defun make-auth-parameters-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype auth-session-validity-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass authentication-result-type common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-authentication-result-type-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-in :initarg :expires-in :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-type common-lisp:null)
                         :accessor
                         struct-shape-authentication-result-type-expires-in
                         :shape "IntegerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-type :initarg :token-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-authentication-result-type-token-type
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh-token :initarg :refresh-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-authentication-result-type-refresh-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id-token :initarg :id-token :initform common-lisp:nil
                         :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-authentication-result-type-id-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-device-metadata :initarg :new-device-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or new-device-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-authentication-result-type-new-device-metadata
                         :shape "NewDeviceMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authentication-result-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authentication-result-type
                    'make-authentication-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-result-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "ExpiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "TokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "RefreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token))
      (common-lisp:list
       (common-lisp:cons "IdToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-device-metadata))
      (common-lisp:list
       (common-lisp:cons "NewDeviceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blocked-iprange-list-type ()
   '(trivial-types:proper-list string-type))
 (common-lisp:defun make-blocked-iprange-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean-type () 'common-lisp:boolean)
(common-lisp:deftype csstype () 'common-lisp:string)
(common-lisp:deftype cssversion-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype callback-urls-list-type ()
   '(trivial-types:proper-list redirect-url-type))
 (common-lisp:defun make-callback-urls-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list redirect-url-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype challenge-name () 'common-lisp:string)
(common-lisp:deftype challenge-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype challenge-parameters-type () 'common-lisp:hash-table)
 (common-lisp:defun make-challenge-parameters-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype challenge-response () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype challenge-response-list-type ()
   '(trivial-types:proper-list challenge-response-type))
 (common-lisp:defun make-challenge-response-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list challenge-response-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass challenge-response-type common-lisp:nil
                       ((challenge-name :initarg :challenge-name :initform
                         common-lisp:nil :type
                         (common-lisp:or challenge-name common-lisp:null)
                         :accessor
                         struct-shape-challenge-response-type-challenge-name
                         :shape "ChallengeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-response :initarg :challenge-response
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-response common-lisp:null)
                         :accessor
                         struct-shape-challenge-response-type-challenge-response
                         :shape "ChallengeResponse" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-challenge-response-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'challenge-response-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'challenge-response-type 'make-challenge-response-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          challenge-response-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          challenge-response-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-response))
      (common-lisp:list
       (common-lisp:cons "ChallengeResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          challenge-response-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype challenge-responses-type () 'common-lisp:hash-table)
 (common-lisp:defun make-challenge-responses-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass change-password-request common-lisp:nil
                       ((previous-password :initarg :previous-password
                         :initform
                         (common-lisp:error ":previous-password is required")
                         :type (common-lisp:or password-type common-lisp:null)
                         :accessor
                         struct-shape-change-password-request-previous-password
                         :shape "PasswordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proposed-password :initarg :proposed-password
                         :initform
                         (common-lisp:error ":proposed-password is required")
                         :type (common-lisp:or password-type common-lisp:null)
                         :accessor
                         struct-shape-change-password-request-proposed-password
                         :shape "PasswordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-change-password-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-password-request 'make-change-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-password))
      (common-lisp:list
       (common-lisp:cons "PreviousPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposed-password))
      (common-lisp:list
       (common-lisp:cons "ProposedPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-password-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-password-response 'make-change-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-password-response))
   common-lisp:nil))
(common-lisp:deftype client-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype client-metadata-type () 'common-lisp:hash-table)
 (common-lisp:defun make-client-metadata-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype client-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype client-permission-list-type ()
   '(trivial-types:proper-list client-permission-type))
 (common-lisp:defun make-client-permission-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-permission-type () 'common-lisp:string)
(common-lisp:deftype client-secret-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-configuration-type common-lisp:nil
                       ((log-group-arn :initarg :log-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-configuration-type-log-group-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-logs-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-logs-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-configuration-type
                    'make-cloud-watch-logs-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-delivery-details-list-type ()
   '(trivial-types:proper-list code-delivery-details-type))
 (common-lisp:defun make-code-delivery-details-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            code-delivery-details-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass code-delivery-details-type common-lisp:nil
                       ((destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-code-delivery-details-type-destination
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-medium :initarg :delivery-medium :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-medium-type common-lisp:null)
                         :accessor
                         struct-shape-code-delivery-details-type-delivery-medium
                         :shape "DeliveryMediumType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-name-type common-lisp:null)
                         :accessor
                         struct-shape-code-delivery-details-type-attribute-name
                         :shape "AttributeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-delivery-details-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-delivery-details-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-delivery-details-type
                    'make-code-delivery-details-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-delivery-details-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-delivery-details-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-medium))
      (common-lisp:list
       (common-lisp:cons "DeliveryMedium"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-delivery-details-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition code-delivery-failure-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       code-delivery-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-delivery-failure-exception
                    'code-delivery-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition code-mismatch-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       code-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-mismatch-exception 'code-mismatch-exception-message)))
(common-lisp:deftype completion-message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compromised-credentials-actions-type common-lisp:nil
                       ((event-action :initarg :event-action :initform
                         (common-lisp:error ":event-action is required") :type
                         (common-lisp:or
                          compromised-credentials-event-action-type
                          common-lisp:null)
                         :accessor
                         struct-shape-compromised-credentials-actions-type-event-action
                         :shape "CompromisedCredentialsEventActionType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compromised-credentials-actions-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'compromised-credentials-actions-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compromised-credentials-actions-type
                    'make-compromised-credentials-actions-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compromised-credentials-actions-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compromised-credentials-actions-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-action))
      (common-lisp:list
       (common-lisp:cons "EventAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compromised-credentials-actions-type))
   common-lisp:nil))
(common-lisp:deftype compromised-credentials-event-action-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compromised-credentials-risk-configuration-type
                       common-lisp:nil
                       ((event-filter :initarg :event-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or event-filters-type common-lisp:null)
                         :accessor
                         struct-shape-compromised-credentials-risk-configuration-type-event-filter
                         :shape "EventFiltersType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or compromised-credentials-actions-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-compromised-credentials-risk-configuration-type-actions
                         :shape "CompromisedCredentialsActionsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compromised-credentials-risk-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'compromised-credentials-risk-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compromised-credentials-risk-configuration-type
                    'make-compromised-credentials-risk-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compromised-credentials-risk-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compromised-credentials-risk-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-filter))
      (common-lisp:list
       (common-lisp:cons "EventFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compromised-credentials-risk-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass confirm-device-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-device-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-device-request-device-key :shape
                         "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-secret-verifier-config :initarg
                         :device-secret-verifier-config :initform
                         common-lisp:nil :type
                         (common-lisp:or device-secret-verifier-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-device-request-device-secret-verifier-config
                         :shape "DeviceSecretVerifierConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-name-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-device-request-device-name :shape
                         "DeviceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confirm-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-device-request 'make-confirm-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-secret-verifier-config))
      (common-lisp:list
       (common-lisp:cons "DeviceSecretVerifierConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-device-response common-lisp:nil
                       ((user-confirmation-necessary :initarg
                         :user-confirmation-necessary :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-device-response-user-confirmation-necessary
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confirm-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-device-response 'make-confirm-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-confirmation-necessary))
      (common-lisp:list
       (common-lisp:cons "UserConfirmationNecessary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-forgot-password-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-hash :initarg :secret-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-hash-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-secret-hash
                         :shape "SecretHashType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confirmation-code :initarg :confirmation-code
                         :initform
                         (common-lisp:error ":confirmation-code is required")
                         :type
                         (common-lisp:or confirmation-code-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-confirmation-code
                         :shape "ConfirmationCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (password :initarg :password :initform
                         (common-lisp:error ":password is required") :type
                         (common-lisp:or password-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-password
                         :shape "PasswordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-user-context-data
                         :shape "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-forgot-password-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-forgot-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-forgot-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-forgot-password-request
                    'make-confirm-forgot-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-forgot-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-forgot-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-hash))
      (common-lisp:list
       (common-lisp:cons "SecretHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-code))
      (common-lisp:list
       (common-lisp:cons "ConfirmationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-forgot-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-forgot-password-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-forgot-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-forgot-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-forgot-password-response
                    'make-confirm-forgot-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-forgot-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-forgot-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-forgot-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-sign-up-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-client-id :shape
                         "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-hash :initarg :secret-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-hash-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-secret-hash
                         :shape "SecretHashType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confirmation-code :initarg :confirmation-code
                         :initform
                         (common-lisp:error ":confirmation-code is required")
                         :type
                         (common-lisp:or confirmation-code-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-confirmation-code
                         :shape "ConfirmationCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (force-alias-creation :initarg :force-alias-creation
                         :initform common-lisp:nil :type
                         (common-lisp:or force-alias-creation common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-force-alias-creation
                         :shape "ForceAliasCreation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-user-context-data
                         :shape "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-confirm-sign-up-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-sign-up-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confirm-sign-up-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-sign-up-request 'make-confirm-sign-up-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-sign-up-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-sign-up-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-hash))
      (common-lisp:list
       (common-lisp:cons "SecretHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-code))
      (common-lisp:list
       (common-lisp:cons "ConfirmationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-alias-creation))
      (common-lisp:list
       (common-lisp:cons "ForceAliasCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-sign-up-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-sign-up-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-sign-up-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confirm-sign-up-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-sign-up-response 'make-confirm-sign-up-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-sign-up-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-sign-up-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-sign-up-response))
   common-lisp:nil))
(common-lisp:deftype confirmation-code-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass context-data-type common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ip-address is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-context-data-type-ip-address
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         (common-lisp:error ":server-name is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-context-data-type-server-name
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-path :initarg :server-path :initform
                         (common-lisp:error ":server-path is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-context-data-type-server-path
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-headers :initarg :http-headers :initform
                         (common-lisp:error ":http-headers is required") :type
                         (common-lisp:or http-header-list common-lisp:null)
                         :accessor struct-shape-context-data-type-http-headers
                         :shape "HttpHeaderList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoded-data :initarg :encoded-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-context-data-type-encoded-data
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-context-data-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'context-data-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'context-data-type 'make-context-data-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-data-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-data-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-path))
      (common-lisp:list
       (common-lisp:cons "ServerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-headers))
      (common-lisp:list
       (common-lisp:cons "HttpHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-data))
      (common-lisp:list
       (common-lisp:cons "EncodedData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-data-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor struct-shape-create-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-group-request-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor
                         struct-shape-create-group-request-description :shape
                         "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor struct-shape-create-group-request-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (precedence :initarg :precedence :initform
                         common-lisp:nil :type
                         (common-lisp:or precedence-type common-lisp:null)
                         :accessor struct-shape-create-group-request-precedence
                         :shape "PrecedenceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precedence))
      (common-lisp:list
       (common-lisp:cons "Precedence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-response common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-create-group-response-group :shape
                         "GroupType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-identity-provider-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         (common-lisp:error ":provider-name is required") :type
                         (common-lisp:or provider-name-type-v2
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-provider-name
                         :shape "ProviderNameTypeV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         (common-lisp:error ":provider-type is required") :type
                         (common-lisp:or identity-provider-type-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-provider-type
                         :shape "IdentityProviderTypeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider-details :initarg :provider-details :initform
                         (common-lisp:error ":provider-details is required")
                         :type
                         (common-lisp:or provider-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-provider-details
                         :shape "ProviderDetailsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-mapping :initarg :attribute-mapping
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-mapping-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-attribute-mapping
                         :shape "AttributeMappingType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idp-identifiers :initarg :idp-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or idp-identifiers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-request-idp-identifiers
                         :shape "IdpIdentifiersListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-identity-provider-request
                    'make-create-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-details))
      (common-lisp:list
       (common-lisp:cons "ProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-mapping))
      (common-lisp:list
       (common-lisp:cons "AttributeMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-identifiers))
      (common-lisp:list
       (common-lisp:cons "IdpIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-provider-response-identity-provider
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-identity-provider-response
                    'make-create-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-server-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-resource-server-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or resource-server-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resource-server-request-identifier
                         :shape "ResourceServerIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-server-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resource-server-request-name
                         :shape "ResourceServerNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scopes :initarg :scopes :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-server-scope-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resource-server-request-scopes
                         :shape "ResourceServerScopeListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-server-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-server-request
                    'make-create-resource-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "Scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-server-response common-lisp:nil
                       ((resource-server :initarg :resource-server :initform
                         (common-lisp:error ":resource-server is required")
                         :type
                         (common-lisp:or resource-server-type common-lisp:null)
                         :accessor
                         struct-shape-create-resource-server-response-resource-server
                         :shape "ResourceServerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-server-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-server-response
                    'make-create-resource-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-server))
      (common-lisp:list
       (common-lisp:cons "ResourceServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-import-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or user-import-job-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-import-job-request-job-name
                         :shape "UserImportJobNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-import-job-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-logs-role-arn :initarg
                         :cloud-watch-logs-role-arn :initform
                         (common-lisp:error
                          ":cloud-watch-logs-role-arn is required")
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-import-job-request-cloud-watch-logs-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-import-job-request
                    'make-create-user-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-import-job-response common-lisp:nil
                       ((user-import-job :initarg :user-import-job :initform
                         common-lisp:nil :type
                         (common-lisp:or user-import-job-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-import-job-response-user-import-job
                         :shape "UserImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-import-job-response
                    'make-create-user-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-import-job))
      (common-lisp:list
       (common-lisp:cons "UserImportJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-pool-client-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-name :initarg :client-name :initform
                         (common-lisp:error ":client-name is required") :type
                         (common-lisp:or client-name-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-client-name
                         :shape "ClientNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generate-secret :initarg :generate-secret :initform
                         common-lisp:nil :type
                         (common-lisp:or generate-secret common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-generate-secret
                         :shape "GenerateSecret" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh-token-validity :initarg
                         :refresh-token-validity :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-refresh-token-validity
                         :shape "RefreshTokenValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-token-validity :initarg :access-token-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or access-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-access-token-validity
                         :shape "AccessTokenValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id-token-validity :initarg :id-token-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or id-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-id-token-validity
                         :shape "IdTokenValidityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-validity-units :initarg :token-validity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or token-validity-units-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-token-validity-units
                         :shape "TokenValidityUnitsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (read-attributes :initarg :read-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or client-permission-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-read-attributes
                         :shape "ClientPermissionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (write-attributes :initarg :write-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or client-permission-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-write-attributes
                         :shape "ClientPermissionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (explicit-auth-flows :initarg :explicit-auth-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or explicit-auth-flows-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-explicit-auth-flows
                         :shape "ExplicitAuthFlowsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-identity-providers :initarg
                         :supported-identity-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or supported-identity-providers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-supported-identity-providers
                         :shape "SupportedIdentityProvidersListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (callback-urls :initarg :callback-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or callback-urls-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-callback-urls
                         :shape "CallbackURLsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logout-urls :initarg :logout-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or logout-urls-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-logout-urls
                         :shape "LogoutURLsListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-redirect-uri :initarg :default-redirect-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or redirect-url-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-default-redirect-uri
                         :shape "RedirectUrlType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-flows :initarg :allowed-oauth-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or oauth-flows-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-allowed-oauth-flows
                         :shape "OAuthFlowsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-scopes :initarg :allowed-oauth-scopes
                         :initform common-lisp:nil :type
                         (common-lisp:or scope-list-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-allowed-oauth-scopes
                         :shape "ScopeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-flows-user-pool-client :initarg
                         :allowed-oauth-flows-user-pool-client :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-allowed-oauth-flows-user-pool-client
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-configuration :initarg
                         :analytics-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-analytics-configuration
                         :shape "AnalyticsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prevent-user-existence-errors :initarg
                         :prevent-user-existence-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or prevent-user-existence-error-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-prevent-user-existence-errors
                         :shape "PreventUserExistenceErrorTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-token-revocation :initarg
                         :enable-token-revocation :initform common-lisp:nil
                         :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-enable-token-revocation
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-propagate-additional-user-context-data :initarg
                         :enable-propagate-additional-user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-enable-propagate-additional-user-context-data
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-session-validity :initarg :auth-session-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or auth-session-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-request-auth-session-validity
                         :shape "AuthSessionValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-pool-client-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-pool-client-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-pool-client-request
                    'make-create-user-pool-client-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-client-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-client-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-name))
      (common-lisp:list
       (common-lisp:cons "ClientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generate-secret))
      (common-lisp:list
       (common-lisp:cons "GenerateSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-token-validity))
      (common-lisp:list
       (common-lisp:cons "RefreshTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-token-validity))
      (common-lisp:list
       (common-lisp:cons "AccessTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token-validity))
      (common-lisp:list
       (common-lisp:cons "IdTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-validity-units))
      (common-lisp:list
       (common-lisp:cons "TokenValidityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-attributes))
      (common-lisp:list
       (common-lisp:cons "ReadAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-attributes))
      (common-lisp:list
       (common-lisp:cons "WriteAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-auth-flows))
      (common-lisp:list
       (common-lisp:cons "ExplicitAuthFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-identity-providers))
      (common-lisp:list
       (common-lisp:cons "SupportedIdentityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-urls))
      (common-lisp:list
       (common-lisp:cons "CallbackURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logout-urls))
      (common-lisp:list
       (common-lisp:cons "LogoutURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-redirect-uri))
      (common-lisp:list
       (common-lisp:cons "DefaultRedirectURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-oauth-flows))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-oauth-flows-user-pool-client))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthFlowsUserPoolClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prevent-user-existence-errors))
      (common-lisp:list
       (common-lisp:cons "PreventUserExistenceErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-token-revocation))
      (common-lisp:list
       (common-lisp:cons "EnableTokenRevocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-propagate-additional-user-context-data))
      (common-lisp:list
       (common-lisp:cons "EnablePropagateAdditionalUserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-session-validity))
      (common-lisp:list
       (common-lisp:cons "AuthSessionValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-client-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-pool-client-response common-lisp:nil
                       ((user-pool-client :initarg :user-pool-client :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-client-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-client-response-user-pool-client
                         :shape "UserPoolClientType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-pool-client-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-pool-client-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-pool-client-response
                    'make-create-user-pool-client-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-client-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-client-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-client))
      (common-lisp:list
       (common-lisp:cons "UserPoolClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-client-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-pool-domain-request common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-domain-request-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-domain-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-config :initarg :custom-domain-config
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-domain-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-domain-request-custom-domain-config
                         :shape "CustomDomainConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-pool-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-pool-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-pool-domain-request
                    'make-create-user-pool-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-config))
      (common-lisp:list
       (common-lisp:cons "CustomDomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-pool-domain-response common-lisp:nil
                       ((cloud-front-domain :initarg :cloud-front-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-domain-response-cloud-front-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-pool-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-pool-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-pool-domain-response
                    'make-create-user-pool-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-front-domain))
      (common-lisp:list
       (common-lisp:cons "CloudFrontDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-pool-request common-lisp:nil
                       ((pool-name :initarg :pool-name :initform
                         (common-lisp:error ":pool-name is required") :type
                         (common-lisp:or user-pool-name-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-pool-name :shape
                         "UserPoolNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or user-pool-policy-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-policies :shape
                         "UserPoolPolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-deletion-protection
                         :shape "DeletionProtectionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-config-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-lambda-config
                         :shape "LambdaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-verified-attributes :initarg
                         :auto-verified-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or verified-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-auto-verified-attributes
                         :shape "VerifiedAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alias-attributes :initarg :alias-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-alias-attributes
                         :shape "AliasAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (username-attributes :initarg :username-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or username-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-username-attributes
                         :shape "UsernameAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-verification-message :initarg
                         :sms-verification-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-sms-verification-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-verification-message :initarg
                         :email-verification-message :initform common-lisp:nil
                         :type
                         (common-lisp:or email-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-email-verification-message
                         :shape "EmailVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-verification-subject :initarg
                         :email-verification-subject :initform common-lisp:nil
                         :type
                         (common-lisp:or email-verification-subject-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-email-verification-subject
                         :shape "EmailVerificationSubjectType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (verification-message-template :initarg
                         :verification-message-template :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-message-template-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-verification-message-template
                         :shape "VerificationMessageTemplateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-authentication-message :initarg
                         :sms-authentication-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-sms-authentication-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfa-configuration :initarg :mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-mfa-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-mfa-configuration
                         :shape "UserPoolMfaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attribute-update-settings :initarg
                         :user-attribute-update-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute-update-settings-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-user-attribute-update-settings
                         :shape "UserAttributeUpdateSettingsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-configuration :initarg :device-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or device-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-device-configuration
                         :shape "DeviceConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-configuration :initarg :email-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or email-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-email-configuration
                         :shape "EmailConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-configuration :initarg :sms-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-sms-configuration
                         :shape "SmsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-pool-tags :initarg :user-pool-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-tags-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-user-pool-tags
                         :shape "UserPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (admin-create-user-config :initarg
                         :admin-create-user-config :initform common-lisp:nil
                         :type
                         (common-lisp:or admin-create-user-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-admin-create-user-config
                         :shape "AdminCreateUserConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-attributes-list-type
                                         common-lisp:null)
                         :accessor struct-shape-create-user-pool-request-schema
                         :shape "SchemaAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-pool-add-ons :initarg :user-pool-add-ons
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-add-ons-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-user-pool-add-ons
                         :shape "UserPoolAddOnsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username-configuration :initarg
                         :username-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or username-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-username-configuration
                         :shape "UsernameConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-recovery-setting :initarg
                         :account-recovery-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or account-recovery-setting-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-request-account-recovery-setting
                         :shape "AccountRecoverySettingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-pool-request 'make-create-user-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-name))
      (common-lisp:list
       (common-lisp:cons "PoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "LambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-verified-attributes))
      (common-lisp:list
       (common-lisp:cons "AutoVerifiedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-attributes))
      (common-lisp:list
       (common-lisp:cons "AliasAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-attributes))
      (common-lisp:list
       (common-lisp:cons "UsernameAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-verification-message))
      (common-lisp:list
       (common-lisp:cons "SmsVerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-verification-message))
      (common-lisp:list
       (common-lisp:cons "EmailVerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-verification-subject))
      (common-lisp:list
       (common-lisp:cons "EmailVerificationSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message-template))
      (common-lisp:list
       (common-lisp:cons "VerificationMessageTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-authentication-message))
      (common-lisp:list
       (common-lisp:cons "SmsAuthenticationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "MfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attribute-update-settings))
      (common-lisp:list
       (common-lisp:cons "UserAttributeUpdateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-configuration))
      (common-lisp:list
       (common-lisp:cons "EmailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-tags))
      (common-lisp:list
       (common-lisp:cons "UserPoolTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-create-user-config))
      (common-lisp:list
       (common-lisp:cons "AdminCreateUserConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-add-ons))
      (common-lisp:list
       (common-lisp:cons "UserPoolAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'username-configuration))
      (common-lisp:list
       (common-lisp:cons "UsernameConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-recovery-setting))
      (common-lisp:list
       (common-lisp:cons "AccountRecoverySetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-pool-response common-lisp:nil
                       ((user-pool :initarg :user-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-type common-lisp:null)
                         :accessor
                         struct-shape-create-user-pool-response-user-pool
                         :shape "UserPoolType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-pool-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-pool-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-pool-response
                    'make-create-user-pool-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool))
      (common-lisp:list
       (common-lisp:cons "UserPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-pool-response))
   common-lisp:nil))
(common-lisp:deftype custom-attribute-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-attributes-list-type ()
   '(trivial-types:proper-list schema-attribute-type))
 (common-lisp:defun make-custom-attributes-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-domain-config-type common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         (common-lisp:error ":certificate-arn is required")
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor
                         struct-shape-custom-domain-config-type-certificate-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-domain-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-domain-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-domain-config-type
                    'make-custom-domain-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-domain-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-domain-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-domain-config-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-email-lambda-version-config-type common-lisp:nil
                       ((lambda-version :initarg :lambda-version :initform
                         (common-lisp:error ":lambda-version is required")
                         :type
                         (common-lisp:or
                          custom-email-sender-lambda-version-type
                          common-lisp:null)
                         :accessor
                         struct-shape-custom-email-lambda-version-config-type-lambda-version
                         :shape "CustomEmailSenderLambdaVersionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-arn :initarg :lambda-arn :initform
                         (common-lisp:error ":lambda-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-custom-email-lambda-version-config-type-lambda-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-email-lambda-version-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-email-lambda-version-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-email-lambda-version-config-type
                    'make-custom-email-lambda-version-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-email-lambda-version-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-email-lambda-version-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-version))
      (common-lisp:list
       (common-lisp:cons "LambdaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-email-lambda-version-config-type))
   common-lisp:nil))
(common-lisp:deftype custom-email-sender-lambda-version-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-smslambda-version-config-type common-lisp:nil
                       ((lambda-version :initarg :lambda-version :initform
                         (common-lisp:error ":lambda-version is required")
                         :type
                         (common-lisp:or custom-smssender-lambda-version-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-smslambda-version-config-type-lambda-version
                         :shape "CustomSMSSenderLambdaVersionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-arn :initarg :lambda-arn :initform
                         (common-lisp:error ":lambda-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-custom-smslambda-version-config-type-lambda-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-smslambda-version-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-smslambda-version-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-smslambda-version-config-type
                    'make-custom-smslambda-version-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-smslambda-version-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-smslambda-version-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-version))
      (common-lisp:list
       (common-lisp:cons "LambdaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-smslambda-version-config-type))
   common-lisp:nil))
(common-lisp:deftype custom-smssender-lambda-version-type ()
  'common-lisp:string)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:deftype default-email-option-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor struct-shape-delete-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-group-request-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-provider-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-identity-provider-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         (common-lisp:error ":provider-name is required") :type
                         (common-lisp:or provider-name-type common-lisp:null)
                         :accessor
                         struct-shape-delete-identity-provider-request-provider-name
                         :shape "ProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-provider-request
                    'make-delete-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-server-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-server-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or resource-server-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-server-request-identifier
                         :shape "ResourceServerIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-server-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-server-request
                    'make-delete-resource-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-attributes-request common-lisp:nil
                       ((user-attribute-names :initarg :user-attribute-names
                         :initform
                         (common-lisp:error
                          ":user-attribute-names is required")
                         :type
                         (common-lisp:or attribute-name-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-user-attributes-request-user-attribute-names
                         :shape "AttributeNameListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-attributes-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-attributes-request
                    'make-delete-user-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attribute-names))
      (common-lisp:list
       (common-lisp:cons "UserAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-attributes-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-attributes-response
                    'make-delete-user-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-pool-client-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-pool-client-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-pool-client-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-pool-client-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-pool-client-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-pool-client-request
                    'make-delete-user-pool-client-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-client-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-client-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-client-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-pool-domain-request common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-pool-domain-request-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-pool-domain-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-pool-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-pool-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-pool-domain-request
                    'make-delete-user-pool-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-pool-domain-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-pool-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-pool-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-pool-domain-response
                    'make-delete-user-pool-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-pool-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-pool-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-pool-request 'make-delete-user-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-delete-user-request-access-token :shape
                         "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:deftype deletion-protection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delivery-medium-list-type ()
   '(trivial-types:proper-list delivery-medium-type))
 (common-lisp:defun make-delivery-medium-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delivery-medium-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delivery-medium-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-identity-provider-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-provider-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         (common-lisp:error ":provider-name is required") :type
                         (common-lisp:or provider-name-type common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-provider-request-provider-name
                         :shape "ProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-request
                    'make-describe-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-provider-response-identity-provider
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-response
                    'make-describe-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-server-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-server-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or resource-server-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-server-request-identifier
                         :shape "ResourceServerIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-server-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-server-request
                    'make-describe-resource-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-server-response common-lisp:nil
                       ((resource-server :initarg :resource-server :initform
                         (common-lisp:error ":resource-server is required")
                         :type
                         (common-lisp:or resource-server-type common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-server-response-resource-server
                         :shape "ResourceServerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-server-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-server-response
                    'make-describe-resource-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-server))
      (common-lisp:list
       (common-lisp:cons "ResourceServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-risk-configuration-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-risk-configuration-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-risk-configuration-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-risk-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-risk-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-risk-configuration-request
                    'make-describe-risk-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-risk-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-risk-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-risk-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-risk-configuration-response common-lisp:nil
                       ((risk-configuration :initarg :risk-configuration
                         :initform
                         (common-lisp:error ":risk-configuration is required")
                         :type
                         (common-lisp:or risk-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-risk-configuration-response-risk-configuration
                         :shape "RiskConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-risk-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-risk-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-risk-configuration-response
                    'make-describe-risk-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-risk-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-risk-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-configuration))
      (common-lisp:list
       (common-lisp:cons "RiskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-risk-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-import-job-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-import-job-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or user-import-job-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-user-import-job-request-job-id
                         :shape "UserImportJobIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-import-job-request
                    'make-describe-user-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-import-job-response common-lisp:nil
                       ((user-import-job :initarg :user-import-job :initform
                         common-lisp:nil :type
                         (common-lisp:or user-import-job-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-import-job-response-user-import-job
                         :shape "UserImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-import-job-response
                    'make-describe-user-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-import-job))
      (common-lisp:list
       (common-lisp:cons "UserImportJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-pool-client-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-client-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-client-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-pool-client-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-pool-client-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-pool-client-request
                    'make-describe-user-pool-client-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-client-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-client-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-client-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-pool-client-response common-lisp:nil
                       ((user-pool-client :initarg :user-pool-client :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-client-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-client-response-user-pool-client
                         :shape "UserPoolClientType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-pool-client-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-pool-client-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-pool-client-response
                    'make-describe-user-pool-client-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-client-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-client-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-client))
      (common-lisp:list
       (common-lisp:cons "UserPoolClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-client-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-pool-domain-request common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-domain-request-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-pool-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-pool-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-pool-domain-request
                    'make-describe-user-pool-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-pool-domain-response common-lisp:nil
                       ((domain-description :initarg :domain-description
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-description-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-domain-response-domain-description
                         :shape "DomainDescriptionType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-pool-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-pool-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-pool-domain-response
                    'make-describe-user-pool-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-description))
      (common-lisp:list
       (common-lisp:cons "DomainDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-pool-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-pool-request
                    'make-describe-user-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-pool-response common-lisp:nil
                       ((user-pool :initarg :user-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-type common-lisp:null)
                         :accessor
                         struct-shape-describe-user-pool-response-user-pool
                         :shape "UserPoolType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-pool-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-pool-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-pool-response
                    'make-describe-user-pool-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool))
      (common-lisp:list
       (common-lisp:cons "UserPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-pool-response))
   common-lisp:nil))
(common-lisp:deftype description-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-configuration-type common-lisp:nil
                       ((challenge-required-on-new-device :initarg
                         :challenge-required-on-new-device :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-device-configuration-type-challenge-required-on-new-device
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-only-remembered-on-user-prompt :initarg
                         :device-only-remembered-on-user-prompt :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-device-configuration-type-device-only-remembered-on-user-prompt
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-configuration-type
                    'make-device-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'challenge-required-on-new-device))
      (common-lisp:list
       (common-lisp:cons "ChallengeRequiredOnNewDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-only-remembered-on-user-prompt))
      (common-lisp:list
       (common-lisp:cons "DeviceOnlyRememberedOnUserPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-configuration-type))
   common-lisp:nil))
(common-lisp:deftype device-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-list-type ()
   '(trivial-types:proper-list device-type))
 (common-lisp:defun make-device-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-name-type () 'common-lisp:string)
(common-lisp:deftype device-remembered-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-secret-verifier-config-type common-lisp:nil
                       ((password-verifier :initarg :password-verifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-device-secret-verifier-config-type-password-verifier
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (salt :initarg :salt :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-device-secret-verifier-config-type-salt
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-secret-verifier-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-secret-verifier-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-secret-verifier-config-type
                    'make-device-secret-verifier-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-secret-verifier-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-secret-verifier-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-verifier))
      (common-lisp:list
       (common-lisp:cons "PasswordVerifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salt))
      (common-lisp:list
       (common-lisp:cons "Salt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-secret-verifier-config-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-type common-lisp:nil
                       ((device-key :initarg :device-key :initform
                         common-lisp:nil :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor struct-shape-device-type-device-key :shape
                         "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-attributes :initarg :device-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor struct-shape-device-type-device-attributes
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-create-date :initarg :device-create-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-device-type-device-create-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-last-modified-date :initarg
                         :device-last-modified-date :initform common-lisp:nil
                         :type (common-lisp:or date-type common-lisp:null)
                         :accessor
                         struct-shape-device-type-device-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-last-authenticated-date :initarg
                         :device-last-authenticated-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-device-type-device-last-authenticated-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-type 'make-device-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-attributes))
      (common-lisp:list
       (common-lisp:cons "DeviceAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-create-date))
      (common-lisp:list
       (common-lisp:cons "DeviceCreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "DeviceLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-last-authenticated-date))
      (common-lisp:list
       (common-lisp:cons "DeviceLastAuthenticatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-description-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-domain-description-type-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (awsaccount-id :initarg :awsaccount-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id-type common-lisp:null)
                         :accessor
                         struct-shape-domain-description-type-awsaccount-id
                         :shape "AWSAccountIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or domain-type common-lisp:null)
                         :accessor struct-shape-domain-description-type-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket-type common-lisp:null)
                         :accessor
                         struct-shape-domain-description-type-s3bucket :shape
                         "S3BucketType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-front-distribution :initarg
                         :cloud-front-distribution :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-domain-description-type-cloud-front-distribution
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-version-type common-lisp:null)
                         :accessor struct-shape-domain-description-type-version
                         :shape "DomainVersionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-status-type common-lisp:null)
                         :accessor struct-shape-domain-description-type-status
                         :shape "DomainStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-config :initarg :custom-domain-config
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-domain-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-description-type-custom-domain-config
                         :shape "CustomDomainConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-description-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-description-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-description-type 'make-domain-description-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-description-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-description-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsaccount-id))
      (common-lisp:list
       (common-lisp:cons "AWSAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-distribution))
      (common-lisp:list
       (common-lisp:cons "CloudFrontDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-config))
      (common-lisp:list
       (common-lisp:cons "CustomDomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-description-type))
   common-lisp:nil))
(common-lisp:deftype domain-status-type () 'common-lisp:string)
(common-lisp:deftype domain-type () 'common-lisp:string)
(common-lisp:deftype domain-version-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition duplicate-provider-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-provider-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-provider-exception
                    'duplicate-provider-exception-message)))
(common-lisp:deftype email-address-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass email-configuration-type common-lisp:nil
                       ((source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-email-configuration-type-source-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reply-to-email-address :initarg
                         :reply-to-email-address :initform common-lisp:nil
                         :type
                         (common-lisp:or email-address-type common-lisp:null)
                         :accessor
                         struct-shape-email-configuration-type-reply-to-email-address
                         :shape "EmailAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-sending-account :initarg :email-sending-account
                         :initform common-lisp:nil :type
                         (common-lisp:or email-sending-account-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-email-configuration-type-email-sending-account
                         :shape "EmailSendingAccountType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-email-configuration-type-from
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-set :initarg :configuration-set
                         :initform common-lisp:nil :type
                         (common-lisp:or sesconfiguration-set common-lisp:null)
                         :accessor
                         struct-shape-email-configuration-type-configuration-set
                         :shape "SESConfigurationSet" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-email-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'email-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'email-configuration-type 'make-email-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          email-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          email-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reply-to-email-address))
      (common-lisp:list
       (common-lisp:cons "ReplyToEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-sending-account))
      (common-lisp:list
       (common-lisp:cons "EmailSendingAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-set))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          email-configuration-type))
   common-lisp:nil))
(common-lisp:deftype email-notification-body-type () 'common-lisp:string)
(common-lisp:deftype email-notification-subject-type () 'common-lisp:string)
(common-lisp:deftype email-sending-account-type () 'common-lisp:string)
(common-lisp:deftype email-verification-message-by-link-type ()
  'common-lisp:string)
(common-lisp:deftype email-verification-message-type () 'common-lisp:string)
(common-lisp:deftype email-verification-subject-by-link-type ()
  'common-lisp:string)
(common-lisp:deftype email-verification-subject-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition enable-software-token-mfaexception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       enable-software-token-mfaexception-message)))
 (common-lisp:export
  (common-lisp:list 'enable-software-token-mfaexception
                    'enable-software-token-mfaexception-message)))
(common-lisp:progn
 (common-lisp:defclass event-context-data-type common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-event-context-data-type-ip-address :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-event-context-data-type-device-name
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-event-context-data-type-timezone :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-event-context-data-type-city
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-event-context-data-type-country
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-context-data-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-context-data-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-context-data-type 'make-event-context-data-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-context-data-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-context-data-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-context-data-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-feedback-type common-lisp:nil
                       ((feedback-value :initarg :feedback-value :initform
                         (common-lisp:error ":feedback-value is required")
                         :type
                         (common-lisp:or feedback-value-type common-lisp:null)
                         :accessor
                         struct-shape-event-feedback-type-feedback-value :shape
                         "FeedbackValueType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-event-feedback-type-provider
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback-date :initarg :feedback-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-event-feedback-type-feedback-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-feedback-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-feedback-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-feedback-type 'make-event-feedback-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-feedback-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-feedback-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-value))
      (common-lisp:list
       (common-lisp:cons "FeedbackValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-date))
      (common-lisp:list
       (common-lisp:cons "FeedbackDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-feedback-type))
   common-lisp:nil))
(common-lisp:deftype event-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-filters-type ()
   '(trivial-types:proper-list event-filter-type))
 (common-lisp:defun make-event-filters-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-filter-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-id-type () 'common-lisp:string)
(common-lisp:deftype event-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-risk-type common-lisp:nil
                       ((risk-decision :initarg :risk-decision :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-decision-type common-lisp:null)
                         :accessor struct-shape-event-risk-type-risk-decision
                         :shape "RiskDecisionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (risk-level :initarg :risk-level :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-level-type common-lisp:null)
                         :accessor struct-shape-event-risk-type-risk-level
                         :shape "RiskLevelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compromised-credentials-detected :initarg
                         :compromised-credentials-detected :initform
                         common-lisp:nil :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-event-risk-type-compromised-credentials-detected
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-risk-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-risk-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event-risk-type 'make-event-risk-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-risk-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-risk-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-decision))
      (common-lisp:list
       (common-lisp:cons "RiskDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-level))
      (common-lisp:list
       (common-lisp:cons "RiskLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compromised-credentials-detected))
      (common-lisp:list
       (common-lisp:cons "CompromisedCredentialsDetected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-risk-type))
   common-lisp:nil))
(common-lisp:deftype event-source-name () 'common-lisp:string)
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-code-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-code-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-code-exception 'expired-code-exception-message)))
(common-lisp:progn
 (common-lisp:deftype explicit-auth-flows-list-type ()
   '(trivial-types:proper-list explicit-auth-flows-type))
 (common-lisp:defun make-explicit-auth-flows-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            explicit-auth-flows-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype explicit-auth-flows-type () 'common-lisp:string)
(common-lisp:deftype feedback-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:deftype force-alias-creation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass forget-device-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-forget-device-request-access-token :shape
                         "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-forget-device-request-device-key :shape
                         "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forget-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forget-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forget-device-request 'make-forget-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forget-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forget-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forget-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass forgot-password-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-request-client-id :shape
                         "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-hash :initarg :secret-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-hash-type common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-request-secret-hash
                         :shape "SecretHashType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-request-user-context-data
                         :shape "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forgot-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forgot-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forgot-password-request 'make-forgot-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forgot-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forgot-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-hash))
      (common-lisp:list
       (common-lisp:cons "SecretHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forgot-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass forgot-password-response common-lisp:nil
                       ((code-delivery-details :initarg :code-delivery-details
                         :initform common-lisp:nil :type
                         (common-lisp:or code-delivery-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-forgot-password-response-code-delivery-details
                         :shape "CodeDeliveryDetailsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forgot-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forgot-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forgot-password-response 'make-forgot-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forgot-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forgot-password-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-delivery-details))
      (common-lisp:list
       (common-lisp:cons "CodeDeliveryDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forgot-password-response))
   common-lisp:nil))
(common-lisp:deftype generate-secret () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass get-csvheader-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-csvheader-request-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-csvheader-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-csvheader-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-csvheader-request 'make-get-csvheader-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-csvheader-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-csvheader-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-csvheader-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-csvheader-response common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-csvheader-response-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (csvheader :initarg :csvheader :initform
                         common-lisp:nil :type
                         (common-lisp:or list-of-string-types common-lisp:null)
                         :accessor
                         struct-shape-get-csvheader-response-csvheader :shape
                         "ListOfStringTypes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-csvheader-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-csvheader-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-csvheader-response 'make-get-csvheader-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-csvheader-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-csvheader-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csvheader))
      (common-lisp:list
       (common-lisp:cons "CSVHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-csvheader-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-request common-lisp:nil
                       ((device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor struct-shape-get-device-request-device-key
                         :shape "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-token :initarg :access-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor struct-shape-get-device-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-request 'make-get-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-response common-lisp:nil
                       ((device :initarg :device :initform
                         (common-lisp:error ":device is required") :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor struct-shape-get-device-response-device
                         :shape "DeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-response 'make-get-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor struct-shape-get-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor struct-shape-get-group-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-response common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-get-group-response-group :shape
                         "GroupType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-response 'make-get-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-provider-by-identifier-request
                       common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-identity-provider-by-identifier-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idp-identifier :initarg :idp-identifier :initform
                         (common-lisp:error ":idp-identifier is required")
                         :type
                         (common-lisp:or idp-identifier-type common-lisp:null)
                         :accessor
                         struct-shape-get-identity-provider-by-identifier-request-idp-identifier
                         :shape "IdpIdentifierType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-provider-by-identifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-provider-by-identifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-provider-by-identifier-request
                    'make-get-identity-provider-by-identifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-by-identifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-by-identifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-identifier))
      (common-lisp:list
       (common-lisp:cons "IdpIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-by-identifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-provider-by-identifier-response
                       common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-identity-provider-by-identifier-response-identity-provider
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-provider-by-identifier-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-provider-by-identifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-provider-by-identifier-response
                    'make-get-identity-provider-by-identifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-by-identifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-by-identifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-by-identifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-delivery-configuration-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-log-delivery-configuration-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-delivery-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-delivery-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-delivery-configuration-request
                    'make-get-log-delivery-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-delivery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-delivery-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-delivery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-delivery-configuration-response common-lisp:nil
                       ((log-delivery-configuration :initarg
                         :log-delivery-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or log-delivery-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-log-delivery-configuration-response-log-delivery-configuration
                         :shape "LogDeliveryConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-log-delivery-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-delivery-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-log-delivery-configuration-response
                    'make-get-log-delivery-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-delivery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-delivery-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configuration))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-delivery-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-signing-certificate-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-signing-certificate-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-signing-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-signing-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-signing-certificate-request
                    'make-get-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-signing-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-get-signing-certificate-response-certificate
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-signing-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-signing-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-signing-certificate-response
                    'make-get-signing-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-signing-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-signing-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-signing-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-uicustomization-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-uicustomization-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-uicustomization-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-uicustomization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-uicustomization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-uicustomization-request
                    'make-get-uicustomization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-uicustomization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-uicustomization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-uicustomization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-uicustomization-response common-lisp:nil
                       ((uicustomization :initarg :uicustomization :initform
                         (common-lisp:error ":uicustomization is required")
                         :type
                         (common-lisp:or uicustomization-type common-lisp:null)
                         :accessor
                         struct-shape-get-uicustomization-response-uicustomization
                         :shape "UICustomizationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-uicustomization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-uicustomization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-uicustomization-response
                    'make-get-uicustomization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-uicustomization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-uicustomization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uicustomization))
      (common-lisp:list
       (common-lisp:cons "UICustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-uicustomization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-attribute-verification-code-request
                       common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-attribute-verification-code-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type
                         (common-lisp:or attribute-name-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-attribute-verification-code-request-attribute-name
                         :shape "AttributeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-attribute-verification-code-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-attribute-verification-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-attribute-verification-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-attribute-verification-code-request
                    'make-get-user-attribute-verification-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-attribute-verification-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-attribute-verification-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-attribute-verification-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-attribute-verification-code-response
                       common-lisp:nil
                       ((code-delivery-details :initarg :code-delivery-details
                         :initform common-lisp:nil :type
                         (common-lisp:or code-delivery-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-attribute-verification-code-response-code-delivery-details
                         :shape "CodeDeliveryDetailsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-attribute-verification-code-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-attribute-verification-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-attribute-verification-code-response
                    'make-get-user-attribute-verification-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-attribute-verification-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-attribute-verification-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-delivery-details))
      (common-lisp:list
       (common-lisp:cons "CodeDeliveryDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-attribute-verification-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-pool-mfa-config-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-pool-mfa-config-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-pool-mfa-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-pool-mfa-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-pool-mfa-config-request
                    'make-get-user-pool-mfa-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-pool-mfa-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-pool-mfa-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-pool-mfa-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-pool-mfa-config-response common-lisp:nil
                       ((sms-mfa-configuration :initarg :sms-mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-mfa-config-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-pool-mfa-config-response-sms-mfa-configuration
                         :shape "SmsMfaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-token-mfa-configuration :initarg
                         :software-token-mfa-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or software-token-mfa-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-pool-mfa-config-response-software-token-mfa-configuration
                         :shape "SoftwareTokenMfaConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfa-configuration :initarg :mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-mfa-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-pool-mfa-config-response-mfa-configuration
                         :shape "UserPoolMfaType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-pool-mfa-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-pool-mfa-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-pool-mfa-config-response
                    'make-get-user-pool-mfa-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-pool-mfa-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-pool-mfa-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsMfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-token-mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "SoftwareTokenMfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "MfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-pool-mfa-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor struct-shape-get-user-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-response common-lisp:nil
                       ((username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor struct-shape-get-user-response-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attributes :initarg :user-attributes :initform
                         (common-lisp:error ":user-attributes is required")
                         :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-user-attributes :shape
                         "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mfaoptions :initarg :mfaoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or mfaoption-list-type common-lisp:null)
                         :accessor struct-shape-get-user-response-mfaoptions
                         :shape "MFAOptionListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-mfa-setting :initarg :preferred-mfa-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-preferred-mfa-setting
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-mfasetting-list :initarg :user-mfasetting-list
                         :initform common-lisp:nil :type
                         (common-lisp:or user-mfasetting-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-user-mfasetting-list
                         :shape "UserMFASettingListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfaoptions))
      (common-lisp:list
       (common-lisp:cons "MFAOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-mfa-setting))
      (common-lisp:list
       (common-lisp:cons "PreferredMfaSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-mfasetting-list))
      (common-lisp:list
       (common-lisp:cons "UserMFASettingList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass global-sign-out-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-global-sign-out-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-sign-out-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-sign-out-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-sign-out-request 'make-global-sign-out-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-sign-out-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-sign-out-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-sign-out-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass global-sign-out-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-sign-out-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-sign-out-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-sign-out-response 'make-global-sign-out-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-sign-out-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-sign-out-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-sign-out-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition group-exists-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       group-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'group-exists-exception 'group-exists-exception-message)))
(common-lisp:progn
 (common-lisp:deftype group-list-type ()
   '(trivial-types:proper-list group-type))
 (common-lisp:defun make-group-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass group-type common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor struct-shape-group-type-group-name :shape
                         "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor struct-shape-group-type-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor struct-shape-group-type-description :shape
                         "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor struct-shape-group-type-role-arn :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (precedence :initarg :precedence :initform
                         common-lisp:nil :type
                         (common-lisp:or precedence-type common-lisp:null)
                         :accessor struct-shape-group-type-precedence :shape
                         "PrecedenceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-group-type-last-modified-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-group-type-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-type 'make-group-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precedence))
      (common-lisp:list
       (common-lisp:cons "Precedence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-type))
   common-lisp:nil))
(common-lisp:deftype hex-string-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-header common-lisp:nil
                       ((header-name :initarg :header-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-http-header-header-name :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (header-value :initarg :header-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-http-header-header-value :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-header
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-header
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http-header 'make-http-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-name))
      (common-lisp:list
       (common-lisp:cons "headerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-value))
      (common-lisp:list
       (common-lisp:cons "headerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-header-list ()
   '(trivial-types:proper-list http-header))
 (common-lisp:defun make-http-header-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype id-token-validity-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass identity-provider-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-type-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name-type common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-type-provider-name
                         :shape "ProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-provider-type-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-type-provider-type
                         :shape "IdentityProviderTypeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider-details :initarg :provider-details :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-type-provider-details
                         :shape "ProviderDetailsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-mapping :initarg :attribute-mapping
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-mapping-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-type-attribute-mapping
                         :shape "AttributeMappingType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idp-identifiers :initarg :idp-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or idp-identifiers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-provider-type-idp-identifiers
                         :shape "IdpIdentifiersListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-identity-provider-type-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-identity-provider-type-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-provider-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-provider-type 'make-identity-provider-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-details))
      (common-lisp:list
       (common-lisp:cons "ProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-mapping))
      (common-lisp:list
       (common-lisp:cons "AttributeMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-identifiers))
      (common-lisp:list
       (common-lisp:cons "IdpIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-type))
   common-lisp:nil))
(common-lisp:deftype identity-provider-type-type () 'common-lisp:string)
(common-lisp:deftype idp-identifier-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype idp-identifiers-list-type ()
   '(trivial-types:proper-list idp-identifier-type))
 (common-lisp:defun make-idp-identifiers-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list idp-identifier-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-file-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype image-url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass initiate-auth-request common-lisp:nil
                       ((auth-flow :initarg :auth-flow :initform
                         (common-lisp:error ":auth-flow is required") :type
                         (common-lisp:or auth-flow-type common-lisp:null)
                         :accessor struct-shape-initiate-auth-request-auth-flow
                         :shape "AuthFlowType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-parameters :initarg :auth-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-parameters-type common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-request-auth-parameters
                         :shape "AuthParametersType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor struct-shape-initiate-auth-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-request-user-context-data
                         :shape "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiate-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initiate-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initiate-auth-request 'make-initiate-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-flow))
      (common-lisp:list
       (common-lisp:cons "AuthFlow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-parameters))
      (common-lisp:list
       (common-lisp:cons "AuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initiate-auth-response common-lisp:nil
                       ((challenge-name :initarg :challenge-name :initform
                         common-lisp:nil :type
                         (common-lisp:or challenge-name-type common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-response-challenge-name
                         :shape "ChallengeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor struct-shape-initiate-auth-response-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-parameters :initarg :challenge-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-parameters-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-response-challenge-parameters
                         :shape "ChallengeParametersType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-result :initarg :authentication-result
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-result-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-initiate-auth-response-authentication-result
                         :shape "AuthenticationResultType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiate-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initiate-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initiate-auth-response 'make-initiate-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'challenge-parameters))
      (common-lisp:list
       (common-lisp:cons "ChallengeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-result))
      (common-lisp:list
       (common-lisp:cons "AuthenticationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-auth-response))
   common-lisp:nil))
(common-lisp:deftype integer-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-error-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error-exception
                    'internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-email-role-access-policy-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-email-role-access-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-email-role-access-policy-exception
                    'invalid-email-role-access-policy-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lambda-response-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-lambda-response-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-lambda-response-exception
                    'invalid-lambda-response-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-oauth-flow-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-oauth-flow-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-oauth-flow-exception
                    'invalid-oauth-flow-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-password-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-password-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-password-exception
                    'invalid-password-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sms-role-access-policy-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-sms-role-access-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-sms-role-access-policy-exception
                    'invalid-sms-role-access-policy-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sms-role-trust-relationship-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-sms-role-trust-relationship-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-sms-role-trust-relationship-exception
                    'invalid-sms-role-trust-relationship-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-pool-configuration-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-user-pool-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-user-pool-configuration-exception
                    'invalid-user-pool-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lambda-config-type common-lisp:nil
                       ((pre-sign-up :initarg :pre-sign-up :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-pre-sign-up :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-message :initarg :custom-message :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-custom-message :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (post-confirmation :initarg :post-confirmation
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-post-confirmation
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-authentication :initarg :pre-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-pre-authentication
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-authentication :initarg :post-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-post-authentication
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (define-auth-challenge :initarg :define-auth-challenge
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-define-auth-challenge
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-auth-challenge :initarg :create-auth-challenge
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-create-auth-challenge
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verify-auth-challenge-response :initarg
                         :verify-auth-challenge-response :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-verify-auth-challenge-response
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-token-generation :initarg :pre-token-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-pre-token-generation
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-migration :initarg :user-migration :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-user-migration :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pre-token-generation-config :initarg
                         :pre-token-generation-config :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          pre-token-generation-version-config-type
                          common-lisp:null)
                         :accessor
                         struct-shape-lambda-config-type-pre-token-generation-config
                         :shape "PreTokenGenerationVersionConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-smssender :initarg :custom-smssender :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-smslambda-version-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-config-type-custom-smssender
                         :shape "CustomSMSLambdaVersionConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-email-sender :initarg :custom-email-sender
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          custom-email-lambda-version-config-type
                          common-lisp:null)
                         :accessor
                         struct-shape-lambda-config-type-custom-email-sender
                         :shape "CustomEmailLambdaVersionConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-lambda-config-type-kmskey-id :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-config-type 'make-lambda-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-sign-up))
      (common-lisp:list
       (common-lisp:cons "PreSignUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-message))
      (common-lisp:list
       (common-lisp:cons "CustomMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-confirmation))
      (common-lisp:list
       (common-lisp:cons "PostConfirmation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-authentication))
      (common-lisp:list
       (common-lisp:cons "PreAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-authentication))
      (common-lisp:list
       (common-lisp:cons "PostAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'define-auth-challenge))
      (common-lisp:list
       (common-lisp:cons "DefineAuthChallenge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-auth-challenge))
      (common-lisp:list
       (common-lisp:cons "CreateAuthChallenge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verify-auth-challenge-response))
      (common-lisp:list
       (common-lisp:cons "VerifyAuthChallengeResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-token-generation))
      (common-lisp:list
       (common-lisp:cons "PreTokenGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-migration))
      (common-lisp:list
       (common-lisp:cons "UserMigration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-token-generation-config))
      (common-lisp:list
       (common-lisp:cons "PreTokenGenerationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-smssender))
      (common-lisp:list
       (common-lisp:cons "CustomSMSSender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-email-sender))
      (common-lisp:list
       (common-lisp:cons "CustomEmailSender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-config-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-devices-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-list-devices-request-access-token :shape
                         "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor struct-shape-list-devices-request-limit
                         :shape "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or search-pagination-token-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-devices-request-pagination-token
                         :shape "SearchPaginationTokenType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-devices-request 'make-list-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-response common-lisp:nil
                       ((devices :initarg :devices :initform common-lisp:nil
                         :type
                         (common-lisp:or device-list-type common-lisp:null)
                         :accessor struct-shape-list-devices-response-devices
                         :shape "DeviceListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or search-pagination-token-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-devices-response-pagination-token
                         :shape "SearchPaginationTokenType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-devices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-devices-response 'make-list-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-groups-request-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor struct-shape-list-groups-request-limit
                         :shape "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor struct-shape-list-groups-request-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-response common-lisp:nil
                       ((groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or group-list-type common-lisp:null)
                         :accessor struct-shape-list-groups-response-groups
                         :shape "GroupListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor struct-shape-list-groups-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-providers-limit-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-request-max-results
                         :shape "ListProvidersLimitType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-request-next-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-request
                    'make-list-identity-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-response common-lisp:nil
                       ((providers :initarg :providers :initform
                         (common-lisp:error ":providers is required") :type
                         (common-lisp:or providers-list-type common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-response-providers
                         :shape "ProvidersListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-identity-providers-response-next-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-response
                    'make-list-identity-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'providers))
      (common-lisp:list
       (common-lisp:cons "Providers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-string-types ()
   '(trivial-types:proper-list string-type))
 (common-lisp:defun make-list-of-string-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-providers-limit-type () 'common-lisp:integer)
(common-lisp:deftype list-resource-servers-limit-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-resource-servers-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-servers-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-resource-servers-limit-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resource-servers-request-max-results
                         :shape "ListResourceServersLimitType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-servers-request-next-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-servers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-servers-request
                    'make-list-resource-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-servers-response common-lisp:nil
                       ((resource-servers :initarg :resource-servers :initform
                         (common-lisp:error ":resource-servers is required")
                         :type
                         (common-lisp:or resource-servers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resource-servers-response-resource-servers
                         :shape "ResourceServersListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-servers-response-next-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-servers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-servers-response
                    'make-list-resource-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-servers))
      (common-lisp:list
       (common-lisp:cons "ResourceServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or user-pool-tags-type common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "UserPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-import-jobs-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-import-jobs-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":max-results is required") :type
                         (common-lisp:or pool-query-limit-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-import-jobs-request-max-results
                         :shape "PoolQueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-import-jobs-request-pagination-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-import-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-import-jobs-request
                    'make-list-user-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-import-jobs-response common-lisp:nil
                       ((user-import-jobs :initarg :user-import-jobs :initform
                         common-lisp:nil :type
                         (common-lisp:or user-import-jobs-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-import-jobs-response-user-import-jobs
                         :shape "UserImportJobsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-import-jobs-response-pagination-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-import-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-import-jobs-response
                    'make-list-user-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-import-jobs))
      (common-lisp:list
       (common-lisp:cons "UserImportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-pool-clients-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-pool-clients-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or query-limit common-lisp:null)
                         :accessor
                         struct-shape-list-user-pool-clients-request-max-results
                         :shape "QueryLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-user-pool-clients-request-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-pool-clients-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-pool-clients-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-pool-clients-request
                    'make-list-user-pool-clients-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pool-clients-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pool-clients-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pool-clients-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-pool-clients-response common-lisp:nil
                       ((user-pool-clients :initarg :user-pool-clients
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-client-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-pool-clients-response-user-pool-clients
                         :shape "UserPoolClientListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-user-pool-clients-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-pool-clients-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-pool-clients-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-pool-clients-response
                    'make-list-user-pool-clients-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pool-clients-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pool-clients-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-clients))
      (common-lisp:list
       (common-lisp:cons "UserPoolClients"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pool-clients-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-pools-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-pools-request-next-token :shape
                         "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":max-results is required") :type
                         (common-lisp:or pool-query-limit-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-pools-request-max-results
                         :shape "PoolQueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-pools-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-pools-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-pools-request 'make-list-user-pools-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pools-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pools-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pools-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-pools-response common-lisp:nil
                       ((user-pools :initarg :user-pools :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-list-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-pools-response-user-pools
                         :shape "UserPoolListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key-type common-lisp:null)
                         :accessor
                         struct-shape-list-user-pools-response-next-token
                         :shape "PaginationKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-pools-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-pools-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-pools-response 'make-list-user-pools-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pools-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pools-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pools))
      (common-lisp:list
       (common-lisp:cons "UserPools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-pools-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-in-group-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-users-in-group-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor
                         struct-shape-list-users-in-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor
                         struct-shape-list-users-in-group-request-limit :shape
                         "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-users-in-group-request-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-in-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-in-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-in-group-request
                    'make-list-users-in-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-users-in-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-users-in-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-users-in-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-in-group-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or users-list-type common-lisp:null)
                         :accessor
                         struct-shape-list-users-in-group-response-users :shape
                         "UsersListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-users-in-group-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-in-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-in-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-in-group-response
                    'make-list-users-in-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-users-in-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-users-in-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-users-in-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor struct-shape-list-users-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes-to-get :initarg :attributes-to-get
                         :initform common-lisp:nil :type
                         (common-lisp:or searched-attribute-names-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-users-request-attributes-to-get
                         :shape "SearchedAttributeNamesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or query-limit-type common-lisp:null)
                         :accessor struct-shape-list-users-request-limit :shape
                         "QueryLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or search-pagination-token-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-users-request-pagination-token
                         :shape "SearchPaginationTokenType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or user-filter-type common-lisp:null)
                         :accessor struct-shape-list-users-request-filter
                         :shape "UserFilterType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes-to-get))
      (common-lisp:list
       (common-lisp:cons "AttributesToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or users-list-type common-lisp:null)
                         :accessor struct-shape-list-users-response-users
                         :shape "UsersListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or search-pagination-token-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-users-response-pagination-token
                         :shape "SearchPaginationTokenType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-configuration-list-type ()
   '(trivial-types:proper-list log-configuration-type))
 (common-lisp:defun make-log-configuration-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-configuration-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-configuration-type common-lisp:nil
                       ((log-level :initarg :log-level :initform
                         (common-lisp:error ":log-level is required") :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-log-configuration-type-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-source :initarg :event-source :initform
                         (common-lisp:error ":event-source is required") :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor
                         struct-shape-log-configuration-type-event-source
                         :shape "EventSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :cloud-watch-logs-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-configuration-type-cloud-watch-logs-configuration
                         :shape "CloudWatchLogsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-configuration-type 'make-log-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-delivery-configuration-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-type-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-configurations :initarg :log-configurations
                         :initform
                         (common-lisp:error ":log-configurations is required")
                         :type
                         (common-lisp:or log-configuration-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-delivery-configuration-type-log-configurations
                         :shape "LogConfigurationListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-delivery-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'log-delivery-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-delivery-configuration-type
                    'make-log-delivery-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configurations))
      (common-lisp:list
       (common-lisp:cons "LogConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-delivery-configuration-type))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype logout-urls-list-type ()
   '(trivial-types:proper-list redirect-url-type))
 (common-lisp:defun make-logout-urls-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list redirect-url-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition mfamethod-not-found-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mfamethod-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mfamethod-not-found-exception
                    'mfamethod-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype mfaoption-list-type ()
   '(trivial-types:proper-list mfaoption-type))
 (common-lisp:defun make-mfaoption-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mfaoption-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mfaoption-type common-lisp:nil
                       ((delivery-medium :initarg :delivery-medium :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-medium-type common-lisp:null)
                         :accessor struct-shape-mfaoption-type-delivery-medium
                         :shape "DeliveryMediumType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-name-type common-lisp:null)
                         :accessor struct-shape-mfaoption-type-attribute-name
                         :shape "AttributeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mfaoption-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mfaoption-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mfaoption-type 'make-mfaoption-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mfaoption-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mfaoption-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-medium))
      (common-lisp:list
       (common-lisp:cons "DeliveryMedium"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mfaoption-type))
   common-lisp:nil))
(common-lisp:deftype message-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-template-type common-lisp:nil
                       ((smsmessage :initarg :smsmessage :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-message-template-type-smsmessage :shape
                         "SmsVerificationMessageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-message :initarg :email-message :initform
                         common-lisp:nil :type
                         (common-lisp:or email-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-message-template-type-email-message
                         :shape "EmailVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-subject :initarg :email-subject :initform
                         common-lisp:nil :type
                         (common-lisp:or email-verification-subject-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-message-template-type-email-subject
                         :shape "EmailVerificationSubjectType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-template-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-template-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'message-template-type 'make-message-template-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-template-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-template-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smsmessage))
      (common-lisp:list
       (common-lisp:cons "SMSMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-subject))
      (common-lisp:list
       (common-lisp:cons "EmailSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-template-type))
   common-lisp:nil))
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass new-device-metadata-type common-lisp:nil
                       ((device-key :initarg :device-key :initform
                         common-lisp:nil :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-new-device-metadata-type-device-key
                         :shape "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-group-key :initarg :device-group-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-new-device-metadata-type-device-group-key
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-device-metadata-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-device-metadata-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-device-metadata-type 'make-new-device-metadata-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-device-metadata-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-device-metadata-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-group-key))
      (common-lisp:list
       (common-lisp:cons "DeviceGroupKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-device-metadata-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-authorized-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-authorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception
                    'not-authorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass notify-configuration-type common-lisp:nil
                       ((from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-notify-configuration-type-from
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reply-to :initarg :reply-to :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-notify-configuration-type-reply-to :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         (common-lisp:error ":source-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-notify-configuration-type-source-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-email :initarg :block-email :initform
                         common-lisp:nil :type
                         (common-lisp:or notify-email-type common-lisp:null)
                         :accessor
                         struct-shape-notify-configuration-type-block-email
                         :shape "NotifyEmailType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-action-email :initarg :no-action-email :initform
                         common-lisp:nil :type
                         (common-lisp:or notify-email-type common-lisp:null)
                         :accessor
                         struct-shape-notify-configuration-type-no-action-email
                         :shape "NotifyEmailType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mfa-email :initarg :mfa-email :initform
                         common-lisp:nil :type
                         (common-lisp:or notify-email-type common-lisp:null)
                         :accessor
                         struct-shape-notify-configuration-type-mfa-email
                         :shape "NotifyEmailType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notify-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-configuration-type
                    'make-notify-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reply-to))
      (common-lisp:list
       (common-lisp:cons "ReplyTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-email))
      (common-lisp:list
       (common-lisp:cons "BlockEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-action-email))
      (common-lisp:list
       (common-lisp:cons "NoActionEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-email))
      (common-lisp:list
       (common-lisp:cons "MfaEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notify-email-type common-lisp:nil
                       ((subject :initarg :subject :initform
                         (common-lisp:error ":subject is required") :type
                         (common-lisp:or email-notification-subject-type
                                         common-lisp:null)
                         :accessor struct-shape-notify-email-type-subject
                         :shape "EmailNotificationSubjectType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (html-body :initarg :html-body :initform
                         common-lisp:nil :type
                         (common-lisp:or email-notification-body-type
                                         common-lisp:null)
                         :accessor struct-shape-notify-email-type-html-body
                         :shape "EmailNotificationBodyType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (text-body :initarg :text-body :initform
                         common-lisp:nil :type
                         (common-lisp:or email-notification-body-type
                                         common-lisp:null)
                         :accessor struct-shape-notify-email-type-text-body
                         :shape "EmailNotificationBodyType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-email-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notify-email-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-email-type 'make-notify-email-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notify-email-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notify-email-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html-body))
      (common-lisp:list
       (common-lisp:cons "HtmlBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-body))
      (common-lisp:list
       (common-lisp:cons "TextBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notify-email-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass number-attribute-constraints-type common-lisp:nil
                       ((min-value :initarg :min-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-number-attribute-constraints-type-min-value
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-value :initarg :max-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-number-attribute-constraints-type-max-value
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-number-attribute-constraints-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'number-attribute-constraints-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'number-attribute-constraints-type
                    'make-number-attribute-constraints-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-constraints-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-constraints-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-attribute-constraints-type))
   common-lisp:nil))
(common-lisp:deftype oauth-flow-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype oauth-flows-type ()
   '(trivial-types:proper-list oauth-flow-type))
 (common-lisp:defun make-oauth-flows-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list oauth-flow-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-key () 'common-lisp:string)
(common-lisp:deftype pagination-key-type () 'common-lisp:string)
(common-lisp:deftype password-policy-min-length-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass password-policy-type common-lisp:nil
                       ((minimum-length :initarg :minimum-length :initform
                         common-lisp:nil :type
                         (common-lisp:or password-policy-min-length-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-password-policy-type-minimum-length
                         :shape "PasswordPolicyMinLengthType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (require-uppercase :initarg :require-uppercase
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-password-policy-type-require-uppercase
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-lowercase :initarg :require-lowercase
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-password-policy-type-require-lowercase
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-numbers :initarg :require-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-password-policy-type-require-numbers
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-symbols :initarg :require-symbols :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-password-policy-type-require-symbols
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temporary-password-validity-days :initarg
                         :temporary-password-validity-days :initform
                         common-lisp:nil :type
                         (common-lisp:or temporary-password-validity-days-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-password-policy-type-temporary-password-validity-days
                         :shape "TemporaryPasswordValidityDaysType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-password-policy-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'password-policy-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'password-policy-type 'make-password-policy-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input password-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input password-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-length))
      (common-lisp:list
       (common-lisp:cons "MinimumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-uppercase))
      (common-lisp:list
       (common-lisp:cons "RequireUppercase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-lowercase))
      (common-lisp:list
       (common-lisp:cons "RequireLowercase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-numbers))
      (common-lisp:list
       (common-lisp:cons "RequireNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-symbols))
      (common-lisp:list
       (common-lisp:cons "RequireSymbols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporary-password-validity-days))
      (common-lisp:list
       (common-lisp:cons "TemporaryPasswordValidityDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input password-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition password-reset-required-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       password-reset-required-exception-message)))
 (common-lisp:export
  (common-lisp:list 'password-reset-required-exception
                    'password-reset-required-exception-message)))
(common-lisp:deftype password-type () 'common-lisp:string)
(common-lisp:deftype pool-query-limit-type () 'common-lisp:integer)
(common-lisp:deftype pre-signed-url-type () 'common-lisp:string)
(common-lisp:deftype pre-token-generation-lambda-version-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pre-token-generation-version-config-type common-lisp:nil
                       ((lambda-version :initarg :lambda-version :initform
                         (common-lisp:error ":lambda-version is required")
                         :type
                         (common-lisp:or
                          pre-token-generation-lambda-version-type
                          common-lisp:null)
                         :accessor
                         struct-shape-pre-token-generation-version-config-type-lambda-version
                         :shape "PreTokenGenerationLambdaVersionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-arn :initarg :lambda-arn :initform
                         (common-lisp:error ":lambda-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-pre-token-generation-version-config-type-lambda-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pre-token-generation-version-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pre-token-generation-version-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pre-token-generation-version-config-type
                    'make-pre-token-generation-version-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pre-token-generation-version-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pre-token-generation-version-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-version))
      (common-lisp:list
       (common-lisp:cons "LambdaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pre-token-generation-version-config-type))
   common-lisp:nil))
(common-lisp:deftype precedence-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition precondition-not-met-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-not-met-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-not-met-exception
                    'precondition-not-met-exception-message)))
(common-lisp:deftype prevent-user-existence-error-types () 'common-lisp:string)
(common-lisp:deftype priority-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass provider-description common-lisp:nil
                       ((provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name-type common-lisp:null)
                         :accessor
                         struct-shape-provider-description-provider-name :shape
                         "ProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-type :initarg :provider-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-provider-type-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-provider-description-provider-type :shape
                         "IdentityProviderTypeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-provider-description-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-provider-description-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provider-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provider-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provider-description 'make-provider-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provider-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provider-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provider-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provider-details-type () 'common-lisp:hash-table)
 (common-lisp:defun make-provider-details-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype provider-name-type () 'common-lisp:string)
(common-lisp:deftype provider-name-type-v2 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass provider-user-identifier-type common-lisp:nil
                       ((provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-name-type common-lisp:null)
                         :accessor
                         struct-shape-provider-user-identifier-type-provider-name
                         :shape "ProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-attribute-name :initarg
                         :provider-attribute-name :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-provider-user-identifier-type-provider-attribute-name
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-attribute-value :initarg
                         :provider-attribute-value :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-provider-user-identifier-type-provider-attribute-value
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provider-user-identifier-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provider-user-identifier-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provider-user-identifier-type
                    'make-provider-user-identifier-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provider-user-identifier-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provider-user-identifier-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-attribute-name))
      (common-lisp:list
       (common-lisp:cons "ProviderAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-attribute-value))
      (common-lisp:list
       (common-lisp:cons "ProviderAttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provider-user-identifier-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype providers-list-type ()
   '(trivial-types:proper-list provider-description))
 (common-lisp:defun make-providers-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provider-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-limit () 'common-lisp:integer)
(common-lisp:deftype query-limit-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype recovery-mechanisms-type ()
   '(trivial-types:proper-list recovery-option-type))
 (common-lisp:defun make-recovery-mechanisms-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-option-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recovery-option-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recovery-option-type common-lisp:nil
                       ((priority :initarg :priority :initform
                         (common-lisp:error ":priority is required") :type
                         (common-lisp:or priority-type common-lisp:null)
                         :accessor struct-shape-recovery-option-type-priority
                         :shape "PriorityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or recovery-option-name-type
                                         common-lisp:null)
                         :accessor struct-shape-recovery-option-type-name
                         :shape "RecoveryOptionNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recovery-option-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recovery-option-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recovery-option-type 'make-recovery-option-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recovery-option-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recovery-option-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recovery-option-type))
   common-lisp:nil))
(common-lisp:deftype redirect-url-type () 'common-lisp:string)
(common-lisp:deftype refresh-token-validity-type () 'common-lisp:integer)
(common-lisp:deftype region-code-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resend-confirmation-code-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-hash :initarg :secret-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-hash-type common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-request-secret-hash
                         :shape "SecretHashType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-request-user-context-data
                         :shape "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resend-confirmation-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resend-confirmation-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resend-confirmation-code-request
                    'make-resend-confirmation-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resend-confirmation-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resend-confirmation-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-hash))
      (common-lisp:list
       (common-lisp:cons "SecretHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resend-confirmation-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resend-confirmation-code-response common-lisp:nil
                       ((code-delivery-details :initarg :code-delivery-details
                         :initform common-lisp:nil :type
                         (common-lisp:or code-delivery-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resend-confirmation-code-response-code-delivery-details
                         :shape "CodeDeliveryDetailsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resend-confirmation-code-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resend-confirmation-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resend-confirmation-code-response
                    'make-resend-confirmation-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resend-confirmation-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resend-confirmation-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-delivery-details))
      (common-lisp:list
       (common-lisp:cons "CodeDeliveryDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resend-confirmation-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-server-identifier-type () 'common-lisp:string)
(common-lisp:deftype resource-server-name-type () 'common-lisp:string)
(common-lisp:deftype resource-server-scope-description-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-server-scope-list-type ()
   '(trivial-types:proper-list resource-server-scope-type))
 (common-lisp:defun make-resource-server-scope-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-server-scope-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-server-scope-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-server-scope-type common-lisp:nil
                       ((scope-name :initarg :scope-name :initform
                         (common-lisp:error ":scope-name is required") :type
                         (common-lisp:or resource-server-scope-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-server-scope-type-scope-name
                         :shape "ResourceServerScopeNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scope-description :initarg :scope-description
                         :initform
                         (common-lisp:error ":scope-description is required")
                         :type
                         (common-lisp:or resource-server-scope-description-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-server-scope-type-scope-description
                         :shape "ResourceServerScopeDescriptionType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-server-scope-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-server-scope-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-server-scope-type
                    'make-resource-server-scope-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-server-scope-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-server-scope-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-name))
      (common-lisp:list
       (common-lisp:cons "ScopeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope-description))
      (common-lisp:list
       (common-lisp:cons "ScopeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-server-scope-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-server-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-resource-server-type-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-server-identifier-type
                                         common-lisp:null)
                         :accessor struct-shape-resource-server-type-identifier
                         :shape "ResourceServerIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-server-name-type
                                         common-lisp:null)
                         :accessor struct-shape-resource-server-type-name
                         :shape "ResourceServerNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scopes :initarg :scopes :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-server-scope-list-type
                                         common-lisp:null)
                         :accessor struct-shape-resource-server-type-scopes
                         :shape "ResourceServerScopeListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-server-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-server-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-server-type 'make-resource-server-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-server-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-server-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "Scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-server-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-servers-list-type ()
   '(trivial-types:proper-list resource-server-type))
 (common-lisp:defun make-resource-servers-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-server-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass respond-to-auth-challenge-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-name :initarg :challenge-name :initform
                         (common-lisp:error ":challenge-name is required")
                         :type
                         (common-lisp:or challenge-name-type common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-challenge-name
                         :shape "ChallengeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-responses :initarg :challenge-responses
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-responses-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-challenge-responses
                         :shape "ChallengeResponsesType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-analytics-metadata
                         :shape "AnalyticsMetadataType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-user-context-data
                         :shape "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-respond-to-auth-challenge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'respond-to-auth-challenge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'respond-to-auth-challenge-request
                    'make-respond-to-auth-challenge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          respond-to-auth-challenge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          respond-to-auth-challenge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-responses))
      (common-lisp:list
       (common-lisp:cons "ChallengeResponses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          respond-to-auth-challenge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass respond-to-auth-challenge-response common-lisp:nil
                       ((challenge-name :initarg :challenge-name :initform
                         common-lisp:nil :type
                         (common-lisp:or challenge-name-type common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-response-challenge-name
                         :shape "ChallengeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-response-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (challenge-parameters :initarg :challenge-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or challenge-parameters-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-response-challenge-parameters
                         :shape "ChallengeParametersType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-result :initarg :authentication-result
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-result-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-respond-to-auth-challenge-response-authentication-result
                         :shape "AuthenticationResultType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-respond-to-auth-challenge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'respond-to-auth-challenge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'respond-to-auth-challenge-response
                    'make-respond-to-auth-challenge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          respond-to-auth-challenge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          respond-to-auth-challenge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-name))
      (common-lisp:list
       (common-lisp:cons "ChallengeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'challenge-parameters))
      (common-lisp:list
       (common-lisp:cons "ChallengeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-result))
      (common-lisp:list
       (common-lisp:cons "AuthenticationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          respond-to-auth-challenge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-token-request common-lisp:nil
                       ((token :initarg :token :initform
                         (common-lisp:error ":token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor struct-shape-revoke-token-request-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor struct-shape-revoke-token-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-secret :initarg :client-secret :initform
                         common-lisp:nil :type
                         (common-lisp:or client-secret-type common-lisp:null)
                         :accessor
                         struct-shape-revoke-token-request-client-secret :shape
                         "ClientSecretType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-token-request 'make-revoke-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revoke-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revoke-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revoke-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-token-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-token-response 'make-revoke-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass risk-configuration-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-risk-configuration-type-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-risk-configuration-type-client-id :shape
                         "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compromised-credentials-risk-configuration :initarg
                         :compromised-credentials-risk-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          compromised-credentials-risk-configuration-type
                          common-lisp:null)
                         :accessor
                         struct-shape-risk-configuration-type-compromised-credentials-risk-configuration
                         :shape "CompromisedCredentialsRiskConfigurationType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-takeover-risk-configuration :initarg
                         :account-takeover-risk-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          account-takeover-risk-configuration-type
                          common-lisp:null)
                         :accessor
                         struct-shape-risk-configuration-type-account-takeover-risk-configuration
                         :shape "AccountTakeoverRiskConfigurationType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (risk-exception-configuration :initarg
                         :risk-exception-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-exception-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-risk-configuration-type-risk-exception-configuration
                         :shape "RiskExceptionConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-risk-configuration-type-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-risk-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'risk-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'risk-configuration-type 'make-risk-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          risk-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          risk-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compromised-credentials-risk-configuration))
      (common-lisp:list
       (common-lisp:cons "CompromisedCredentialsRiskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-takeover-risk-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountTakeoverRiskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'risk-exception-configuration))
      (common-lisp:list
       (common-lisp:cons "RiskExceptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          risk-configuration-type))
   common-lisp:nil))
(common-lisp:deftype risk-decision-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass risk-exception-configuration-type common-lisp:nil
                       ((blocked-iprange-list :initarg :blocked-iprange-list
                         :initform common-lisp:nil :type
                         (common-lisp:or blocked-iprange-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-risk-exception-configuration-type-blocked-iprange-list
                         :shape "BlockedIPRangeListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (skipped-iprange-list :initarg :skipped-iprange-list
                         :initform common-lisp:nil :type
                         (common-lisp:or skipped-iprange-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-risk-exception-configuration-type-skipped-iprange-list
                         :shape "SkippedIPRangeListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-risk-exception-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'risk-exception-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'risk-exception-configuration-type
                    'make-risk-exception-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          risk-exception-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          risk-exception-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blocked-iprange-list))
      (common-lisp:list
       (common-lisp:cons "BlockedIPRangeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skipped-iprange-list))
      (common-lisp:list
       (common-lisp:cons "SkippedIPRangeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          risk-exception-configuration-type))
   common-lisp:nil))
(common-lisp:deftype risk-level-type () 'common-lisp:string)
(common-lisp:deftype s3bucket-type () 'common-lisp:string)
(common-lisp:deftype sesconfiguration-set () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass smsmfa-settings-type common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-smsmfa-settings-type-enabled
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-mfa :initarg :preferred-mfa :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-smsmfa-settings-type-preferred-mfa :shape
                         "BooleanType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-smsmfa-settings-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'smsmfa-settings-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'smsmfa-settings-type 'make-smsmfa-settings-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smsmfa-settings-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smsmfa-settings-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-mfa))
      (common-lisp:list
       (common-lisp:cons "PreferredMfa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smsmfa-settings-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-attribute-type common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or custom-attribute-name-type
                                         common-lisp:null)
                         :accessor struct-shape-schema-attribute-type-name
                         :shape "CustomAttributeNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-data-type :initarg :attribute-data-type
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-data-type common-lisp:null)
                         :accessor
                         struct-shape-schema-attribute-type-attribute-data-type
                         :shape "AttributeDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (developer-only-attribute :initarg
                         :developer-only-attribute :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-schema-attribute-type-developer-only-attribute
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mutable :initarg :mutable :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-schema-attribute-type-mutable
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (required :initarg :required :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-schema-attribute-type-required
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-attribute-constraints :initarg
                         :number-attribute-constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or number-attribute-constraints-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-attribute-type-number-attribute-constraints
                         :shape "NumberAttributeConstraintsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (string-attribute-constraints :initarg
                         :string-attribute-constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or string-attribute-constraints-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-attribute-type-string-attribute-constraints
                         :shape "StringAttributeConstraintsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-attribute-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-attribute-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-attribute-type 'make-schema-attribute-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-attribute-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-attribute-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-data-type))
      (common-lisp:list
       (common-lisp:cons "AttributeDataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-only-attribute))
      (common-lisp:list
       (common-lisp:cons "DeveloperOnlyAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutable))
      (common-lisp:list
       (common-lisp:cons "Mutable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "Required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-attribute-constraints))
      (common-lisp:list
       (common-lisp:cons "NumberAttributeConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-attribute-constraints))
      (common-lisp:list
       (common-lisp:cons "StringAttributeConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-attribute-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-attributes-list-type ()
   '(trivial-types:proper-list schema-attribute-type))
 (common-lisp:defun make-schema-attributes-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition scope-does-not-exist-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scope-does-not-exist-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scope-does-not-exist-exception
                    'scope-does-not-exist-exception-message)))
(common-lisp:progn
 (common-lisp:deftype scope-list-type ()
   '(trivial-types:proper-list scope-type))
 (common-lisp:defun make-scope-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scope-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scope-type () 'common-lisp:string)
(common-lisp:deftype search-pagination-token-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype searched-attribute-names-list-type ()
   '(trivial-types:proper-list attribute-name-type))
 (common-lisp:defun make-searched-attribute-names-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-code-type () 'common-lisp:string)
(common-lisp:deftype secret-hash-type () 'common-lisp:string)
(common-lisp:deftype session-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass set-log-delivery-configuration-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-set-log-delivery-configuration-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-configurations :initarg :log-configurations
                         :initform
                         (common-lisp:error ":log-configurations is required")
                         :type
                         (common-lisp:or log-configuration-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-log-delivery-configuration-request-log-configurations
                         :shape "LogConfigurationListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-log-delivery-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-log-delivery-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-log-delivery-configuration-request
                    'make-set-log-delivery-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-log-delivery-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-log-delivery-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configurations))
      (common-lisp:list
       (common-lisp:cons "LogConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-log-delivery-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-log-delivery-configuration-response common-lisp:nil
                       ((log-delivery-configuration :initarg
                         :log-delivery-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or log-delivery-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-log-delivery-configuration-response-log-delivery-configuration
                         :shape "LogDeliveryConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-log-delivery-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-log-delivery-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-log-delivery-configuration-response
                    'make-set-log-delivery-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-log-delivery-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-log-delivery-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-delivery-configuration))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-log-delivery-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-risk-configuration-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-set-risk-configuration-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-set-risk-configuration-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compromised-credentials-risk-configuration :initarg
                         :compromised-credentials-risk-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          compromised-credentials-risk-configuration-type
                          common-lisp:null)
                         :accessor
                         struct-shape-set-risk-configuration-request-compromised-credentials-risk-configuration
                         :shape "CompromisedCredentialsRiskConfigurationType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-takeover-risk-configuration :initarg
                         :account-takeover-risk-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          account-takeover-risk-configuration-type
                          common-lisp:null)
                         :accessor
                         struct-shape-set-risk-configuration-request-account-takeover-risk-configuration
                         :shape "AccountTakeoverRiskConfigurationType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (risk-exception-configuration :initarg
                         :risk-exception-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or risk-exception-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-risk-configuration-request-risk-exception-configuration
                         :shape "RiskExceptionConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-risk-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-risk-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-risk-configuration-request
                    'make-set-risk-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-risk-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-risk-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compromised-credentials-risk-configuration))
      (common-lisp:list
       (common-lisp:cons "CompromisedCredentialsRiskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-takeover-risk-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountTakeoverRiskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'risk-exception-configuration))
      (common-lisp:list
       (common-lisp:cons "RiskExceptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-risk-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-risk-configuration-response common-lisp:nil
                       ((risk-configuration :initarg :risk-configuration
                         :initform
                         (common-lisp:error ":risk-configuration is required")
                         :type
                         (common-lisp:or risk-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-risk-configuration-response-risk-configuration
                         :shape "RiskConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-risk-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-risk-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-risk-configuration-response
                    'make-set-risk-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-risk-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-risk-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-configuration))
      (common-lisp:list
       (common-lisp:cons "RiskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-risk-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-uicustomization-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-set-uicustomization-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-set-uicustomization-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (css :initarg :css :initform common-lisp:nil :type
                         (common-lisp:or csstype common-lisp:null) :accessor
                         struct-shape-set-uicustomization-request-css :shape
                         "CSSType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-file :initarg :image-file :initform
                         common-lisp:nil :type
                         (common-lisp:or image-file-type common-lisp:null)
                         :accessor
                         struct-shape-set-uicustomization-request-image-file
                         :shape "ImageFileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-uicustomization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-uicustomization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-uicustomization-request
                    'make-set-uicustomization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-uicustomization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-uicustomization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'css))
      (common-lisp:list
       (common-lisp:cons "CSS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-file))
      (common-lisp:list
       (common-lisp:cons "ImageFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-uicustomization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-uicustomization-response common-lisp:nil
                       ((uicustomization :initarg :uicustomization :initform
                         (common-lisp:error ":uicustomization is required")
                         :type
                         (common-lisp:or uicustomization-type common-lisp:null)
                         :accessor
                         struct-shape-set-uicustomization-response-uicustomization
                         :shape "UICustomizationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-uicustomization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-uicustomization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-uicustomization-response
                    'make-set-uicustomization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-uicustomization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-uicustomization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uicustomization))
      (common-lisp:list
       (common-lisp:cons "UICustomization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-uicustomization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-user-mfapreference-request common-lisp:nil
                       ((smsmfa-settings :initarg :smsmfa-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or smsmfa-settings-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-mfapreference-request-smsmfa-settings
                         :shape "SMSMfaSettingsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-token-mfa-settings :initarg
                         :software-token-mfa-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or software-token-mfa-settings-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-user-mfapreference-request-software-token-mfa-settings
                         :shape "SoftwareTokenMfaSettingsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-mfapreference-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-user-mfapreference-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-user-mfapreference-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-user-mfapreference-request
                    'make-set-user-mfapreference-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-user-mfapreference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-user-mfapreference-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smsmfa-settings))
      (common-lisp:list
       (common-lisp:cons "SMSMfaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-token-mfa-settings))
      (common-lisp:list
       (common-lisp:cons "SoftwareTokenMfaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-user-mfapreference-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-user-mfapreference-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-user-mfapreference-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-user-mfapreference-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-user-mfapreference-response
                    'make-set-user-mfapreference-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-user-mfapreference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-user-mfapreference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-user-mfapreference-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-user-pool-mfa-config-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sms-mfa-configuration :initarg :sms-mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-mfa-config-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-request-sms-mfa-configuration
                         :shape "SmsMfaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-token-mfa-configuration :initarg
                         :software-token-mfa-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or software-token-mfa-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-request-software-token-mfa-configuration
                         :shape "SoftwareTokenMfaConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfa-configuration :initarg :mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-mfa-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-request-mfa-configuration
                         :shape "UserPoolMfaType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-user-pool-mfa-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-user-pool-mfa-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-user-pool-mfa-config-request
                    'make-set-user-pool-mfa-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-user-pool-mfa-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-user-pool-mfa-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsMfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-token-mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "SoftwareTokenMfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "MfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-user-pool-mfa-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-user-pool-mfa-config-response common-lisp:nil
                       ((sms-mfa-configuration :initarg :sms-mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-mfa-config-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-response-sms-mfa-configuration
                         :shape "SmsMfaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-token-mfa-configuration :initarg
                         :software-token-mfa-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or software-token-mfa-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-response-software-token-mfa-configuration
                         :shape "SoftwareTokenMfaConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfa-configuration :initarg :mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-mfa-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-pool-mfa-config-response-mfa-configuration
                         :shape "UserPoolMfaType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-user-pool-mfa-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-user-pool-mfa-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-user-pool-mfa-config-response
                    'make-set-user-pool-mfa-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-user-pool-mfa-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-user-pool-mfa-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsMfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-token-mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "SoftwareTokenMfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "MfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-user-pool-mfa-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-user-settings-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-settings-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mfaoptions :initarg :mfaoptions :initform
                         (common-lisp:error ":mfaoptions is required") :type
                         (common-lisp:or mfaoption-list-type common-lisp:null)
                         :accessor
                         struct-shape-set-user-settings-request-mfaoptions
                         :shape "MFAOptionListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-user-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-user-settings-request
                    'make-set-user-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-user-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfaoptions))
      (common-lisp:list
       (common-lisp:cons "MFAOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-user-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-user-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-user-settings-response
                    'make-set-user-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sign-up-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-hash :initarg :secret-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-hash-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-secret-hash
                         :shape "SecretHashType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform
                         (common-lisp:error ":password is required") :type
                         (common-lisp:or password-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-password :shape
                         "PasswordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-attributes :initarg :user-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-user-attributes
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation-data :initarg :validation-data :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-validation-data
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-metadata :initarg :analytics-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-metadata-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-sign-up-request-analytics-metadata :shape
                         "AnalyticsMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-context-data :initarg :user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or user-context-data-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-sign-up-request-user-context-data :shape
                         "UserContextDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor struct-shape-sign-up-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sign-up-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sign-up-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sign-up-request 'make-sign-up-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sign-up-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sign-up-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-hash))
      (common-lisp:list
       (common-lisp:cons "SecretHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-data))
      (common-lisp:list
       (common-lisp:cons "ValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analytics-metadata))
      (common-lisp:list
       (common-lisp:cons "AnalyticsMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-context-data))
      (common-lisp:list
       (common-lisp:cons "UserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sign-up-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sign-up-response common-lisp:nil
                       ((user-confirmed :initarg :user-confirmed :initform
                         (common-lisp:error ":user-confirmed is required")
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-sign-up-response-user-confirmed
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-delivery-details :initarg :code-delivery-details
                         :initform common-lisp:nil :type
                         (common-lisp:or code-delivery-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-sign-up-response-code-delivery-details
                         :shape "CodeDeliveryDetailsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-sub :initarg :user-sub :initform
                         (common-lisp:error ":user-sub is required") :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor struct-shape-sign-up-response-user-sub
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sign-up-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sign-up-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sign-up-response 'make-sign-up-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sign-up-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sign-up-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-confirmed))
      (common-lisp:list
       (common-lisp:cons "UserConfirmed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-delivery-details))
      (common-lisp:list
       (common-lisp:cons "CodeDeliveryDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-sub))
      (common-lisp:list
       (common-lisp:cons "UserSub"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sign-up-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype skipped-iprange-list-type ()
   '(trivial-types:proper-list string-type))
 (common-lisp:defun make-skipped-iprange-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sms-configuration-type common-lisp:nil
                       ((sns-caller-arn :initarg :sns-caller-arn :initform
                         (common-lisp:error ":sns-caller-arn is required")
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor
                         struct-shape-sms-configuration-type-sns-caller-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-sms-configuration-type-external-id :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sns-region :initarg :sns-region :initform
                         common-lisp:nil :type
                         (common-lisp:or region-code-type common-lisp:null)
                         :accessor
                         struct-shape-sms-configuration-type-sns-region :shape
                         "RegionCodeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sms-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sms-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sms-configuration-type 'make-sms-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sms-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sms-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-caller-arn))
      (common-lisp:list
       (common-lisp:cons "SnsCallerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-region))
      (common-lisp:list
       (common-lisp:cons "SnsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sms-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sms-mfa-config-type common-lisp:nil
                       ((sms-authentication-message :initarg
                         :sms-authentication-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-sms-mfa-config-type-sms-authentication-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-configuration :initarg :sms-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-sms-mfa-config-type-sms-configuration
                         :shape "SmsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sms-mfa-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sms-mfa-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sms-mfa-config-type 'make-sms-mfa-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sms-mfa-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sms-mfa-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-authentication-message))
      (common-lisp:list
       (common-lisp:cons "SmsAuthenticationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sms-mfa-config-type))
   common-lisp:nil))
(common-lisp:deftype sms-verification-message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition software-token-mfanot-found-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       software-token-mfanot-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'software-token-mfanot-found-exception
                    'software-token-mfanot-found-exception-message)))
(common-lisp:deftype software-token-mfauser-code-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass software-token-mfa-config-type common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-software-token-mfa-config-type-enabled
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-software-token-mfa-config-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'software-token-mfa-config-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'software-token-mfa-config-type
                    'make-software-token-mfa-config-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          software-token-mfa-config-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          software-token-mfa-config-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          software-token-mfa-config-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass software-token-mfa-settings-type common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-software-token-mfa-settings-type-enabled
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-mfa :initarg :preferred-mfa :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-software-token-mfa-settings-type-preferred-mfa
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-software-token-mfa-settings-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'software-token-mfa-settings-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'software-token-mfa-settings-type
                    'make-software-token-mfa-settings-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          software-token-mfa-settings-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          software-token-mfa-settings-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-mfa))
      (common-lisp:list
       (common-lisp:cons "PreferredMfa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          software-token-mfa-settings-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-user-import-job-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-start-user-import-job-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or user-import-job-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-user-import-job-request-job-id
                         :shape "UserImportJobIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-user-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-user-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-user-import-job-request
                    'make-start-user-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-user-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-user-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-user-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-user-import-job-response common-lisp:nil
                       ((user-import-job :initarg :user-import-job :initform
                         common-lisp:nil :type
                         (common-lisp:or user-import-job-type common-lisp:null)
                         :accessor
                         struct-shape-start-user-import-job-response-user-import-job
                         :shape "UserImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-user-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-user-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-user-import-job-response
                    'make-start-user-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-user-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-user-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-import-job))
      (common-lisp:list
       (common-lisp:cons "UserImportJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-user-import-job-response))
   common-lisp:nil))
(common-lisp:deftype status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-user-import-job-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-stop-user-import-job-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or user-import-job-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-user-import-job-request-job-id
                         :shape "UserImportJobIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-user-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-user-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-user-import-job-request
                    'make-stop-user-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-user-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-user-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-user-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-user-import-job-response common-lisp:nil
                       ((user-import-job :initarg :user-import-job :initform
                         common-lisp:nil :type
                         (common-lisp:or user-import-job-type common-lisp:null)
                         :accessor
                         struct-shape-stop-user-import-job-response-user-import-job
                         :shape "UserImportJobType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-user-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-user-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-user-import-job-response
                    'make-stop-user-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-user-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-user-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-import-job))
      (common-lisp:list
       (common-lisp:cons "UserImportJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-user-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass string-attribute-constraints-type common-lisp:nil
                       ((min-length :initarg :min-length :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-string-attribute-constraints-type-min-length
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-length :initarg :max-length :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-string-attribute-constraints-type-max-length
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-string-attribute-constraints-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'string-attribute-constraints-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'string-attribute-constraints-type
                    'make-string-attribute-constraints-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-constraints-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-constraints-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-length))
      (common-lisp:list
       (common-lisp:cons "MinLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "MaxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-attribute-constraints-type))
   common-lisp:nil))
(common-lisp:deftype string-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-identity-providers-list-type ()
   '(trivial-types:proper-list provider-name-type))
 (common-lisp:defun make-supported-identity-providers-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provider-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-keys-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or user-pool-tags-type common-lisp:null)
                         :accessor struct-shape-tag-resource-request-tags
                         :shape "UserPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value-type () 'common-lisp:string)
(common-lisp:deftype temporary-password-validity-days-type ()
  'common-lisp:integer)
(common-lisp:deftype time-units-type () 'common-lisp:string)
(common-lisp:deftype token-model-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass token-validity-units-type common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         common-lisp:nil :type
                         (common-lisp:or time-units-type common-lisp:null)
                         :accessor
                         struct-shape-token-validity-units-type-access-token
                         :shape "TimeUnitsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id-token :initarg :id-token :initform common-lisp:nil
                         :type
                         (common-lisp:or time-units-type common-lisp:null)
                         :accessor
                         struct-shape-token-validity-units-type-id-token :shape
                         "TimeUnitsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh-token :initarg :refresh-token :initform
                         common-lisp:nil :type
                         (common-lisp:or time-units-type common-lisp:null)
                         :accessor
                         struct-shape-token-validity-units-type-refresh-token
                         :shape "TimeUnitsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-token-validity-units-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'token-validity-units-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'token-validity-units-type
                    'make-token-validity-units-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          token-validity-units-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          token-validity-units-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token))
      (common-lisp:list
       (common-lisp:cons "IdToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "RefreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          token-validity-units-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-failed-attempts-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-failed-attempts-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-failed-attempts-exception
                    'too-many-failed-attempts-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass uicustomization-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-uicustomization-type-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor struct-shape-uicustomization-type-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-url :initarg :image-url :initform
                         common-lisp:nil :type
                         (common-lisp:or image-url-type common-lisp:null)
                         :accessor struct-shape-uicustomization-type-image-url
                         :shape "ImageUrlType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (css :initarg :css :initform common-lisp:nil :type
                         (common-lisp:or csstype common-lisp:null) :accessor
                         struct-shape-uicustomization-type-css :shape "CSSType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cssversion :initarg :cssversion :initform
                         common-lisp:nil :type
                         (common-lisp:or cssversion-type common-lisp:null)
                         :accessor struct-shape-uicustomization-type-cssversion
                         :shape "CSSVersionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-uicustomization-type-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-uicustomization-type-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-uicustomization-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'uicustomization-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'uicustomization-type 'make-uicustomization-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uicustomization-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uicustomization-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'css))
      (common-lisp:list
       (common-lisp:cons "CSS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cssversion))
      (common-lisp:list
       (common-lisp:cons "CSSVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uicustomization-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unexpected-lambda-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unexpected-lambda-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unexpected-lambda-exception
                    'unexpected-lambda-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-identity-provider-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-identity-provider-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-identity-provider-exception
                    'unsupported-identity-provider-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-token-type-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-token-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-token-type-exception
                    'unsupported-token-type-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-user-state-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-user-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-user-state-exception
                    'unsupported-user-state-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or user-pool-tags-list-type
                                         common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "UserPoolTagsListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-auth-event-feedback-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-auth-event-feedback-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform
                         (common-lisp:error ":username is required") :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor
                         struct-shape-update-auth-event-feedback-request-username
                         :shape "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-id :initarg :event-id :initform
                         (common-lisp:error ":event-id is required") :type
                         (common-lisp:or event-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-auth-event-feedback-request-event-id
                         :shape "EventIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback-token :initarg :feedback-token :initform
                         (common-lisp:error ":feedback-token is required")
                         :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-update-auth-event-feedback-request-feedback-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback-value :initarg :feedback-value :initform
                         (common-lisp:error ":feedback-value is required")
                         :type
                         (common-lisp:or feedback-value-type common-lisp:null)
                         :accessor
                         struct-shape-update-auth-event-feedback-request-feedback-value
                         :shape "FeedbackValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-auth-event-feedback-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-auth-event-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-auth-event-feedback-request
                    'make-update-auth-event-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-auth-event-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-auth-event-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-token))
      (common-lisp:list
       (common-lisp:cons "FeedbackToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-value))
      (common-lisp:list
       (common-lisp:cons "FeedbackValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-auth-event-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-auth-event-feedback-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-auth-event-feedback-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-auth-event-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-auth-event-feedback-response
                    'make-update-auth-event-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-auth-event-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-auth-event-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-auth-event-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-status-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-update-device-status-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-key :initarg :device-key :initform
                         (common-lisp:error ":device-key is required") :type
                         (common-lisp:or device-key-type common-lisp:null)
                         :accessor
                         struct-shape-update-device-status-request-device-key
                         :shape "DeviceKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-remembered-status :initarg
                         :device-remembered-status :initform common-lisp:nil
                         :type
                         (common-lisp:or device-remembered-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-device-status-request-device-remembered-status
                         :shape "DeviceRememberedStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-status-request
                    'make-update-device-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-key))
      (common-lisp:list
       (common-lisp:cons "DeviceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-remembered-status))
      (common-lisp:list
       (common-lisp:cons "DeviceRememberedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-status-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-device-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-status-response
                    'make-update-device-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor struct-shape-update-group-request-group-name
                         :shape "GroupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-description :shape
                         "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor struct-shape-update-group-request-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (precedence :initarg :precedence :initform
                         common-lisp:nil :type
                         (common-lisp:or precedence-type common-lisp:null)
                         :accessor struct-shape-update-group-request-precedence
                         :shape "PrecedenceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precedence))
      (common-lisp:list
       (common-lisp:cons "Precedence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-response common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         struct-shape-update-group-response-group :shape
                         "GroupType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-response 'make-update-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-name :initarg :provider-name :initform
                         (common-lisp:error ":provider-name is required") :type
                         (common-lisp:or provider-name-type common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-provider-name
                         :shape "ProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-details :initarg :provider-details :initform
                         common-lisp:nil :type
                         (common-lisp:or provider-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-provider-details
                         :shape "ProviderDetailsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-mapping :initarg :attribute-mapping
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-mapping-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-attribute-mapping
                         :shape "AttributeMappingType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idp-identifiers :initarg :idp-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or idp-identifiers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-request-idp-identifiers
                         :shape "IdpIdentifiersListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-identity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-request
                    'make-update-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-details))
      (common-lisp:list
       (common-lisp:cons "ProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-mapping))
      (common-lisp:list
       (common-lisp:cons "AttributeMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp-identifiers))
      (common-lisp:list
       (common-lisp:cons "IdpIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :identity-provider
                         :initform
                         (common-lisp:error ":identity-provider is required")
                         :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-identity-provider-response-identity-provider
                         :shape "IdentityProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-identity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-response
                    'make-update-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-server-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-resource-server-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or resource-server-identifier-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resource-server-request-identifier
                         :shape "ResourceServerIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-server-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resource-server-request-name
                         :shape "ResourceServerNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scopes :initarg :scopes :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-server-scope-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resource-server-request-scopes
                         :shape "ResourceServerScopeListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resource-server-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resource-server-request
                    'make-update-resource-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "Scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-server-response common-lisp:nil
                       ((resource-server :initarg :resource-server :initform
                         (common-lisp:error ":resource-server is required")
                         :type
                         (common-lisp:or resource-server-type common-lisp:null)
                         :accessor
                         struct-shape-update-resource-server-response-resource-server
                         :shape "ResourceServerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resource-server-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resource-server-response
                    'make-update-resource-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-server))
      (common-lisp:list
       (common-lisp:cons "ResourceServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-attributes-request common-lisp:nil
                       ((user-attributes :initarg :user-attributes :initform
                         (common-lisp:error ":user-attributes is required")
                         :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-attributes-request-user-attributes
                         :shape "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-attributes-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-metadata :initarg :client-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or client-metadata-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-attributes-request-client-metadata
                         :shape "ClientMetadataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-attributes-request
                    'make-update-user-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-metadata))
      (common-lisp:list
       (common-lisp:cons "ClientMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-attributes-response common-lisp:nil
                       ((code-delivery-details-list :initarg
                         :code-delivery-details-list :initform common-lisp:nil
                         :type
                         (common-lisp:or code-delivery-details-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-attributes-response-code-delivery-details-list
                         :shape "CodeDeliveryDetailsListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-attributes-response
                    'make-update-user-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-delivery-details-list))
      (common-lisp:list
       (common-lisp:cons "CodeDeliveryDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-pool-client-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-name :initarg :client-name :initform
                         common-lisp:nil :type
                         (common-lisp:or client-name-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-client-name
                         :shape "ClientNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh-token-validity :initarg
                         :refresh-token-validity :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-refresh-token-validity
                         :shape "RefreshTokenValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-token-validity :initarg :access-token-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or access-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-access-token-validity
                         :shape "AccessTokenValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id-token-validity :initarg :id-token-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or id-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-id-token-validity
                         :shape "IdTokenValidityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-validity-units :initarg :token-validity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or token-validity-units-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-token-validity-units
                         :shape "TokenValidityUnitsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (read-attributes :initarg :read-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or client-permission-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-read-attributes
                         :shape "ClientPermissionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (write-attributes :initarg :write-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or client-permission-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-write-attributes
                         :shape "ClientPermissionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (explicit-auth-flows :initarg :explicit-auth-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or explicit-auth-flows-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-explicit-auth-flows
                         :shape "ExplicitAuthFlowsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-identity-providers :initarg
                         :supported-identity-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or supported-identity-providers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-supported-identity-providers
                         :shape "SupportedIdentityProvidersListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (callback-urls :initarg :callback-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or callback-urls-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-callback-urls
                         :shape "CallbackURLsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logout-urls :initarg :logout-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or logout-urls-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-logout-urls
                         :shape "LogoutURLsListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-redirect-uri :initarg :default-redirect-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or redirect-url-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-default-redirect-uri
                         :shape "RedirectUrlType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-flows :initarg :allowed-oauth-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or oauth-flows-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-allowed-oauth-flows
                         :shape "OAuthFlowsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-scopes :initarg :allowed-oauth-scopes
                         :initform common-lisp:nil :type
                         (common-lisp:or scope-list-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-allowed-oauth-scopes
                         :shape "ScopeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-flows-user-pool-client :initarg
                         :allowed-oauth-flows-user-pool-client :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-allowed-oauth-flows-user-pool-client
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-configuration :initarg
                         :analytics-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-analytics-configuration
                         :shape "AnalyticsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prevent-user-existence-errors :initarg
                         :prevent-user-existence-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or prevent-user-existence-error-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-prevent-user-existence-errors
                         :shape "PreventUserExistenceErrorTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-token-revocation :initarg
                         :enable-token-revocation :initform common-lisp:nil
                         :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-enable-token-revocation
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-propagate-additional-user-context-data :initarg
                         :enable-propagate-additional-user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-enable-propagate-additional-user-context-data
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-session-validity :initarg :auth-session-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or auth-session-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-request-auth-session-validity
                         :shape "AuthSessionValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-pool-client-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-pool-client-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-pool-client-request
                    'make-update-user-pool-client-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-client-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-client-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-name))
      (common-lisp:list
       (common-lisp:cons "ClientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-token-validity))
      (common-lisp:list
       (common-lisp:cons "RefreshTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-token-validity))
      (common-lisp:list
       (common-lisp:cons "AccessTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token-validity))
      (common-lisp:list
       (common-lisp:cons "IdTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-validity-units))
      (common-lisp:list
       (common-lisp:cons "TokenValidityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-attributes))
      (common-lisp:list
       (common-lisp:cons "ReadAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-attributes))
      (common-lisp:list
       (common-lisp:cons "WriteAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-auth-flows))
      (common-lisp:list
       (common-lisp:cons "ExplicitAuthFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-identity-providers))
      (common-lisp:list
       (common-lisp:cons "SupportedIdentityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-urls))
      (common-lisp:list
       (common-lisp:cons "CallbackURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logout-urls))
      (common-lisp:list
       (common-lisp:cons "LogoutURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-redirect-uri))
      (common-lisp:list
       (common-lisp:cons "DefaultRedirectURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-oauth-flows))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-oauth-flows-user-pool-client))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthFlowsUserPoolClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prevent-user-existence-errors))
      (common-lisp:list
       (common-lisp:cons "PreventUserExistenceErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-token-revocation))
      (common-lisp:list
       (common-lisp:cons "EnableTokenRevocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-propagate-additional-user-context-data))
      (common-lisp:list
       (common-lisp:cons "EnablePropagateAdditionalUserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-session-validity))
      (common-lisp:list
       (common-lisp:cons "AuthSessionValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-client-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-pool-client-response common-lisp:nil
                       ((user-pool-client :initarg :user-pool-client :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-client-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-client-response-user-pool-client
                         :shape "UserPoolClientType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-pool-client-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-pool-client-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-pool-client-response
                    'make-update-user-pool-client-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-client-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-client-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-client))
      (common-lisp:list
       (common-lisp:cons "UserPoolClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-client-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-pool-domain-request common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-domain-request-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-domain-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-config :initarg :custom-domain-config
                         :initform
                         (common-lisp:error
                          ":custom-domain-config is required")
                         :type
                         (common-lisp:or custom-domain-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-domain-request-custom-domain-config
                         :shape "CustomDomainConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-pool-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-pool-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-pool-domain-request
                    'make-update-user-pool-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-config))
      (common-lisp:list
       (common-lisp:cons "CustomDomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-pool-domain-response common-lisp:nil
                       ((cloud-front-domain :initarg :cloud-front-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-domain-response-cloud-front-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-pool-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-pool-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-pool-domain-response
                    'make-update-user-pool-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-front-domain))
      (common-lisp:list
       (common-lisp:cons "CloudFrontDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-pool-request common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or user-pool-policy-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-policies :shape
                         "UserPoolPolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-deletion-protection
                         :shape "DeletionProtectionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-config-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-lambda-config
                         :shape "LambdaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-verified-attributes :initarg
                         :auto-verified-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or verified-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-auto-verified-attributes
                         :shape "VerifiedAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-verification-message :initarg
                         :sms-verification-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-sms-verification-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-verification-message :initarg
                         :email-verification-message :initform common-lisp:nil
                         :type
                         (common-lisp:or email-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-email-verification-message
                         :shape "EmailVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-verification-subject :initarg
                         :email-verification-subject :initform common-lisp:nil
                         :type
                         (common-lisp:or email-verification-subject-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-email-verification-subject
                         :shape "EmailVerificationSubjectType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (verification-message-template :initarg
                         :verification-message-template :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-message-template-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-verification-message-template
                         :shape "VerificationMessageTemplateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-authentication-message :initarg
                         :sms-authentication-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-sms-authentication-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-attribute-update-settings :initarg
                         :user-attribute-update-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute-update-settings-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-user-attribute-update-settings
                         :shape "UserAttributeUpdateSettingsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfa-configuration :initarg :mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-mfa-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-mfa-configuration
                         :shape "UserPoolMfaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-configuration :initarg :device-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or device-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-device-configuration
                         :shape "DeviceConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-configuration :initarg :email-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or email-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-email-configuration
                         :shape "EmailConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-configuration :initarg :sms-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-sms-configuration
                         :shape "SmsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-pool-tags :initarg :user-pool-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-tags-type common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-user-pool-tags
                         :shape "UserPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (admin-create-user-config :initarg
                         :admin-create-user-config :initform common-lisp:nil
                         :type
                         (common-lisp:or admin-create-user-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-admin-create-user-config
                         :shape "AdminCreateUserConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-pool-add-ons :initarg :user-pool-add-ons
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-add-ons-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-user-pool-add-ons
                         :shape "UserPoolAddOnsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-recovery-setting :initarg
                         :account-recovery-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or account-recovery-setting-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-pool-request-account-recovery-setting
                         :shape "AccountRecoverySettingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-pool-request 'make-update-user-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "LambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-verified-attributes))
      (common-lisp:list
       (common-lisp:cons "AutoVerifiedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-verification-message))
      (common-lisp:list
       (common-lisp:cons "SmsVerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-verification-message))
      (common-lisp:list
       (common-lisp:cons "EmailVerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-verification-subject))
      (common-lisp:list
       (common-lisp:cons "EmailVerificationSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message-template))
      (common-lisp:list
       (common-lisp:cons "VerificationMessageTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-authentication-message))
      (common-lisp:list
       (common-lisp:cons "SmsAuthenticationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attribute-update-settings))
      (common-lisp:list
       (common-lisp:cons "UserAttributeUpdateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "MfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-configuration))
      (common-lisp:list
       (common-lisp:cons "EmailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-tags))
      (common-lisp:list
       (common-lisp:cons "UserPoolTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-create-user-config))
      (common-lisp:list
       (common-lisp:cons "AdminCreateUserConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-add-ons))
      (common-lisp:list
       (common-lisp:cons "UserPoolAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-recovery-setting))
      (common-lisp:list
       (common-lisp:cons "AccountRecoverySetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-pool-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-pool-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-pool-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-pool-response
                    'make-update-user-pool-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-pool-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-attribute-update-settings-type common-lisp:nil
                       ((attributes-require-verification-before-update :initarg
                         :attributes-require-verification-before-update
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          attributes-require-verification-before-update-type
                          common-lisp:null)
                         :accessor
                         struct-shape-user-attribute-update-settings-type-attributes-require-verification-before-update
                         :shape "AttributesRequireVerificationBeforeUpdateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-attribute-update-settings-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'user-attribute-update-settings-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-attribute-update-settings-type
                    'make-user-attribute-update-settings-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-attribute-update-settings-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-attribute-update-settings-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-require-verification-before-update))
      (common-lisp:list
       (common-lisp:cons "AttributesRequireVerificationBeforeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-attribute-update-settings-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-context-data-type common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-user-context-data-type-ip-address :shape
                         "StringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encoded-data :initarg :encoded-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-user-context-data-type-encoded-data
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-context-data-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-context-data-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-context-data-type 'make-user-context-data-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-context-data-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-context-data-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-data))
      (common-lisp:list
       (common-lisp:cons "EncodedData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-context-data-type))
   common-lisp:nil))
(common-lisp:deftype user-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition user-import-in-progress-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-import-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-import-in-progress-exception
                    'user-import-in-progress-exception-message)))
(common-lisp:deftype user-import-job-id-type () 'common-lisp:string)
(common-lisp:deftype user-import-job-name-type () 'common-lisp:string)
(common-lisp:deftype user-import-job-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-import-job-type common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type
                         (common-lisp:or user-import-job-name-type
                                         common-lisp:null)
                         :accessor struct-shape-user-import-job-type-job-name
                         :shape "UserImportJobNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type
                         (common-lisp:or user-import-job-id-type
                                         common-lisp:null)
                         :accessor struct-shape-user-import-job-type-job-id
                         :shape "UserImportJobIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-user-import-job-type-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or pre-signed-url-type common-lisp:null)
                         :accessor
                         struct-shape-user-import-job-type-pre-signed-url
                         :shape "PreSignedUrlType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-import-job-type-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-import-job-type-start-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-date :initarg :completion-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-import-job-type-completion-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or user-import-job-status-type
                                         common-lisp:null)
                         :accessor struct-shape-user-import-job-type-status
                         :shape "UserImportJobStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-watch-logs-role-arn :initarg
                         :cloud-watch-logs-role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor
                         struct-shape-user-import-job-type-cloud-watch-logs-role-arn
                         :shape "ArnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (imported-users :initarg :imported-users :initform
                         common-lisp:nil :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         struct-shape-user-import-job-type-imported-users
                         :shape "LongType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skipped-users :initarg :skipped-users :initform
                         common-lisp:nil :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         struct-shape-user-import-job-type-skipped-users :shape
                         "LongType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failed-users :initarg :failed-users :initform
                         common-lisp:nil :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         struct-shape-user-import-job-type-failed-users :shape
                         "LongType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completion-message :initarg :completion-message
                         :initform common-lisp:nil :type
                         (common-lisp:or completion-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-import-job-type-completion-message
                         :shape "CompletionMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-import-job-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-import-job-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-import-job-type 'make-user-import-job-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-import-job-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-import-job-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-users))
      (common-lisp:list
       (common-lisp:cons "ImportedUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-users))
      (common-lisp:list
       (common-lisp:cons "SkippedUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-users))
      (common-lisp:list
       (common-lisp:cons "FailedUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-message))
      (common-lisp:list
       (common-lisp:cons "CompletionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-import-job-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-import-jobs-list-type ()
   '(trivial-types:proper-list user-import-job-type))
 (common-lisp:defun make-user-import-jobs-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-import-job-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition user-lambda-validation-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-lambda-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-lambda-validation-exception
                    'user-lambda-validation-exception-message)))
(common-lisp:progn
 (common-lisp:deftype user-mfasetting-list-type ()
   '(trivial-types:proper-list string-type))
 (common-lisp:defun make-user-mfasetting-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition user-not-confirmed-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-not-confirmed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-not-confirmed-exception
                    'user-not-confirmed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition user-not-found-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-not-found-exception
                    'user-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition user-pool-add-on-not-enabled-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-pool-add-on-not-enabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-pool-add-on-not-enabled-exception
                    'user-pool-add-on-not-enabled-exception-message)))
(common-lisp:progn
 (common-lisp:defclass user-pool-add-ons-type common-lisp:nil
                       ((advanced-security-mode :initarg
                         :advanced-security-mode :initform
                         (common-lisp:error
                          ":advanced-security-mode is required")
                         :type
                         (common-lisp:or advanced-security-mode-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-add-ons-type-advanced-security-mode
                         :shape "AdvancedSecurityModeType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-add-ons-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-add-ons-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-pool-add-ons-type 'make-user-pool-add-ons-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-add-ons-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-add-ons-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-mode))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-add-ons-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-pool-client-description common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-description-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-description-user-pool-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-name :initarg :client-name :initform
                         common-lisp:nil :type
                         (common-lisp:or client-name-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-description-client-name
                         :shape "ClientNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-client-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-client-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-pool-client-description
                    'make-user-pool-client-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-client-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-client-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-name))
      (common-lisp:list
       (common-lisp:cons "ClientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-client-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-pool-client-list-type ()
   '(trivial-types:proper-list user-pool-client-description))
 (common-lisp:defun make-user-pool-client-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-pool-client-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-pool-client-type common-lisp:nil
                       ((user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-user-pool-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-name :initarg :client-name :initform
                         common-lisp:nil :type
                         (common-lisp:or client-name-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-client-name :shape
                         "ClientNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id-type common-lisp:null)
                         :accessor struct-shape-user-pool-client-type-client-id
                         :shape "ClientIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-secret :initarg :client-secret :initform
                         common-lisp:nil :type
                         (common-lisp:or client-secret-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-client-secret
                         :shape "ClientSecretType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-pool-client-type-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-pool-client-type-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh-token-validity :initarg
                         :refresh-token-validity :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-refresh-token-validity
                         :shape "RefreshTokenValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-token-validity :initarg :access-token-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or access-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-access-token-validity
                         :shape "AccessTokenValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id-token-validity :initarg :id-token-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or id-token-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-id-token-validity
                         :shape "IdTokenValidityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-validity-units :initarg :token-validity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or token-validity-units-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-token-validity-units
                         :shape "TokenValidityUnitsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (read-attributes :initarg :read-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or client-permission-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-read-attributes
                         :shape "ClientPermissionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (write-attributes :initarg :write-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or client-permission-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-write-attributes
                         :shape "ClientPermissionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (explicit-auth-flows :initarg :explicit-auth-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or explicit-auth-flows-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-explicit-auth-flows
                         :shape "ExplicitAuthFlowsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-identity-providers :initarg
                         :supported-identity-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or supported-identity-providers-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-supported-identity-providers
                         :shape "SupportedIdentityProvidersListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (callback-urls :initarg :callback-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or callback-urls-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-callback-urls
                         :shape "CallbackURLsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logout-urls :initarg :logout-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or logout-urls-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-logout-urls :shape
                         "LogoutURLsListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-redirect-uri :initarg :default-redirect-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or redirect-url-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-default-redirect-uri
                         :shape "RedirectUrlType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-flows :initarg :allowed-oauth-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or oauth-flows-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-allowed-oauth-flows
                         :shape "OAuthFlowsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-scopes :initarg :allowed-oauth-scopes
                         :initform common-lisp:nil :type
                         (common-lisp:or scope-list-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-allowed-oauth-scopes
                         :shape "ScopeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-oauth-flows-user-pool-client :initarg
                         :allowed-oauth-flows-user-pool-client :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-allowed-oauth-flows-user-pool-client
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-configuration :initarg
                         :analytics-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-analytics-configuration
                         :shape "AnalyticsConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prevent-user-existence-errors :initarg
                         :prevent-user-existence-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or prevent-user-existence-error-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-prevent-user-existence-errors
                         :shape "PreventUserExistenceErrorTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-token-revocation :initarg
                         :enable-token-revocation :initform common-lisp:nil
                         :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-enable-token-revocation
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-propagate-additional-user-context-data :initarg
                         :enable-propagate-additional-user-context-data
                         :initform common-lisp:nil :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-enable-propagate-additional-user-context-data
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-session-validity :initarg :auth-session-validity
                         :initform common-lisp:nil :type
                         (common-lisp:or auth-session-validity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-client-type-auth-session-validity
                         :shape "AuthSessionValidityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-client-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-client-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-pool-client-type 'make-user-pool-client-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-client-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-client-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-name))
      (common-lisp:list
       (common-lisp:cons "ClientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-token-validity))
      (common-lisp:list
       (common-lisp:cons "RefreshTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-token-validity))
      (common-lisp:list
       (common-lisp:cons "AccessTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-token-validity))
      (common-lisp:list
       (common-lisp:cons "IdTokenValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-validity-units))
      (common-lisp:list
       (common-lisp:cons "TokenValidityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-attributes))
      (common-lisp:list
       (common-lisp:cons "ReadAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-attributes))
      (common-lisp:list
       (common-lisp:cons "WriteAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-auth-flows))
      (common-lisp:list
       (common-lisp:cons "ExplicitAuthFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-identity-providers))
      (common-lisp:list
       (common-lisp:cons "SupportedIdentityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-urls))
      (common-lisp:list
       (common-lisp:cons "CallbackURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logout-urls))
      (common-lisp:list
       (common-lisp:cons "LogoutURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-redirect-uri))
      (common-lisp:list
       (common-lisp:cons "DefaultRedirectURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-oauth-flows))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-oauth-flows-user-pool-client))
      (common-lisp:list
       (common-lisp:cons "AllowedOAuthFlowsUserPoolClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prevent-user-existence-errors))
      (common-lisp:list
       (common-lisp:cons "PreventUserExistenceErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-token-revocation))
      (common-lisp:list
       (common-lisp:cons "EnableTokenRevocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-propagate-additional-user-context-data))
      (common-lisp:list
       (common-lisp:cons "EnablePropagateAdditionalUserContextData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-session-validity))
      (common-lisp:list
       (common-lisp:cons "AuthSessionValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-client-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-pool-description-type common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor struct-shape-user-pool-description-type-id
                         :shape "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or user-pool-name-type common-lisp:null)
                         :accessor struct-shape-user-pool-description-type-name
                         :shape "UserPoolNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-config-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-description-type-lambda-config
                         :shape "LambdaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-description-type-status :shape
                         "StatusType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-pool-description-type-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-pool-description-type-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-description-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-description-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-pool-description-type
                    'make-user-pool-description-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-description-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-description-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "LambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-description-type))
   common-lisp:nil))
(common-lisp:deftype user-pool-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-pool-list-type ()
   '(trivial-types:proper-list user-pool-description-type))
 (common-lisp:defun make-user-pool-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-pool-description-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-pool-mfa-type () 'common-lisp:string)
(common-lisp:deftype user-pool-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-pool-policy-type common-lisp:nil
                       ((password-policy :initarg :password-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or password-policy-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-policy-type-password-policy
                         :shape "PasswordPolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-policy-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-policy-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-pool-policy-type 'make-user-pool-policy-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-pool-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-pool-tagging-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-pool-tagging-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-pool-tagging-exception
                    'user-pool-tagging-exception-message)))
(common-lisp:progn
 (common-lisp:deftype user-pool-tags-list-type ()
   '(trivial-types:proper-list tag-keys-type))
 (common-lisp:defun make-user-pool-tags-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-keys-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-pool-tags-type () 'common-lisp:hash-table)
 (common-lisp:defun make-user-pool-tags-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass user-pool-type common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or user-pool-id-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-id :shape
                         "UserPoolIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or user-pool-name-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-name :shape
                         "UserPoolNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or user-pool-policy-type
                                         common-lisp:null)
                         :accessor struct-shape-user-pool-type-policies :shape
                         "UserPoolPolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-deletion-protection :shape
                         "DeletionProtectionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-config :initarg :lambda-config :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-config-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-lambda-config
                         :shape "LambdaConfigType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-status :shape
                         "StatusType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-pool-type-last-modified-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-pool-type-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-attributes :initarg :schema-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-schema-attributes :shape
                         "SchemaAttributesListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-verified-attributes :initarg
                         :auto-verified-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or verified-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-auto-verified-attributes
                         :shape "VerifiedAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alias-attributes :initarg :alias-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-attributes-list-type
                                         common-lisp:null)
                         :accessor struct-shape-user-pool-type-alias-attributes
                         :shape "AliasAttributesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (username-attributes :initarg :username-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or username-attributes-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-username-attributes :shape
                         "UsernameAttributesListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sms-verification-message :initarg
                         :sms-verification-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-sms-verification-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-verification-message :initarg
                         :email-verification-message :initform common-lisp:nil
                         :type
                         (common-lisp:or email-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-email-verification-message
                         :shape "EmailVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-verification-subject :initarg
                         :email-verification-subject :initform common-lisp:nil
                         :type
                         (common-lisp:or email-verification-subject-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-email-verification-subject
                         :shape "EmailVerificationSubjectType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (verification-message-template :initarg
                         :verification-message-template :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-message-template-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-verification-message-template
                         :shape "VerificationMessageTemplateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sms-authentication-message :initarg
                         :sms-authentication-message :initform common-lisp:nil
                         :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-sms-authentication-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-attribute-update-settings :initarg
                         :user-attribute-update-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or user-attribute-update-settings-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-user-attribute-update-settings
                         :shape "UserAttributeUpdateSettingsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfa-configuration :initarg :mfa-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-mfa-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-mfa-configuration :shape
                         "UserPoolMfaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-configuration :initarg :device-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or device-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-device-configuration
                         :shape "DeviceConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (estimated-number-of-users :initarg
                         :estimated-number-of-users :initform common-lisp:nil
                         :type (common-lisp:or integer-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-estimated-number-of-users
                         :shape "IntegerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-configuration :initarg :email-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or email-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-email-configuration :shape
                         "EmailConfigurationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sms-configuration :initarg :sms-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or sms-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-sms-configuration :shape
                         "SmsConfigurationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-pool-tags :initarg :user-pool-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-tags-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-user-pool-tags
                         :shape "UserPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sms-configuration-failure :initarg
                         :sms-configuration-failure :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-sms-configuration-failure
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-configuration-failure :initarg
                         :email-configuration-failure :initform common-lisp:nil
                         :type (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-email-configuration-failure
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or domain-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-domain :shape
                         "DomainType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-domain :initarg :custom-domain :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor struct-shape-user-pool-type-custom-domain
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (admin-create-user-config :initarg
                         :admin-create-user-config :initform common-lisp:nil
                         :type
                         (common-lisp:or admin-create-user-config-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-admin-create-user-config
                         :shape "AdminCreateUserConfigType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-pool-add-ons :initarg :user-pool-add-ons
                         :initform common-lisp:nil :type
                         (common-lisp:or user-pool-add-ons-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-user-pool-add-ons :shape
                         "UserPoolAddOnsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username-configuration :initarg
                         :username-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or username-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-username-configuration
                         :shape "UsernameConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-user-pool-type-arn :shape "ArnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-recovery-setting :initarg
                         :account-recovery-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or account-recovery-setting-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-pool-type-account-recovery-setting
                         :shape "AccountRecoverySettingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-pool-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-pool-type 'make-user-pool-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "LambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-attributes))
      (common-lisp:list
       (common-lisp:cons "SchemaAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-verified-attributes))
      (common-lisp:list
       (common-lisp:cons "AutoVerifiedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-attributes))
      (common-lisp:list
       (common-lisp:cons "AliasAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-attributes))
      (common-lisp:list
       (common-lisp:cons "UsernameAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-verification-message))
      (common-lisp:list
       (common-lisp:cons "SmsVerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-verification-message))
      (common-lisp:list
       (common-lisp:cons "EmailVerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-verification-subject))
      (common-lisp:list
       (common-lisp:cons "EmailVerificationSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message-template))
      (common-lisp:list
       (common-lisp:cons "VerificationMessageTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-authentication-message))
      (common-lisp:list
       (common-lisp:cons "SmsAuthenticationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attribute-update-settings))
      (common-lisp:list
       (common-lisp:cons "UserAttributeUpdateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-configuration))
      (common-lisp:list
       (common-lisp:cons "MfaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-number-of-users))
      (common-lisp:list
       (common-lisp:cons "EstimatedNumberOfUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-configuration))
      (common-lisp:list
       (common-lisp:cons "EmailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-configuration))
      (common-lisp:list
       (common-lisp:cons "SmsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-tags))
      (common-lisp:list
       (common-lisp:cons "UserPoolTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sms-configuration-failure))
      (common-lisp:list
       (common-lisp:cons "SmsConfigurationFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-configuration-failure))
      (common-lisp:list
       (common-lisp:cons "EmailConfigurationFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain))
      (common-lisp:list
       (common-lisp:cons "CustomDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-create-user-config))
      (common-lisp:list
       (common-lisp:cons "AdminCreateUserConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-add-ons))
      (common-lisp:list
       (common-lisp:cons "UserPoolAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'username-configuration))
      (common-lisp:list
       (common-lisp:cons "UsernameConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-recovery-setting))
      (common-lisp:list
       (common-lisp:cons "AccountRecoverySetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-pool-type))
   common-lisp:nil))
(common-lisp:deftype user-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-type common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or username-type common-lisp:null)
                         :accessor struct-shape-user-type-username :shape
                         "UsernameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list-type common-lisp:null)
                         :accessor struct-shape-user-type-attributes :shape
                         "AttributeListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-create-date :initarg :user-create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-user-type-user-create-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-last-modified-date :initarg
                         :user-last-modified-date :initform common-lisp:nil
                         :type (common-lisp:or date-type common-lisp:null)
                         :accessor
                         struct-shape-user-type-user-last-modified-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-user-type-enabled :shape
                         "BooleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-status :initarg :user-status :initform
                         common-lisp:nil :type
                         (common-lisp:or user-status-type common-lisp:null)
                         :accessor struct-shape-user-type-user-status :shape
                         "UserStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mfaoptions :initarg :mfaoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or mfaoption-list-type common-lisp:null)
                         :accessor struct-shape-user-type-mfaoptions :shape
                         "MFAOptionListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-type 'make-user-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-create-date))
      (common-lisp:list
       (common-lisp:cons "UserCreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "UserLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-status))
      (common-lisp:list
       (common-lisp:cons "UserStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfaoptions))
      (common-lisp:list
       (common-lisp:cons "MFAOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-type))
   common-lisp:nil))
(common-lisp:deftype username-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype username-attributes-list-type ()
   '(trivial-types:proper-list username-attribute-type))
 (common-lisp:defun make-username-attributes-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list username-attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass username-configuration-type common-lisp:nil
                       ((case-sensitive :initarg :case-sensitive :initform
                         (common-lisp:error ":case-sensitive is required")
                         :type
                         (common-lisp:or wrapped-boolean-type common-lisp:null)
                         :accessor
                         struct-shape-username-configuration-type-case-sensitive
                         :shape "WrappedBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-username-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'username-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'username-configuration-type
                    'make-username-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          username-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          username-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-sensitive))
      (common-lisp:list
       (common-lisp:cons "CaseSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          username-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition username-exists-exception
     (cognito-idp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       username-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'username-exists-exception
                    'username-exists-exception-message)))
(common-lisp:deftype username-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype users-list-type ()
   '(trivial-types:proper-list user-type))
 (common-lisp:defun make-users-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass verification-message-template-type common-lisp:nil
                       ((sms-message :initarg :sms-message :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verification-message-template-type-sms-message
                         :shape "SmsVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-message :initarg :email-message :initform
                         common-lisp:nil :type
                         (common-lisp:or email-verification-message-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verification-message-template-type-email-message
                         :shape "EmailVerificationMessageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-subject :initarg :email-subject :initform
                         common-lisp:nil :type
                         (common-lisp:or email-verification-subject-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verification-message-template-type-email-subject
                         :shape "EmailVerificationSubjectType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-message-by-link :initarg :email-message-by-link
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          email-verification-message-by-link-type
                          common-lisp:null)
                         :accessor
                         struct-shape-verification-message-template-type-email-message-by-link
                         :shape "EmailVerificationMessageByLinkType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-subject-by-link :initarg :email-subject-by-link
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          email-verification-subject-by-link-type
                          common-lisp:null)
                         :accessor
                         struct-shape-verification-message-template-type-email-subject-by-link
                         :shape "EmailVerificationSubjectByLinkType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-email-option :initarg :default-email-option
                         :initform common-lisp:nil :type
                         (common-lisp:or default-email-option-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verification-message-template-type-default-email-option
                         :shape "DefaultEmailOptionType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verification-message-template-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verification-message-template-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verification-message-template-type
                    'make-verification-message-template-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verification-message-template-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verification-message-template-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-message))
      (common-lisp:list
       (common-lisp:cons "SmsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-subject))
      (common-lisp:list
       (common-lisp:cons "EmailSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-message-by-link))
      (common-lisp:list
       (common-lisp:cons "EmailMessageByLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-subject-by-link))
      (common-lisp:list
       (common-lisp:cons "EmailSubjectByLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-email-option))
      (common-lisp:list
       (common-lisp:cons "DefaultEmailOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verification-message-template-type))
   common-lisp:nil))
(common-lisp:deftype verified-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype verified-attributes-list-type ()
   '(trivial-types:proper-list verified-attribute-type))
 (common-lisp:defun make-verified-attributes-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list verified-attribute-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass verify-software-token-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-verify-software-token-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-verify-software-token-request-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-code :initarg :user-code :initform
                         (common-lisp:error ":user-code is required") :type
                         (common-lisp:or software-token-mfauser-code-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verify-software-token-request-user-code
                         :shape "SoftwareTokenMFAUserCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (friendly-device-name :initarg :friendly-device-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string-type common-lisp:null)
                         :accessor
                         struct-shape-verify-software-token-request-friendly-device-name
                         :shape "StringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-software-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-software-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-software-token-request
                    'make-verify-software-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-software-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-software-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-code))
      (common-lisp:list
       (common-lisp:cons "UserCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'friendly-device-name))
      (common-lisp:list
       (common-lisp:cons "FriendlyDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-software-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-software-token-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or verify-software-token-response-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verify-software-token-response-status
                         :shape "VerifySoftwareTokenResponseType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session-type common-lisp:null)
                         :accessor
                         struct-shape-verify-software-token-response-session
                         :shape "SessionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-software-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-software-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-software-token-response
                    'make-verify-software-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-software-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-software-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-software-token-response))
   common-lisp:nil))
(common-lisp:deftype verify-software-token-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass verify-user-attribute-request common-lisp:nil
                       ((access-token :initarg :access-token :initform
                         (common-lisp:error ":access-token is required") :type
                         (common-lisp:or token-model-type common-lisp:null)
                         :accessor
                         struct-shape-verify-user-attribute-request-access-token
                         :shape "TokenModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type
                         (common-lisp:or attribute-name-type common-lisp:null)
                         :accessor
                         struct-shape-verify-user-attribute-request-attribute-name
                         :shape "AttributeNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or confirmation-code-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-verify-user-attribute-request-code :shape
                         "ConfirmationCodeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-user-attribute-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-user-attribute-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-user-attribute-request
                    'make-verify-user-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-user-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-user-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-user-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-user-attribute-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-user-attribute-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-user-attribute-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-user-attribute-response
                    'make-verify-user-attribute-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-user-attribute-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-user-attribute-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-user-attribute-response))
   common-lisp:nil))
(common-lisp:deftype wrapped-boolean-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun add-custom-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id custom-attributes)
   (common-lisp:declare (common-lisp:ignorable user-pool-id custom-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-custom-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddCustomAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-custom-attributes))
(common-lisp:progn
 (common-lisp:defun admin-add-user-to-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username group-name)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-add-user-to-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminAddUserToGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-add-user-to-group))
(common-lisp:progn
 (common-lisp:defun admin-confirm-sign-up
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-confirm-sign-up-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminConfirmSignUp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-confirm-sign-up))
(common-lisp:progn
 (common-lisp:defun admin-create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username user-attributes
                     validation-data temporary-password force-alias-creation
                     message-action desired-delivery-mediums client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username user-attributes
     validation-data temporary-password force-alias-creation message-action
     desired-delivery-mediums client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminCreateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-create-user))
(common-lisp:progn
 (common-lisp:defun admin-delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username)
   (common-lisp:declare (common-lisp:ignorable user-pool-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminDeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-delete-user))
(common-lisp:progn
 (common-lisp:defun admin-delete-user-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username
                     user-attribute-names)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username user-attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-delete-user-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminDeleteUserAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-delete-user-attributes))
(common-lisp:progn
 (common-lisp:defun admin-disable-provider-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id user)
   (common-lisp:declare (common-lisp:ignorable user-pool-id user))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-disable-provider-for-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminDisableProviderForUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-disable-provider-for-user))
(common-lisp:progn
 (common-lisp:defun admin-disable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username)
   (common-lisp:declare (common-lisp:ignorable user-pool-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-disable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminDisableUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-disable-user))
(common-lisp:progn
 (common-lisp:defun admin-enable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username)
   (common-lisp:declare (common-lisp:ignorable user-pool-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-enable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminEnableUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-enable-user))
(common-lisp:progn
 (common-lisp:defun admin-forget-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username device-key)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username device-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-forget-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminForgetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-forget-device))
(common-lisp:progn
 (common-lisp:defun admin-get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-key user-pool-id username)
   (common-lisp:declare
    (common-lisp:ignorable device-key user-pool-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminGetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-get-device))
(common-lisp:progn
 (common-lisp:defun admin-get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username)
   (common-lisp:declare (common-lisp:ignorable user-pool-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminGetUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-get-user))
(common-lisp:progn
 (common-lisp:defun admin-initiate-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id auth-flow
                     auth-parameters client-metadata analytics-metadata
                     context-data)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id client-id auth-flow auth-parameters
     client-metadata analytics-metadata context-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-initiate-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminInitiateAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-initiate-auth))
(common-lisp:progn
 (common-lisp:defun admin-link-provider-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id destination-user
                     source-user)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id destination-user source-user))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-link-provider-for-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminLinkProviderForUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-link-provider-for-user))
(common-lisp:progn
 (common-lisp:defun admin-list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username limit
                     pagination-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username limit pagination-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-list-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminListDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-list-devices))
(common-lisp:progn
 (common-lisp:defun admin-list-groups-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key username user-pool-id limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable username user-pool-id limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-list-groups-for-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminListGroupsForUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-list-groups-for-user))
(common-lisp:progn
 (common-lisp:defun admin-list-user-auth-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-list-user-auth-events-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminListUserAuthEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-list-user-auth-events))
(common-lisp:progn
 (common-lisp:defun admin-remove-user-from-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username group-name)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-remove-user-from-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminRemoveUserFromGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-remove-user-from-group))
(common-lisp:progn
 (common-lisp:defun admin-reset-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-reset-user-password-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminResetUserPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-reset-user-password))
(common-lisp:progn
 (common-lisp:defun admin-respond-to-auth-challenge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id challenge-name
                     challenge-responses session analytics-metadata
                     context-data client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id client-id challenge-name
     challenge-responses session analytics-metadata context-data
     client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-respond-to-auth-challenge-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminRespondToAuthChallenge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-respond-to-auth-challenge))
(common-lisp:progn
 (common-lisp:defun admin-set-user-mfapreference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key smsmfa-settings
                     software-token-mfa-settings username user-pool-id)
   (common-lisp:declare
    (common-lisp:ignorable smsmfa-settings software-token-mfa-settings username
     user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-set-user-mfapreference-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminSetUserMFAPreference"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-set-user-mfapreference))
(common-lisp:progn
 (common-lisp:defun admin-set-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username password permanent)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username password permanent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-set-user-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminSetUserPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-set-user-password))
(common-lisp:progn
 (common-lisp:defun admin-set-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username mfaoptions)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username mfaoptions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-admin-set-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminSetUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-set-user-settings))
(common-lisp:progn
 (common-lisp:defun admin-update-auth-event-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username event-id
                     feedback-value)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username event-id feedback-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-update-auth-event-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminUpdateAuthEventFeedback"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-update-auth-event-feedback))
(common-lisp:progn
 (common-lisp:defun admin-update-device-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username device-key
                     device-remembered-status)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username device-key
     device-remembered-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-update-device-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminUpdateDeviceStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-update-device-status))
(common-lisp:progn
 (common-lisp:defun admin-update-user-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username user-attributes
                     client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username user-attributes
     client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-update-user-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminUpdateUserAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-update-user-attributes))
(common-lisp:progn
 (common-lisp:defun admin-user-global-sign-out
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username)
   (common-lisp:declare (common-lisp:ignorable user-pool-id username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-admin-user-global-sign-out-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AdminUserGlobalSignOut"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'admin-user-global-sign-out))
(common-lisp:progn
 (common-lisp:defun associate-software-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token session)
   (common-lisp:declare (common-lisp:ignorable access-token session))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-software-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateSoftwareToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-software-token))
(common-lisp:progn
 (common-lisp:defun change-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key previous-password proposed-password
                     access-token)
   (common-lisp:declare
    (common-lisp:ignorable previous-password proposed-password access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-change-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ChangePassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'change-password))
(common-lisp:progn
 (common-lisp:defun confirm-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token device-key
                     device-secret-verifier-config device-name)
   (common-lisp:declare
    (common-lisp:ignorable access-token device-key
     device-secret-verifier-config device-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-device))
(common-lisp:progn
 (common-lisp:defun confirm-forgot-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id secret-hash username
                     confirmation-code password analytics-metadata
                     user-context-data client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable client-id secret-hash username confirmation-code
     password analytics-metadata user-context-data client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-forgot-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmForgotPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-forgot-password))
(common-lisp:progn
 (common-lisp:defun confirm-sign-up
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id secret-hash username
                     confirmation-code force-alias-creation analytics-metadata
                     user-context-data client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable client-id secret-hash username confirmation-code
     force-alias-creation analytics-metadata user-context-data
     client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-sign-up-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmSignUp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-sign-up))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-pool-id description
                     role-arn precedence)
   (common-lisp:declare
    (common-lisp:ignorable group-name user-pool-id description role-arn
     precedence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id provider-name provider-type
                     provider-details attribute-mapping idp-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id provider-name provider-type
     provider-details attribute-mapping idp-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-identity-provider))
(common-lisp:progn
 (common-lisp:defun create-resource-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id identifier name scopes)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id identifier name scopes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateResourceServer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resource-server))
(common-lisp:progn
 (common-lisp:defun create-user-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name user-pool-id
                     cloud-watch-logs-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable job-name user-pool-id cloud-watch-logs-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-import-job))
(common-lisp:progn
 (common-lisp:defun create-user-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pool-name policies deletion-protection
                     lambda-config auto-verified-attributes alias-attributes
                     username-attributes sms-verification-message
                     email-verification-message email-verification-subject
                     verification-message-template sms-authentication-message
                     mfa-configuration user-attribute-update-settings
                     device-configuration email-configuration sms-configuration
                     user-pool-tags admin-create-user-config schema
                     user-pool-add-ons username-configuration
                     account-recovery-setting)
   (common-lisp:declare
    (common-lisp:ignorable pool-name policies deletion-protection lambda-config
     auto-verified-attributes alias-attributes username-attributes
     sms-verification-message email-verification-message
     email-verification-subject verification-message-template
     sms-authentication-message mfa-configuration
     user-attribute-update-settings device-configuration email-configuration
     sms-configuration user-pool-tags admin-create-user-config schema
     user-pool-add-ons username-configuration account-recovery-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-pool))
(common-lisp:progn
 (common-lisp:defun create-user-pool-client
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-name generate-secret
                     refresh-token-validity access-token-validity
                     id-token-validity token-validity-units read-attributes
                     write-attributes explicit-auth-flows
                     supported-identity-providers callback-urls logout-urls
                     default-redirect-uri allowed-oauth-flows
                     allowed-oauth-scopes allowed-oauth-flows-user-pool-client
                     analytics-configuration prevent-user-existence-errors
                     enable-token-revocation
                     enable-propagate-additional-user-context-data
                     auth-session-validity)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id client-name generate-secret
     refresh-token-validity access-token-validity id-token-validity
     token-validity-units read-attributes write-attributes explicit-auth-flows
     supported-identity-providers callback-urls logout-urls
     default-redirect-uri allowed-oauth-flows allowed-oauth-scopes
     allowed-oauth-flows-user-pool-client analytics-configuration
     prevent-user-existence-errors enable-token-revocation
     enable-propagate-additional-user-context-data auth-session-validity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-pool-client-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserPoolClient"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-pool-client))
(common-lisp:progn
 (common-lisp:defun create-user-pool-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain user-pool-id custom-domain-config)
   (common-lisp:declare
    (common-lisp:ignorable domain user-pool-id custom-domain-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-pool-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserPoolDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-pool-domain))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-pool-id)
   (common-lisp:declare (common-lisp:ignorable group-name user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id provider-name)
   (common-lisp:declare (common-lisp:ignorable user-pool-id provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-identity-provider))
(common-lisp:progn
 (common-lisp:defun delete-resource-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id identifier)
   (common-lisp:declare (common-lisp:ignorable user-pool-id identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourceServer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-server))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token)
   (common-lisp:declare (common-lisp:ignorable access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-attribute-names access-token)
   (common-lisp:declare
    (common-lisp:ignorable user-attribute-names access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-attributes))
(common-lisp:progn
 (common-lisp:defun delete-user-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-pool))
(common-lisp:progn
 (common-lisp:defun delete-user-pool-client
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-pool-client-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPoolClient"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-pool-client))
(common-lisp:progn
 (common-lisp:defun delete-user-pool-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain user-pool-id)
   (common-lisp:declare (common-lisp:ignorable domain user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-pool-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPoolDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-pool-domain))
(common-lisp:progn
 (common-lisp:defun describe-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id provider-name)
   (common-lisp:declare (common-lisp:ignorable user-pool-id provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-identity-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-identity-provider))
(common-lisp:progn
 (common-lisp:defun describe-resource-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id identifier)
   (common-lisp:declare (common-lisp:ignorable user-pool-id identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResourceServer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-resource-server))
(common-lisp:progn
 (common-lisp:defun describe-risk-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-risk-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRiskConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-risk-configuration))
(common-lisp:progn
 (common-lisp:defun describe-user-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id job-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user-import-job))
(common-lisp:progn
 (common-lisp:defun describe-user-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user-pool))
(common-lisp:progn
 (common-lisp:defun describe-user-pool-client
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-user-pool-client-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserPoolClient"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user-pool-client))
(common-lisp:progn
 (common-lisp:defun describe-user-pool-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain)
   (common-lisp:declare (common-lisp:ignorable domain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-user-pool-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserPoolDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user-pool-domain))
(common-lisp:progn
 (common-lisp:defun forget-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token device-key)
   (common-lisp:declare (common-lisp:ignorable access-token device-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-forget-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ForgetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'forget-device))
(common-lisp:progn
 (common-lisp:defun forgot-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id secret-hash user-context-data
                     username analytics-metadata client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable client-id secret-hash user-context-data username
     analytics-metadata client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-forgot-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ForgotPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'forgot-password))
(common-lisp:progn
 (common-lisp:defun get-csvheader
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-csvheader-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCSVHeader"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-csvheader))
(common-lisp:progn
 (common-lisp:defun get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-key access-token)
   (common-lisp:declare (common-lisp:ignorable device-key access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-pool-id)
   (common-lisp:declare (common-lisp:ignorable group-name user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-identity-provider-by-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id idp-identifier)
   (common-lisp:declare (common-lisp:ignorable user-pool-id idp-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-provider-by-identifier-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetIdentityProviderByIdentifier"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-identity-provider-by-identifier))
(common-lisp:progn
 (common-lisp:defun get-log-delivery-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-log-delivery-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLogDeliveryConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-log-delivery-configuration))
(common-lisp:progn
 (common-lisp:defun get-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-signing-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSigningCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-signing-certificate))
(common-lisp:progn
 (common-lisp:defun get-uicustomization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-uicustomization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUICustomization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-uicustomization))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token)
   (common-lisp:declare (common-lisp:ignorable access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-user-attribute-verification-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token attribute-name
                     client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable access-token attribute-name client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-attribute-verification-code-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserAttributeVerificationCode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-attribute-verification-code))
(common-lisp:progn
 (common-lisp:defun get-user-pool-mfa-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-pool-mfa-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserPoolMfaConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-pool-mfa-config))
(common-lisp:progn
 (common-lisp:defun global-sign-out
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token)
   (common-lisp:declare (common-lisp:ignorable access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-global-sign-out-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GlobalSignOut"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'global-sign-out))
(common-lisp:progn
 (common-lisp:defun initiate-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auth-flow auth-parameters client-metadata
                     client-id analytics-metadata user-context-data)
   (common-lisp:declare
    (common-lisp:ignorable auth-flow auth-parameters client-metadata client-id
     analytics-metadata user-context-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-initiate-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "InitiateAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'initiate-auth))
(common-lisp:progn
 (common-lisp:defun list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token limit pagination-token)
   (common-lisp:declare
    (common-lisp:ignorable access-token limit pagination-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-devices))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id limit next-token)
   (common-lisp:declare (common-lisp:ignorable user-pool-id limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-identity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-providers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListIdentityProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identity-providers))
(common-lisp:progn
 (common-lisp:defun list-resource-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceServers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resource-servers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-user-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id max-results
                     pagination-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id max-results pagination-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserImportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-user-pool-clients
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-pool-clients-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserPoolClients"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-pool-clients))
(common-lisp:progn
 (common-lisp:defun list-user-pools
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-pools-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserPools"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-pools))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id attributes-to-get limit
                     pagination-token filter)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id attributes-to-get limit
     pagination-token filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-users-in-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id group-name limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id group-name limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-in-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUsersInGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-users-in-group))
(common-lisp:progn
 (common-lisp:defun resend-confirmation-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id secret-hash user-context-data
                     username analytics-metadata client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable client-id secret-hash user-context-data username
     analytics-metadata client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resend-confirmation-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResendConfirmationCode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resend-confirmation-code))
(common-lisp:progn
 (common-lisp:defun respond-to-auth-challenge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id challenge-name session
                     challenge-responses analytics-metadata user-context-data
                     client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable client-id challenge-name session challenge-responses
     analytics-metadata user-context-data client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-respond-to-auth-challenge-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RespondToAuthChallenge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'respond-to-auth-challenge))
(common-lisp:progn
 (common-lisp:defun revoke-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token client-id client-secret)
   (common-lisp:declare (common-lisp:ignorable token client-id client-secret))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-token))
(common-lisp:progn
 (common-lisp:defun set-log-delivery-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id log-configurations)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id log-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-log-delivery-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetLogDeliveryConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-log-delivery-configuration))
(common-lisp:progn
 (common-lisp:defun set-risk-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id
                     compromised-credentials-risk-configuration
                     account-takeover-risk-configuration
                     risk-exception-configuration)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id client-id
     compromised-credentials-risk-configuration
     account-takeover-risk-configuration risk-exception-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-risk-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetRiskConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-risk-configuration))
(common-lisp:progn
 (common-lisp:defun set-uicustomization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id css image-file)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id client-id css image-file))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-uicustomization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetUICustomization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-uicustomization))
(common-lisp:progn
 (common-lisp:defun set-user-mfapreference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key smsmfa-settings
                     software-token-mfa-settings access-token)
   (common-lisp:declare
    (common-lisp:ignorable smsmfa-settings software-token-mfa-settings
     access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-user-mfapreference-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetUserMFAPreference"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-user-mfapreference))
(common-lisp:progn
 (common-lisp:defun set-user-pool-mfa-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id sms-mfa-configuration
                     software-token-mfa-configuration mfa-configuration)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id sms-mfa-configuration
     software-token-mfa-configuration mfa-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-user-pool-mfa-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetUserPoolMfaConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-user-pool-mfa-config))
(common-lisp:progn
 (common-lisp:defun set-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token mfaoptions)
   (common-lisp:declare (common-lisp:ignorable access-token mfaoptions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetUserSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-user-settings))
(common-lisp:progn
 (common-lisp:defun sign-up
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id secret-hash username password
                     user-attributes validation-data analytics-metadata
                     user-context-data client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable client-id secret-hash username password
     user-attributes validation-data analytics-metadata user-context-data
     client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-sign-up-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "SignUp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'sign-up))
(common-lisp:progn
 (common-lisp:defun start-user-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id job-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-user-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartUserImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-user-import-job))
(common-lisp:progn
 (common-lisp:defun stop-user-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id job-id)
   (common-lisp:declare (common-lisp:ignorable user-pool-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-user-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopUserImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-user-import-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-auth-event-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id username event-id
                     feedback-token feedback-value)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id username event-id feedback-token
     feedback-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-auth-event-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAuthEventFeedback"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-auth-event-feedback))
(common-lisp:progn
 (common-lisp:defun update-device-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token device-key
                     device-remembered-status)
   (common-lisp:declare
    (common-lisp:ignorable access-token device-key device-remembered-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDeviceStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-device-status))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-pool-id description
                     role-arn precedence)
   (common-lisp:declare
    (common-lisp:ignorable group-name user-pool-id description role-arn
     precedence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id provider-name
                     provider-details attribute-mapping idp-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id provider-name provider-details
     attribute-mapping idp-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateIdentityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-identity-provider))
(common-lisp:progn
 (common-lisp:defun update-resource-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id identifier name scopes)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id identifier name scopes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateResourceServer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resource-server))
(common-lisp:progn
 (common-lisp:defun update-user-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-attributes access-token
                     client-metadata)
   (common-lisp:declare
    (common-lisp:ignorable user-attributes access-token client-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-attributes))
(common-lisp:progn
 (common-lisp:defun update-user-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id policies deletion-protection
                     lambda-config auto-verified-attributes
                     sms-verification-message email-verification-message
                     email-verification-subject verification-message-template
                     sms-authentication-message user-attribute-update-settings
                     mfa-configuration device-configuration email-configuration
                     sms-configuration user-pool-tags admin-create-user-config
                     user-pool-add-ons account-recovery-setting)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id policies deletion-protection
     lambda-config auto-verified-attributes sms-verification-message
     email-verification-message email-verification-subject
     verification-message-template sms-authentication-message
     user-attribute-update-settings mfa-configuration device-configuration
     email-configuration sms-configuration user-pool-tags
     admin-create-user-config user-pool-add-ons account-recovery-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-pool))
(common-lisp:progn
 (common-lisp:defun update-user-pool-client
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-pool-id client-id client-name
                     refresh-token-validity access-token-validity
                     id-token-validity token-validity-units read-attributes
                     write-attributes explicit-auth-flows
                     supported-identity-providers callback-urls logout-urls
                     default-redirect-uri allowed-oauth-flows
                     allowed-oauth-scopes allowed-oauth-flows-user-pool-client
                     analytics-configuration prevent-user-existence-errors
                     enable-token-revocation
                     enable-propagate-additional-user-context-data
                     auth-session-validity)
   (common-lisp:declare
    (common-lisp:ignorable user-pool-id client-id client-name
     refresh-token-validity access-token-validity id-token-validity
     token-validity-units read-attributes write-attributes explicit-auth-flows
     supported-identity-providers callback-urls logout-urls
     default-redirect-uri allowed-oauth-flows allowed-oauth-scopes
     allowed-oauth-flows-user-pool-client analytics-configuration
     prevent-user-existence-errors enable-token-revocation
     enable-propagate-additional-user-context-data auth-session-validity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-pool-client-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserPoolClient"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-pool-client))
(common-lisp:progn
 (common-lisp:defun update-user-pool-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain user-pool-id custom-domain-config)
   (common-lisp:declare
    (common-lisp:ignorable domain user-pool-id custom-domain-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-pool-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserPoolDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-pool-domain))
(common-lisp:progn
 (common-lisp:defun verify-software-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token session user-code
                     friendly-device-name)
   (common-lisp:declare
    (common-lisp:ignorable access-token session user-code
     friendly-device-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-software-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifySoftwareToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'verify-software-token))
(common-lisp:progn
 (common-lisp:defun verify-user-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-token attribute-name code)
   (common-lisp:declare
    (common-lisp:ignorable access-token attribute-name code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-user-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-idp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyUserAttribute"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'verify-user-attribute))
