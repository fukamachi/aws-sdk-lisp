;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sagemaker-geospatial/api
  (:use)
  (:nicknames #:aws/sagemaker-geospatial)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sagemaker-geospatial/api)
(common-lisp:progn
 (common-lisp:define-condition sagemaker-geospatial-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sagemaker-geospatial-error))
(common-lisp:progn
 (common-lisp:defclass sagemaker-geospatial-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "sagemaker-geospatial"
                        :api-version "2020-05-27" :host-prefix
                        "sagemaker-geospatial" :signing-name
                        "sagemaker-geospatial" :global-host common-lisp:nil))
 (common-lisp:export 'sagemaker-geospatial-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype algorithm-name-cloud-removal () 'common-lisp:string)
(common-lisp:deftype algorithm-name-geo-mosaic () 'common-lisp:string)
(common-lisp:deftype algorithm-name-resampling () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass area-of-interest common-lisp:nil
                       ((area-of-interest-geometry :initarg
                         :area-of-interest-geometry :initform common-lisp:nil
                         :type
                         (common-lisp:or area-of-interest-geometry
                                         common-lisp:null)
                         :accessor
                         struct-shape-area-of-interest-area-of-interest-geometry
                         :shape "AreaOfInterestGeometry" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-area-of-interest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'area-of-interest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'area-of-interest 'make-area-of-interest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input area-of-interest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input area-of-interest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'area-of-interest-geometry))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterestGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input area-of-interest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass area-of-interest-geometry common-lisp:nil
                       ((multi-polygon-geometry :initarg
                         :multi-polygon-geometry :initform common-lisp:nil
                         :type
                         (common-lisp:or multi-polygon-geometry-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-area-of-interest-geometry-multi-polygon-geometry
                         :shape "MultiPolygonGeometryInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (polygon-geometry :initarg :polygon-geometry :initform
                         common-lisp:nil :type
                         (common-lisp:or polygon-geometry-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-area-of-interest-geometry-polygon-geometry
                         :shape "PolygonGeometryInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-area-of-interest-geometry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'area-of-interest-geometry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'area-of-interest-geometry
                    'make-area-of-interest-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          area-of-interest-geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          area-of-interest-geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-polygon-geometry))
      (common-lisp:list
       (common-lisp:cons "MultiPolygonGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polygon-geometry))
      (common-lisp:list
       (common-lisp:cons "PolygonGeometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          area-of-interest-geometry))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-value common-lisp:nil
                       ((href :initarg :href :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-asset-value-href :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-value 'make-asset-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'href))
      (common-lisp:list
       (common-lisp:cons "Href"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assets-map () 'common-lisp:hash-table)
 (common-lisp:defun make-assets-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass band-math-config-input common-lisp:nil
                       ((custom-indices :initarg :custom-indices :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-indices-input common-lisp:null)
                         :accessor
                         struct-shape-band-math-config-input-custom-indices
                         :shape "CustomIndicesInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predefined-indices :initarg :predefined-indices
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-band-math-config-input-predefined-indices
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-band-math-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'band-math-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'band-math-config-input 'make-band-math-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          band-math-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          band-math-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-indices))
      (common-lisp:list
       (common-lisp:cons "CustomIndices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predefined-indices))
      (common-lisp:list
       (common-lisp:cons "PredefinedIndices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          band-math-config-input))
   common-lisp:nil))
(common-lisp:deftype binary-file ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cloud-masking-config-input common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-masking-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-masking-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-masking-config-input
                    'make-cloud-masking-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-masking-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-masking-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-masking-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-removal-config-input common-lisp:nil
                       ((algorithm-name :initarg :algorithm-name :initform
                         common-lisp:nil :type
                         (common-lisp:or algorithm-name-cloud-removal
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-removal-config-input-algorithm-name
                         :shape "AlgorithmNameCloudRemoval" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (interpolation-value :initarg :interpolation-value
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-removal-config-input-interpolation-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-bands :initarg :target-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-cloud-removal-config-input-target-bands
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-removal-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-removal-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-removal-config-input
                    'make-cloud-removal-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-removal-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-removal-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolation-value))
      (common-lisp:list
       (common-lisp:cons "InterpolationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-removal-config-input))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defclass custom-indices-input common-lisp:nil
                       ((operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or operations-list-input
                                         common-lisp:null)
                         :accessor struct-shape-custom-indices-input-operations
                         :shape "OperationsListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-indices-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-indices-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-indices-input 'make-custom-indices-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-indices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-indices-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-indices-input))
   common-lisp:nil))
(common-lisp:deftype data-collection-arn () 'common-lisp:string)
(common-lisp:deftype data-collection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-collections-list ()
   '(trivial-types:proper-list raster-data-collection-metadata))
 (common-lisp:defun make-data-collections-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            raster-data-collection-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-earth-observation-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-earth-observation-job-input-arn
                         :shape "EarthObservationJobArn" :location "uri"
                         :location-name "Arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-earth-observation-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-earth-observation-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-earth-observation-job-input
                    'make-delete-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-earth-observation-job-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-earth-observation-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-earth-observation-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-earth-observation-job-output
                    'make-delete-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vector-enrichment-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-vector-enrichment-job-input-arn
                         :shape "VectorEnrichmentJobArn" :location "uri"
                         :location-name "Arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vector-enrichment-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vector-enrichment-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vector-enrichment-job-input
                    'make-delete-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vector-enrichment-job-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vector-enrichment-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vector-enrichment-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vector-enrichment-job-output
                    'make-delete-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype earth-observation-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass earth-observation-job-error-details common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-earth-observation-job-error-details-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or earth-observation-job-error-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-earth-observation-job-error-details-type
                         :shape "EarthObservationJobErrorType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-earth-observation-job-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'earth-observation-job-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'earth-observation-job-error-details
                    'make-earth-observation-job-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          earth-observation-job-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          earth-observation-job-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          earth-observation-job-error-details))
   common-lisp:nil))
(common-lisp:deftype earth-observation-job-error-type () 'common-lisp:string)
(common-lisp:deftype earth-observation-job-export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype earth-observation-job-list ()
   '(trivial-types:proper-list list-earth-observation-job-output-config))
 (common-lisp:defun make-earth-observation-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-earth-observation-job-output-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype earth-observation-job-output-bands ()
   '(trivial-types:proper-list output-band))
 (common-lisp:defun make-earth-observation-job-output-bands
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-band))
   aws-sdk/generator/shape::members))
(common-lisp:deftype earth-observation-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eo-cloud-cover-input common-lisp:nil
                       ((lower-bound :initarg :lower-bound :initform
                         (common-lisp:error ":lower-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-eo-cloud-cover-input-lower-bound :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         (common-lisp:error ":upper-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-eo-cloud-cover-input-upper-bound :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eo-cloud-cover-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eo-cloud-cover-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eo-cloud-cover-input 'make-eo-cloud-cover-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eo-cloud-cover-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eo-cloud-cover-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eo-cloud-cover-input))
   common-lisp:nil))
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-earth-observation-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-input-arn
                         :shape "EarthObservationJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          export-earth-observation-job-input-client-token-string
                          common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-input-client-token
                         :shape
                         "ExportEarthObservationJobInputClientTokenString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-input-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-source-images :initarg :export-source-images
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-export-earth-observation-job-input-export-source-images
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or output-config-input common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-input-output-config
                         :shape "OutputConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-earth-observation-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-earth-observation-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-earth-observation-job-input
                    'make-export-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-source-images))
      (common-lisp:list
       (common-lisp:cons "ExportSourceImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:deftype export-earth-observation-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-earth-observation-job-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-output-arn
                         :shape "EarthObservationJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-output-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-output-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-source-images :initarg :export-source-images
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-export-earth-observation-job-output-export-source-images
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         (common-lisp:error ":export-status is required") :type
                         (common-lisp:or earth-observation-job-export-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-output-export-status
                         :shape "EarthObservationJobExportStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or output-config-input common-lisp:null)
                         :accessor
                         struct-shape-export-earth-observation-job-output-output-config
                         :shape "OutputConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-earth-observation-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-earth-observation-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-earth-observation-job-output
                    'make-export-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-source-images))
      (common-lisp:list
       (common-lisp:cons "ExportSourceImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-error-details common-lisp:nil
                       ((export-results :initarg :export-results :initform
                         common-lisp:nil :type
                         (common-lisp:or export-error-details-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-error-details-export-results
                         :shape "ExportErrorDetailsOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (export-source-images :initarg :export-source-images
                         :initform common-lisp:nil :type
                         (common-lisp:or export-error-details-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-error-details-export-source-images
                         :shape "ExportErrorDetailsOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-error-details 'make-export-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-results))
      (common-lisp:list
       (common-lisp:cons "ExportResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-source-images))
      (common-lisp:list
       (common-lisp:cons "ExportSourceImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-error-details-output common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-export-error-details-output-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or export-error-type common-lisp:null)
                         :accessor
                         struct-shape-export-error-details-output-type :shape
                         "ExportErrorType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-error-details-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-error-details-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-error-details-output
                    'make-export-error-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-error-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-error-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-error-details-output))
   common-lisp:nil))
(common-lisp:deftype export-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-s3data-input common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-export-s3data-input-kms-key-id :shape
                         "KmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3uri :initarg :s3uri :initform
                         (common-lisp:error ":s3uri is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-export-s3data-input-s3uri :shape "S3Uri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-s3data-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-s3data-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-s3data-input 'make-export-s3data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-s3data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-s3data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-s3data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-vector-enrichment-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-input-arn
                         :shape "VectorEnrichmentJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          export-vector-enrichment-job-input-client-token-string
                          common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-input-client-token
                         :shape
                         "ExportVectorEnrichmentJobInputClientTokenString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-input-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or
                          export-vector-enrichment-job-output-config
                          common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-input-output-config
                         :shape "ExportVectorEnrichmentJobOutputConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-vector-enrichment-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-vector-enrichment-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-vector-enrichment-job-input
                    'make-export-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:deftype export-vector-enrichment-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-vector-enrichment-job-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-output-arn
                         :shape "VectorEnrichmentJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-output-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-output-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         (common-lisp:error ":export-status is required") :type
                         (common-lisp:or vector-enrichment-job-export-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-output-export-status
                         :shape "VectorEnrichmentJobExportStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-config :initarg :output-config :initform
                         (common-lisp:error ":output-config is required") :type
                         (common-lisp:or
                          export-vector-enrichment-job-output-config
                          common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-output-output-config
                         :shape "ExportVectorEnrichmentJobOutputConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-vector-enrichment-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-vector-enrichment-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-vector-enrichment-job-output
                    'make-export-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-vector-enrichment-job-output-config
                       common-lisp:nil
                       ((s3data :initarg :s3data :initform
                         (common-lisp:error ":s3data is required") :type
                         (common-lisp:or vector-enrichment-job-s3data
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-vector-enrichment-job-output-config-s3data
                         :shape "VectorEnrichmentJobS3Data" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-vector-enrichment-job-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-vector-enrichment-job-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-vector-enrichment-job-output-config
                    'make-export-vector-enrichment-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-vector-enrichment-job-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((maximum :initarg :maximum :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor struct-shape-filter-maximum :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum :initarg :minimum :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor struct-shape-filter-minimum :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "Minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass geo-mosaic-config-input common-lisp:nil
                       ((algorithm-name :initarg :algorithm-name :initform
                         common-lisp:nil :type
                         (common-lisp:or algorithm-name-geo-mosaic
                                         common-lisp:null)
                         :accessor
                         struct-shape-geo-mosaic-config-input-algorithm-name
                         :shape "AlgorithmNameGeoMosaic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-bands :initarg :target-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-geo-mosaic-config-input-target-bands
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-geo-mosaic-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'geo-mosaic-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'geo-mosaic-config-input 'make-geo-mosaic-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geo-mosaic-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geo-mosaic-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geo-mosaic-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass geometry common-lisp:nil
                       ((coordinates :initarg :coordinates :initform
                         (common-lisp:error ":coordinates is required") :type
                         (common-lisp:or linear-rings common-lisp:null)
                         :accessor struct-shape-geometry-coordinates :shape
                         "LinearRings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-geometry-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-geometry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'geometry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'geometry 'make-geometry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geometry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geometry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-earth-observation-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-input-arn
                         :shape "EarthObservationJobArn" :location "uri"
                         :location-name "Arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-earth-observation-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-earth-observation-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-earth-observation-job-input
                    'make-get-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-earth-observation-job-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-earth-observation-job-output-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform
                         (common-lisp:error ":duration-in-seconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-duration-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or earth-observation-job-error-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-error-details
                         :shape "EarthObservationJobErrorDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-error-details :initarg :export-error-details
                         :initform common-lisp:nil :type
                         (common-lisp:or export-error-details common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-export-error-details
                         :shape "ExportErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or earth-observation-job-export-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-export-status
                         :shape "EarthObservationJobExportStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-config :initarg :input-config :initform
                         (common-lisp:error ":input-config is required") :type
                         (common-lisp:or input-config-output common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-input-config
                         :shape "InputConfigOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-config :initarg :job-config :initform
                         (common-lisp:error ":job-config is required") :type
                         (common-lisp:or job-config-input common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-job-config
                         :shape "JobConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-get-earth-observation-job-output-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-earth-observation-job-output-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-bands :initarg :output-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or earth-observation-job-output-bands
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-output-bands
                         :shape "EarthObservationJobOutputBands" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or earth-observation-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-earth-observation-job-output-status
                         :shape "EarthObservationJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-earth-observation-job-output-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-earth-observation-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-earth-observation-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-earth-observation-job-output
                    'make-get-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-error-details))
      (common-lisp:list
       (common-lisp:cons "ExportErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bands))
      (common-lisp:list
       (common-lisp:cons "OutputBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-raster-data-collection-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or data-collection-arn common-lisp:null)
                         :accessor
                         struct-shape-get-raster-data-collection-input-arn
                         :shape "DataCollectionArn" :location "uri"
                         :location-name "Arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-raster-data-collection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-raster-data-collection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-raster-data-collection-input
                    'make-get-raster-data-collection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-raster-data-collection-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or data-collection-arn common-lisp:null)
                         :accessor
                         struct-shape-get-raster-data-collection-output-arn
                         :shape "DataCollectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-raster-data-collection-output-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description-page-url :initarg :description-page-url
                         :initform
                         (common-lisp:error
                          ":description-page-url is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-raster-data-collection-output-description-page-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-source-bands :initarg :image-source-bands
                         :initform
                         (common-lisp:error ":image-source-bands is required")
                         :type
                         (common-lisp:or image-source-band-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-raster-data-collection-output-image-source-bands
                         :shape "ImageSourceBandList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-raster-data-collection-output-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-filters :initarg :supported-filters
                         :initform
                         (common-lisp:error ":supported-filters is required")
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-get-raster-data-collection-output-supported-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-raster-data-collection-output-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-collection-type common-lisp:null)
                         :accessor
                         struct-shape-get-raster-data-collection-output-type
                         :shape "DataCollectionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-raster-data-collection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-raster-data-collection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-raster-data-collection-output
                    'make-get-raster-data-collection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'description-page-url))
      (common-lisp:list
       (common-lisp:cons "DescriptionPageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source-bands))
      (common-lisp:list
       (common-lisp:cons "ImageSourceBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-filters))
      (common-lisp:list
       (common-lisp:cons "SupportedFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-raster-data-collection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tile-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor struct-shape-get-tile-input-arn :shape
                         "EarthObservationJobArn" :location "querystring"
                         :location-name "Arn")
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-tile-input-execution-role-arn :shape
                         "ExecutionRoleArn" :location "querystring"
                         :location-name "ExecutionRoleArn")
                        (image-assets :initarg :image-assets :initform
                         (common-lisp:error ":image-assets is required") :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor struct-shape-get-tile-input-image-assets
                         :shape "StringListInput" :location "querystring"
                         :location-name "ImageAssets")
                        (image-mask :initarg :image-mask :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-tile-input-image-mask :shape
                         "Boolean" :location "querystring" :location-name
                         "ImageMask")
                        (output-data-type :initarg :output-data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or output-type common-lisp:null)
                         :accessor struct-shape-get-tile-input-output-data-type
                         :shape "OutputType" :location "querystring"
                         :location-name "OutputDataType")
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-tile-input-output-format :shape
                         "String" :location "querystring" :location-name
                         "OutputFormat")
                        (property-filters :initarg :property-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-tile-input-property-filters :shape
                         "String" :location "querystring" :location-name
                         "PropertyFilters")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or target-options common-lisp:null)
                         :accessor struct-shape-get-tile-input-target :shape
                         "TargetOptions" :location "querystring" :location-name
                         "Target")
                        (time-range-filter :initarg :time-range-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-tile-input-time-range-filter :shape
                         "String" :location "querystring" :location-name
                         "TimeRangeFilter")
                        (x :initarg :x :initform
                         (common-lisp:error ":x is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-tile-input-x :shape "Integer"
                         :location "uri" :location-name "x")
                        (y :initarg :y :initform
                         (common-lisp:error ":y is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-tile-input-y :shape "Integer"
                         :location "uri" :location-name "y")
                        (z :initarg :z :initform
                         (common-lisp:error ":z is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-tile-input-z :shape "Integer"
                         :location "uri" :location-name "z"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tile-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tile-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-tile-input 'make-get-tile-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tile-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tile-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tile-output common-lisp:nil
                       ((binary-file :initarg :binary-file :initform
                         common-lisp:nil :type
                         (common-lisp:or binary-file common-lisp:null)
                         :accessor struct-shape-get-tile-output-binary-file
                         :shape "BinaryFile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tile-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tile-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-tile-output 'make-get-tile-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binary-file))
      (common-lisp:list
       (common-lisp:cons "BinaryFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'binary-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input get-tile-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-vector-enrichment-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-input-arn
                         :shape "VectorEnrichmentJobArn" :location "uri"
                         :location-name "Arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vector-enrichment-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-vector-enrichment-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vector-enrichment-job-input
                    'make-get-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vector-enrichment-job-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-vector-enrichment-job-output-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform
                         (common-lisp:error ":duration-in-seconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-duration-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or vector-enrichment-job-error-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-error-details
                         :shape "VectorEnrichmentJobErrorDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-error-details :initarg :export-error-details
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          vector-enrichment-job-export-error-details
                          common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-export-error-details
                         :shape "VectorEnrichmentJobExportErrorDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or vector-enrichment-job-export-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-export-status
                         :shape "VectorEnrichmentJobExportStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-config :initarg :input-config :initform
                         (common-lisp:error ":input-config is required") :type
                         (common-lisp:or vector-enrichment-job-input-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-input-config
                         :shape "VectorEnrichmentJobInputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-config :initarg :job-config :initform
                         (common-lisp:error ":job-config is required") :type
                         (common-lisp:or vector-enrichment-job-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-job-config
                         :shape "VectorEnrichmentJobConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-get-vector-enrichment-job-output-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-vector-enrichment-job-output-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or vector-enrichment-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-status
                         :shape "VectorEnrichmentJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-get-vector-enrichment-job-output-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or vector-enrichment-job-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-vector-enrichment-job-output-type
                         :shape "VectorEnrichmentJobType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vector-enrichment-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-vector-enrichment-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vector-enrichment-job-output
                    'make-get-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-error-details))
      (common-lisp:list
       (common-lisp:cons "ExportErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "ExportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:deftype group-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-source-band-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-image-source-band-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-config-input common-lisp:nil
                       ((previous-earth-observation-job-arn :initarg
                         :previous-earth-observation-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-config-input-previous-earth-observation-job-arn
                         :shape "EarthObservationJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (raster-data-collection-query :initarg
                         :raster-data-collection-query :initform
                         common-lisp:nil :type
                         (common-lisp:or raster-data-collection-query-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-config-input-raster-data-collection-query
                         :shape "RasterDataCollectionQueryInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-config-input 'make-input-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-earth-observation-job-arn))
      (common-lisp:list
       (common-lisp:cons "PreviousEarthObservationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-query))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-config-output common-lisp:nil
                       ((previous-earth-observation-job-arn :initarg
                         :previous-earth-observation-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-config-output-previous-earth-observation-job-arn
                         :shape "EarthObservationJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (raster-data-collection-query :initarg
                         :raster-data-collection-query :initform
                         common-lisp:nil :type
                         (common-lisp:or raster-data-collection-query-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-config-output-raster-data-collection-query
                         :shape "RasterDataCollectionQueryOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-config-output 'make-input-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-earth-observation-job-arn))
      (common-lisp:list
       (common-lisp:cons "PreviousEarthObservationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-query))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-config-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       internal-server-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defclass item-source common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type (common-lisp:or assets-map common-lisp:null)
                         :accessor struct-shape-item-source-assets :shape
                         "AssetsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-time :initarg :date-time :initform
                         (common-lisp:error ":date-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-item-source-date-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (geometry :initarg :geometry :initform
                         (common-lisp:error ":geometry is required") :type
                         (common-lisp:or geometry common-lisp:null) :accessor
                         struct-shape-item-source-geometry :shape "Geometry"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-item-source-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or properties common-lisp:null) :accessor
                         struct-shape-item-source-properties :shape
                         "Properties" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-item-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'item-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'item-source 'make-item-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time))
      (common-lisp:list
       (common-lisp:cons "DateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geometry))
      (common-lisp:list
       (common-lisp:cons "Geometry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype item-source-list ()
   '(trivial-types:proper-list item-source))
 (common-lisp:defun make-item-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-config-input common-lisp:nil
                       ((band-math-config :initarg :band-math-config :initform
                         common-lisp:nil :type
                         (common-lisp:or band-math-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-band-math-config :shape
                         "BandMathConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-masking-config :initarg :cloud-masking-config
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-masking-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-cloud-masking-config
                         :shape "CloudMaskingConfigInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-removal-config :initarg :cloud-removal-config
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-removal-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-cloud-removal-config
                         :shape "CloudRemovalConfigInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (geo-mosaic-config :initarg :geo-mosaic-config
                         :initform common-lisp:nil :type
                         (common-lisp:or geo-mosaic-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-geo-mosaic-config :shape
                         "GeoMosaicConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (land-cover-segmentation-config :initarg
                         :land-cover-segmentation-config :initform
                         common-lisp:nil :type
                         (common-lisp:or land-cover-segmentation-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-land-cover-segmentation-config
                         :shape "LandCoverSegmentationConfigInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resampling-config :initarg :resampling-config
                         :initform common-lisp:nil :type
                         (common-lisp:or resampling-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-resampling-config :shape
                         "ResamplingConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-config :initarg :stack-config :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-config-input common-lisp:null)
                         :accessor struct-shape-job-config-input-stack-config
                         :shape "StackConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temporal-statistics-config :initarg
                         :temporal-statistics-config :initform common-lisp:nil
                         :type
                         (common-lisp:or temporal-statistics-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-temporal-statistics-config
                         :shape "TemporalStatisticsConfigInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (zonal-statistics-config :initarg
                         :zonal-statistics-config :initform common-lisp:nil
                         :type
                         (common-lisp:or zonal-statistics-config-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-config-input-zonal-statistics-config
                         :shape "ZonalStatisticsConfigInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-config-input 'make-job-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'band-math-config))
      (common-lisp:list
       (common-lisp:cons "BandMathConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-masking-config))
      (common-lisp:list
       (common-lisp:cons "CloudMaskingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-removal-config))
      (common-lisp:list
       (common-lisp:cons "CloudRemovalConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-mosaic-config))
      (common-lisp:list
       (common-lisp:cons "GeoMosaicConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'land-cover-segmentation-config))
      (common-lisp:list
       (common-lisp:cons "LandCoverSegmentationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resampling-config))
      (common-lisp:list
       (common-lisp:cons "ResamplingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-config))
      (common-lisp:list
       (common-lisp:cons "StackConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-statistics-config))
      (common-lisp:list
       (common-lisp:cons "TemporalStatisticsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zonal-statistics-config))
      (common-lisp:list
       (common-lisp:cons "ZonalStatisticsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-config-input))
   common-lisp:nil))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass land-cover-segmentation-config-input common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-land-cover-segmentation-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'land-cover-segmentation-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'land-cover-segmentation-config-input
                    'make-land-cover-segmentation-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          land-cover-segmentation-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          land-cover-segmentation-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          land-cover-segmentation-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass landsat-cloud-cover-land-input common-lisp:nil
                       ((lower-bound :initarg :lower-bound :initform
                         (common-lisp:error ":lower-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-landsat-cloud-cover-land-input-lower-bound
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         (common-lisp:error ":upper-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-landsat-cloud-cover-land-input-upper-bound
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-landsat-cloud-cover-land-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'landsat-cloud-cover-land-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'landsat-cloud-cover-land-input
                    'make-landsat-cloud-cover-land-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          landsat-cloud-cover-land-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          landsat-cloud-cover-land-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          landsat-cloud-cover-land-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype linear-ring () '(trivial-types:proper-list position))
 (common-lisp:defun make-linear-ring
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list position))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype linear-rings () '(trivial-types:proper-list linear-ring))
 (common-lisp:defun make-linear-rings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list linear-ring))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype linear-rings-list ()
   '(trivial-types:proper-list linear-rings))
 (common-lisp:defun make-linear-rings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list linear-rings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-earth-observation-job-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-earth-observation-job-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-input-max-results
                         :shape "ListEarthObservationJobInputMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-earth-observation-job-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-input-sort-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-earth-observation-job-input-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-equals :initarg :status-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or earth-observation-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-input-status-equals
                         :shape "EarthObservationJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-earth-observation-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-earth-observation-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-earth-observation-job-input
                    'make-list-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:deftype list-earth-observation-job-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-earth-observation-job-output common-lisp:nil
                       ((earth-observation-job-summaries :initarg
                         :earth-observation-job-summaries :initform
                         (common-lisp:error
                          ":earth-observation-job-summaries is required")
                         :type
                         (common-lisp:or earth-observation-job-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-output-earth-observation-job-summaries
                         :shape "EarthObservationJobList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-earth-observation-job-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-earth-observation-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-earth-observation-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-earth-observation-job-output
                    'make-list-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earth-observation-job-summaries))
      (common-lisp:list
       (common-lisp:cons "EarthObservationJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-earth-observation-job-output-config common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-earth-observation-job-output-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-output-config-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform
                         (common-lisp:error ":duration-in-seconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-output-config-duration-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-earth-observation-job-output-config-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-type :initarg :operation-type :initform
                         (common-lisp:error ":operation-type is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-output-config-operation-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or earth-observation-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-earth-observation-job-output-config-status
                         :shape "EarthObservationJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-earth-observation-job-output-config-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-earth-observation-job-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-earth-observation-job-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-earth-observation-job-output-config
                    'make-list-earth-observation-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-earth-observation-job-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-raster-data-collections-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-raster-data-collections-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-raster-data-collections-input-max-results
                         :shape
                         "ListRasterDataCollectionsInputMaxResultsInteger"
                         :location "querystring" :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-raster-data-collections-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-raster-data-collections-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-raster-data-collections-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-raster-data-collections-input
                    'make-list-raster-data-collections-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-input))
   common-lisp:nil))
(common-lisp:deftype list-raster-data-collections-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-raster-data-collections-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-raster-data-collections-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raster-data-collection-summaries :initarg
                         :raster-data-collection-summaries :initform
                         (common-lisp:error
                          ":raster-data-collection-summaries is required")
                         :type
                         (common-lisp:or data-collections-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-raster-data-collections-output-raster-data-collection-summaries
                         :shape "DataCollectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-raster-data-collections-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-raster-data-collections-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-raster-data-collections-output
                    'make-list-raster-data-collections-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-summaries))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-raster-data-collections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vector-enrichment-job-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-vector-enrichment-job-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-input-max-results
                         :shape "ListVectorEnrichmentJobInputMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vector-enrichment-job-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-input-sort-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-vector-enrichment-job-input-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-equals :initarg :status-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-vector-enrichment-job-input-status-equals
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vector-enrichment-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vector-enrichment-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vector-enrichment-job-input
                    'make-list-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:deftype list-vector-enrichment-job-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-vector-enrichment-job-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vector-enrichment-job-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vector-enrichment-job-summaries :initarg
                         :vector-enrichment-job-summaries :initform
                         (common-lisp:error
                          ":vector-enrichment-job-summaries is required")
                         :type
                         (common-lisp:or vector-enrichment-job-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-output-vector-enrichment-job-summaries
                         :shape "VectorEnrichmentJobList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vector-enrichment-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vector-enrichment-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vector-enrichment-job-output
                    'make-list-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-enrichment-job-summaries))
      (common-lisp:list
       (common-lisp:cons "VectorEnrichmentJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vector-enrichment-job-output-config common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-output-config-arn
                         :shape "VectorEnrichmentJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-output-config-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform
                         (common-lisp:error ":duration-in-seconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-output-config-duration-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-vector-enrichment-job-output-config-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or vector-enrichment-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-output-config-status
                         :shape "VectorEnrichmentJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-vector-enrichment-job-output-config-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or vector-enrichment-job-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vector-enrichment-job-output-config-type
                         :shape "VectorEnrichmentJobType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vector-enrichment-job-output-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vector-enrichment-job-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vector-enrichment-job-output-config
                    'make-list-vector-enrichment-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vector-enrichment-job-output-config))
   common-lisp:nil))
(common-lisp:deftype logical-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass map-matching-config common-lisp:nil
                       ((id-attribute-name :initarg :id-attribute-name
                         :initform
                         (common-lisp:error ":id-attribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-map-matching-config-id-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp-attribute-name :initarg
                         :timestamp-attribute-name :initform
                         (common-lisp:error
                          ":timestamp-attribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-map-matching-config-timestamp-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xattribute-name :initarg :xattribute-name :initform
                         (common-lisp:error ":xattribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-map-matching-config-xattribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (yattribute-name :initarg :yattribute-name :initform
                         (common-lisp:error ":yattribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-map-matching-config-yattribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-map-matching-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'map-matching-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'map-matching-config 'make-map-matching-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-matching-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-matching-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-attribute-name))
      (common-lisp:list
       (common-lisp:cons "IdAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-attribute-name))
      (common-lisp:list
       (common-lisp:cons "TimestampAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xattribute-name))
      (common-lisp:list
       (common-lisp:cons "XAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yattribute-name))
      (common-lisp:list
       (common-lisp:cons "YAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-matching-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multi-polygon-geometry-input common-lisp:nil
                       ((coordinates :initarg :coordinates :initform
                         (common-lisp:error ":coordinates is required") :type
                         (common-lisp:or linear-rings-list common-lisp:null)
                         :accessor
                         struct-shape-multi-polygon-geometry-input-coordinates
                         :shape "LinearRingsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multi-polygon-geometry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multi-polygon-geometry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multi-polygon-geometry-input
                    'make-multi-polygon-geometry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-polygon-geometry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-polygon-geometry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-polygon-geometry-input))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass operation common-lisp:nil
                       ((equation :initarg :equation :initform
                         (common-lisp:error ":equation is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operation-equation :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operation-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-type :initarg :output-type :initform
                         common-lisp:nil :type
                         (common-lisp:or output-type common-lisp:null)
                         :accessor struct-shape-operation-output-type :shape
                         "OutputType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-operation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'operation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'operation 'make-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equation))
      (common-lisp:list
       (common-lisp:cons "Equation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "OutputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operations-list-input ()
   '(trivial-types:proper-list operation))
 (common-lisp:defun make-operations-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-band common-lisp:nil
                       ((band-name :initarg :band-name :initform
                         (common-lisp:error ":band-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-output-band-band-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-data-type :initarg :output-data-type :initform
                         (common-lisp:error ":output-data-type is required")
                         :type (common-lisp:or output-type common-lisp:null)
                         :accessor struct-shape-output-band-output-data-type
                         :shape "OutputType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-band
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-band
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-band 'make-output-band))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-band))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-band))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'band-name))
      (common-lisp:list
       (common-lisp:cons "BandName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-type))
      (common-lisp:list
       (common-lisp:cons "OutputDataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-band))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-config-input common-lisp:nil
                       ((s3data :initarg :s3data :initform
                         (common-lisp:error ":s3data is required") :type
                         (common-lisp:or export-s3data-input common-lisp:null)
                         :accessor struct-shape-output-config-input-s3data
                         :shape "ExportS3DataInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-config-input 'make-output-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-resolution-resampling-input common-lisp:nil
                       ((user-defined :initarg :user-defined :initform
                         (common-lisp:error ":user-defined is required") :type
                         (common-lisp:or user-defined common-lisp:null)
                         :accessor
                         struct-shape-output-resolution-resampling-input-user-defined
                         :shape "UserDefined" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-resolution-resampling-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'output-resolution-resampling-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-resolution-resampling-input
                    'make-output-resolution-resampling-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-resampling-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-resampling-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined))
      (common-lisp:list
       (common-lisp:cons "UserDefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-resampling-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-resolution-stack-input common-lisp:nil
                       ((predefined :initarg :predefined :initform
                         common-lisp:nil :type
                         (common-lisp:or predefined-resolution
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-resolution-stack-input-predefined
                         :shape "PredefinedResolution" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-defined :initarg :user-defined :initform
                         common-lisp:nil :type
                         (common-lisp:or user-defined common-lisp:null)
                         :accessor
                         struct-shape-output-resolution-stack-input-user-defined
                         :shape "UserDefined" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-resolution-stack-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'output-resolution-stack-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-resolution-stack-input
                    'make-output-resolution-stack-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predefined))
      (common-lisp:list
       (common-lisp:cons "Predefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined))
      (common-lisp:list
       (common-lisp:cons "UserDefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-resolution-stack-input))
   common-lisp:nil))
(common-lisp:deftype output-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-input common-lisp:nil
                       ((comparison-operator :initarg :comparison-operator
                         :initform common-lisp:nil :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor
                         struct-shape-platform-input-comparison-operator :shape
                         "ComparisonOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-platform-input-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-platform-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'platform-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'platform-input 'make-platform-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass polygon-geometry-input common-lisp:nil
                       ((coordinates :initarg :coordinates :initform
                         (common-lisp:error ":coordinates is required") :type
                         (common-lisp:or linear-rings common-lisp:null)
                         :accessor
                         struct-shape-polygon-geometry-input-coordinates :shape
                         "LinearRings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-polygon-geometry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'polygon-geometry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'polygon-geometry-input 'make-polygon-geometry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          polygon-geometry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          polygon-geometry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          polygon-geometry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype position () '(trivial-types:proper-list double))
 (common-lisp:defun make-position
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predefined-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass properties common-lisp:nil
                       ((eo-cloud-cover :initarg :eo-cloud-cover :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-properties-eo-cloud-cover :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (landsat-cloud-cover-land :initarg
                         :landsat-cloud-cover-land :initform common-lisp:nil
                         :type (common-lisp:or float common-lisp:null)
                         :accessor
                         struct-shape-properties-landsat-cloud-cover-land
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-properties-platform :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (view-off-nadir :initarg :view-off-nadir :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-properties-view-off-nadir :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (view-sun-azimuth :initarg :view-sun-azimuth :initform
                         common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-properties-view-sun-azimuth :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (view-sun-elevation :initarg :view-sun-elevation
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-properties-view-sun-elevation :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'properties 'make-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eo-cloud-cover))
      (common-lisp:list
       (common-lisp:cons "EoCloudCover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landsat-cloud-cover-land))
      (common-lisp:list
       (common-lisp:cons "LandsatCloudCoverLand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-off-nadir))
      (common-lisp:list
       (common-lisp:cons "ViewOffNadir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-azimuth))
      (common-lisp:list
       (common-lisp:cons "ViewSunAzimuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-elevation))
      (common-lisp:list
       (common-lisp:cons "ViewSunElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property common-lisp:nil
                       ((eo-cloud-cover :initarg :eo-cloud-cover :initform
                         common-lisp:nil :type
                         (common-lisp:or eo-cloud-cover-input common-lisp:null)
                         :accessor struct-shape-property-eo-cloud-cover :shape
                         "EoCloudCoverInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (landsat-cloud-cover-land :initarg
                         :landsat-cloud-cover-land :initform common-lisp:nil
                         :type
                         (common-lisp:or landsat-cloud-cover-land-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-property-landsat-cloud-cover-land :shape
                         "LandsatCloudCoverLandInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or platform-input common-lisp:null)
                         :accessor struct-shape-property-platform :shape
                         "PlatformInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (view-off-nadir :initarg :view-off-nadir :initform
                         common-lisp:nil :type
                         (common-lisp:or view-off-nadir-input common-lisp:null)
                         :accessor struct-shape-property-view-off-nadir :shape
                         "ViewOffNadirInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (view-sun-azimuth :initarg :view-sun-azimuth :initform
                         common-lisp:nil :type
                         (common-lisp:or view-sun-azimuth-input
                                         common-lisp:null)
                         :accessor struct-shape-property-view-sun-azimuth
                         :shape "ViewSunAzimuthInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (view-sun-elevation :initarg :view-sun-elevation
                         :initform common-lisp:nil :type
                         (common-lisp:or view-sun-elevation-input
                                         common-lisp:null)
                         :accessor struct-shape-property-view-sun-elevation
                         :shape "ViewSunElevationInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'property 'make-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eo-cloud-cover))
      (common-lisp:list
       (common-lisp:cons "EoCloudCover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'landsat-cloud-cover-land))
      (common-lisp:list
       (common-lisp:cons "LandsatCloudCoverLand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-off-nadir))
      (common-lisp:list
       (common-lisp:cons "ViewOffNadir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-azimuth))
      (common-lisp:list
       (common-lisp:cons "ViewSunAzimuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-sun-elevation))
      (common-lisp:list
       (common-lisp:cons "ViewSunElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-filter common-lisp:nil
                       ((property :initarg :property :initform
                         (common-lisp:error ":property is required") :type
                         (common-lisp:or property common-lisp:null) :accessor
                         struct-shape-property-filter-property :shape
                         "Property" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'property-filter 'make-property-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "Property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-filters common-lisp:nil
                       ((logical-operator :initarg :logical-operator :initform
                         common-lisp:nil :type
                         (common-lisp:or logical-operator common-lisp:null)
                         :accessor
                         struct-shape-property-filters-logical-operator :shape
                         "LogicalOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or property-filters-list
                                         common-lisp:null)
                         :accessor struct-shape-property-filters-properties
                         :shape "PropertyFiltersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-filters 'make-property-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-filters-list ()
   '(trivial-types:proper-list property-filter))
 (common-lisp:defun make-property-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass raster-data-collection-metadata common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or data-collection-arn common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-metadata-arn
                         :shape "DataCollectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raster-data-collection-metadata-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description-page-url :initarg :description-page-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raster-data-collection-metadata-description-page-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raster-data-collection-metadata-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-filters :initarg :supported-filters
                         :initform
                         (common-lisp:error ":supported-filters is required")
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-metadata-supported-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-raster-data-collection-metadata-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or data-collection-type common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-metadata-type
                         :shape "DataCollectionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raster-data-collection-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'raster-data-collection-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-metadata
                    'make-raster-data-collection-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'description-page-url))
      (common-lisp:list
       (common-lisp:cons "DescriptionPageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-filters))
      (common-lisp:list
       (common-lisp:cons "SupportedFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raster-data-collection-query-input common-lisp:nil
                       ((area-of-interest :initarg :area-of-interest :initform
                         common-lisp:nil :type
                         (common-lisp:or area-of-interest common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-input-area-of-interest
                         :shape "AreaOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-filters :initarg :property-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-input-property-filters
                         :shape "PropertyFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raster-data-collection-arn :initarg
                         :raster-data-collection-arn :initform
                         (common-lisp:error
                          ":raster-data-collection-arn is required")
                         :type
                         (common-lisp:or data-collection-arn common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-input-raster-data-collection-arn
                         :shape "DataCollectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-range-filter :initarg :time-range-filter
                         :initform
                         (common-lisp:error ":time-range-filter is required")
                         :type
                         (common-lisp:or time-range-filter-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-input-time-range-filter
                         :shape "TimeRangeFilterInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raster-data-collection-query-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'raster-data-collection-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-query-input
                    'make-raster-data-collection-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-of-interest))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "PropertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-arn))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raster-data-collection-query-output common-lisp:nil
                       ((area-of-interest :initarg :area-of-interest :initform
                         common-lisp:nil :type
                         (common-lisp:or area-of-interest common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-output-area-of-interest
                         :shape "AreaOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-filters :initarg :property-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-output-property-filters
                         :shape "PropertyFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raster-data-collection-arn :initarg
                         :raster-data-collection-arn :initform
                         (common-lisp:error
                          ":raster-data-collection-arn is required")
                         :type
                         (common-lisp:or data-collection-arn common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-output-raster-data-collection-arn
                         :shape "DataCollectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raster-data-collection-name :initarg
                         :raster-data-collection-name :initform
                         (common-lisp:error
                          ":raster-data-collection-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-output-raster-data-collection-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-range-filter :initarg :time-range-filter
                         :initform
                         (common-lisp:error ":time-range-filter is required")
                         :type
                         (common-lisp:or time-range-filter-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-output-time-range-filter
                         :shape "TimeRangeFilterOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raster-data-collection-query-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'raster-data-collection-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-query-output
                    'make-raster-data-collection-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-of-interest))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "PropertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-arn))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-name))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raster-data-collection-query-with-band-filter-input
                       common-lisp:nil
                       ((area-of-interest :initarg :area-of-interest :initform
                         common-lisp:nil :type
                         (common-lisp:or area-of-interest common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-with-band-filter-input-area-of-interest
                         :shape "AreaOfInterest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (band-filter :initarg :band-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-with-band-filter-input-band-filter
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-filters :initarg :property-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-with-band-filter-input-property-filters
                         :shape "PropertyFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-range-filter :initarg :time-range-filter
                         :initform
                         (common-lisp:error ":time-range-filter is required")
                         :type
                         (common-lisp:or time-range-filter-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-raster-data-collection-query-with-band-filter-input-time-range-filter
                         :shape "TimeRangeFilterInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raster-data-collection-query-with-band-filter-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'raster-data-collection-query-with-band-filter-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'raster-data-collection-query-with-band-filter-input
                    'make-raster-data-collection-query-with-band-filter-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-with-band-filter-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-with-band-filter-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-of-interest))
      (common-lisp:list
       (common-lisp:cons "AreaOfInterest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'band-filter))
      (common-lisp:list
       (common-lisp:cons "BandFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "PropertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-filter))
      (common-lisp:list
       (common-lisp:cons "TimeRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          raster-data-collection-query-with-band-filter-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resampling-config-input common-lisp:nil
                       ((algorithm-name :initarg :algorithm-name :initform
                         common-lisp:nil :type
                         (common-lisp:or algorithm-name-resampling
                                         common-lisp:null)
                         :accessor
                         struct-shape-resampling-config-input-algorithm-name
                         :shape "AlgorithmNameResampling" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-resolution :initarg :output-resolution
                         :initform
                         (common-lisp:error ":output-resolution is required")
                         :type
                         (common-lisp:or output-resolution-resampling-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-resampling-config-input-output-resolution
                         :shape "OutputResolutionResamplingInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-bands :initarg :target-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-resampling-config-input-target-bands
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resampling-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resampling-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resampling-config-input 'make-resampling-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resampling-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resampling-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resolution))
      (common-lisp:list
       (common-lisp:cons "OutputResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resampling-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defclass reverse-geocoding-config common-lisp:nil
                       ((xattribute-name :initarg :xattribute-name :initform
                         (common-lisp:error ":xattribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reverse-geocoding-config-xattribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (yattribute-name :initarg :yattribute-name :initform
                         (common-lisp:error ":yattribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reverse-geocoding-config-yattribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reverse-geocoding-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reverse-geocoding-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reverse-geocoding-config 'make-reverse-geocoding-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reverse-geocoding-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reverse-geocoding-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xattribute-name))
      (common-lisp:list
       (common-lisp:cons "XAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yattribute-name))
      (common-lisp:list
       (common-lisp:cons "YAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reverse-geocoding-config))
   common-lisp:nil))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-raster-data-collection-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or data-collection-arn common-lisp:null)
                         :accessor
                         struct-shape-search-raster-data-collection-input-arn
                         :shape "DataCollectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-raster-data-collection-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raster-data-collection-query :initarg
                         :raster-data-collection-query :initform
                         (common-lisp:error
                          ":raster-data-collection-query is required")
                         :type
                         (common-lisp:or
                          raster-data-collection-query-with-band-filter-input
                          common-lisp:null)
                         :accessor
                         struct-shape-search-raster-data-collection-input-raster-data-collection-query
                         :shape "RasterDataCollectionQueryWithBandFilterInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-raster-data-collection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-raster-data-collection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-raster-data-collection-input
                    'make-search-raster-data-collection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raster-data-collection-query))
      (common-lisp:list
       (common-lisp:cons "RasterDataCollectionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-raster-data-collection-output common-lisp:nil
                       ((approximate-result-count :initarg
                         :approximate-result-count :initform
                         (common-lisp:error
                          ":approximate-result-count is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-search-raster-data-collection-output-approximate-result-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or item-source-list common-lisp:null)
                         :accessor
                         struct-shape-search-raster-data-collection-output-items
                         :shape "ItemSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-raster-data-collection-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-raster-data-collection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-raster-data-collection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-raster-data-collection-output
                    'make-search-raster-data-collection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-result-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateResultCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-raster-data-collection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id)))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-config-input common-lisp:nil
                       ((output-resolution :initarg :output-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or output-resolution-stack-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-stack-config-input-output-resolution
                         :shape "OutputResolutionStackInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-bands :initarg :target-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor struct-shape-stack-config-input-target-bands
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stack-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stack-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stack-config-input 'make-stack-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resolution))
      (common-lisp:list
       (common-lisp:cons "OutputResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-earth-observation-job-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          start-earth-observation-job-input-client-token-string
                          common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-input-client-token
                         :shape
                         "StartEarthObservationJobInputClientTokenString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-input-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-config :initarg :input-config :initform
                         (common-lisp:error ":input-config is required") :type
                         (common-lisp:or input-config-input common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-input-input-config
                         :shape "InputConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-config :initarg :job-config :initform
                         (common-lisp:error ":job-config is required") :type
                         (common-lisp:or job-config-input common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-input-job-config
                         :shape "JobConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-start-earth-observation-job-input-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or
                          start-earth-observation-job-input-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-input-name
                         :shape "StartEarthObservationJobInputNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-earth-observation-job-input-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-earth-observation-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-earth-observation-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-earth-observation-job-input
                    'make-start-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:deftype start-earth-observation-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:deftype start-earth-observation-job-input-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-earth-observation-job-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-earth-observation-job-output-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-output-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform
                         (common-lisp:error ":duration-in-seconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-output-duration-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-output-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-config :initarg :input-config :initform
                         common-lisp:nil :type
                         (common-lisp:or input-config-output common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-output-input-config
                         :shape "InputConfigOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-config :initarg :job-config :initform
                         (common-lisp:error ":job-config is required") :type
                         (common-lisp:or job-config-input common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-output-job-config
                         :shape "JobConfigInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-start-earth-observation-job-output-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-earth-observation-job-output-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or earth-observation-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-earth-observation-job-output-status
                         :shape "EarthObservationJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-earth-observation-job-output-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-earth-observation-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-earth-observation-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-earth-observation-job-output
                    'make-start-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-vector-enrichment-job-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          start-vector-enrichment-job-input-client-token-string
                          common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-input-client-token
                         :shape
                         "StartVectorEnrichmentJobInputClientTokenString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-input-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-config :initarg :input-config :initform
                         (common-lisp:error ":input-config is required") :type
                         (common-lisp:or vector-enrichment-job-input-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-input-input-config
                         :shape "VectorEnrichmentJobInputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-config :initarg :job-config :initform
                         (common-lisp:error ":job-config is required") :type
                         (common-lisp:or vector-enrichment-job-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-input-job-config
                         :shape "VectorEnrichmentJobConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-start-vector-enrichment-job-input-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or
                          start-vector-enrichment-job-input-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-input-name
                         :shape "StartVectorEnrichmentJobInputNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-vector-enrichment-job-input-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-vector-enrichment-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-vector-enrichment-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-vector-enrichment-job-input
                    'make-start-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:deftype start-vector-enrichment-job-input-client-token-string ()
  'common-lisp:string)
(common-lisp:deftype start-vector-enrichment-job-input-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-vector-enrichment-job-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-arn
                         :shape "VectorEnrichmentJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-creation-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-in-seconds :initarg :duration-in-seconds
                         :initform
                         (common-lisp:error ":duration-in-seconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-duration-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-config :initarg :input-config :initform
                         (common-lisp:error ":input-config is required") :type
                         (common-lisp:or vector-enrichment-job-input-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-input-config
                         :shape "VectorEnrichmentJobInputConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-config :initarg :job-config :initform
                         (common-lisp:error ":job-config is required") :type
                         (common-lisp:or vector-enrichment-job-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-job-config
                         :shape "VectorEnrichmentJobConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-start-vector-enrichment-job-output-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-vector-enrichment-job-output-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or vector-enrichment-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-status
                         :shape "VectorEnrichmentJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-vector-enrichment-job-output-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or vector-enrichment-job-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-vector-enrichment-job-output-type
                         :shape "VectorEnrichmentJobType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-vector-enrichment-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-vector-enrichment-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-vector-enrichment-job-output
                    'make-start-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-config))
      (common-lisp:list
       (common-lisp:cons "JobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-earth-observation-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or earth-observation-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-earth-observation-job-input-arn
                         :shape "EarthObservationJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-earth-observation-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-earth-observation-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-earth-observation-job-input
                    'make-stop-earth-observation-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-earth-observation-job-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-earth-observation-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-earth-observation-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-earth-observation-job-output
                    'make-stop-earth-observation-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-earth-observation-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-vector-enrichment-job-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vector-enrichment-job-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-vector-enrichment-job-input-arn
                         :shape "VectorEnrichmentJobArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-vector-enrichment-job-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-vector-enrichment-job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-vector-enrichment-job-input
                    'make-stop-vector-enrichment-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-vector-enrichment-job-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-vector-enrichment-job-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-vector-enrichment-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-vector-enrichment-job-output
                    'make-stop-vector-enrichment-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-vector-enrichment-job-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list-input () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location "uri" :location-name "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-options () 'common-lisp:string)
(common-lisp:deftype temporal-statistics () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass temporal-statistics-config-input common-lisp:nil
                       ((group-by :initarg :group-by :initform common-lisp:nil
                         :type (common-lisp:or group-by common-lisp:null)
                         :accessor
                         struct-shape-temporal-statistics-config-input-group-by
                         :shape "GroupBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or temporal-statistics-list-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-temporal-statistics-config-input-statistics
                         :shape "TemporalStatisticsListInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-bands :initarg :target-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-temporal-statistics-config-input-target-bands
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-temporal-statistics-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'temporal-statistics-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'temporal-statistics-config-input
                    'make-temporal-statistics-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          temporal-statistics-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          temporal-statistics-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          temporal-statistics-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype temporal-statistics-list-input ()
   '(trivial-types:proper-list temporal-statistics))
 (common-lisp:defun make-temporal-statistics-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list temporal-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       throttling-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defclass time-range-filter-input common-lisp:nil
                       ((end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-time-range-filter-input-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-time-range-filter-input-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-range-filter-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-range-filter-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-range-filter-input 'make-time-range-filter-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-range-filter-output common-lisp:nil
                       ((end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-time-range-filter-output-end-time :shape
                         "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-time-range-filter-output-start-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-range-filter-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-range-filter-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-range-filter-output 'make-time-range-filter-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-range-filter-output))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-defined common-lisp:nil
                       ((unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or unit common-lisp:null) :accessor
                         struct-shape-user-defined-unit :shape "Unit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-user-defined-value :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-defined
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-defined
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-defined 'make-user-defined))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-defined))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-defined))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-defined))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (sagemaker-geospatial-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       validation-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-resource-id)))
(common-lisp:deftype vector-enrichment-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vector-enrichment-job-config common-lisp:nil
                       ((map-matching-config :initarg :map-matching-config
                         :initform common-lisp:nil :type
                         (common-lisp:or map-matching-config common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-config-map-matching-config
                         :shape "MapMatchingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reverse-geocoding-config :initarg
                         :reverse-geocoding-config :initform common-lisp:nil
                         :type
                         (common-lisp:or reverse-geocoding-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-config-reverse-geocoding-config
                         :shape "ReverseGeocodingConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vector-enrichment-job-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vector-enrichment-job-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-config
                    'make-vector-enrichment-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-matching-config))
      (common-lisp:list
       (common-lisp:cons "MapMatchingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reverse-geocoding-config))
      (common-lisp:list
       (common-lisp:cons "ReverseGeocodingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vector-enrichment-job-data-source-config-input
                       common-lisp:nil
                       ((s3data :initarg :s3data :initform common-lisp:nil
                         :type
                         (common-lisp:or vector-enrichment-job-s3data
                                         common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-data-source-config-input-s3data
                         :shape "VectorEnrichmentJobS3Data" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vector-enrichment-job-data-source-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vector-enrichment-job-data-source-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-data-source-config-input
                    'make-vector-enrichment-job-data-source-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-data-source-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-data-source-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data))
      (common-lisp:list
       (common-lisp:cons "S3Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-data-source-config-input))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-document-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vector-enrichment-job-error-details common-lisp:nil
                       ((error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vector-enrichment-job-error-details-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or vector-enrichment-job-error-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-error-details-error-type
                         :shape "VectorEnrichmentJobErrorType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vector-enrichment-job-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vector-enrichment-job-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-error-details
                    'make-vector-enrichment-job-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-error-details))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vector-enrichment-job-export-error-details
                       common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-export-error-details-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or
                          vector-enrichment-job-export-error-type
                          common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-export-error-details-type
                         :shape "VectorEnrichmentJobExportErrorType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vector-enrichment-job-export-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vector-enrichment-job-export-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-export-error-details
                    'make-vector-enrichment-job-export-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-export-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-export-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-export-error-details))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-export-error-type ()
  'common-lisp:string)
(common-lisp:deftype vector-enrichment-job-export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vector-enrichment-job-input-config common-lisp:nil
                       ((data-source-config :initarg :data-source-config
                         :initform
                         (common-lisp:error ":data-source-config is required")
                         :type
                         (common-lisp:or
                          vector-enrichment-job-data-source-config-input
                          common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-input-config-data-source-config
                         :shape "VectorEnrichmentJobDataSourceConfigInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (document-type :initarg :document-type :initform
                         (common-lisp:error ":document-type is required") :type
                         (common-lisp:or vector-enrichment-job-document-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-vector-enrichment-job-input-config-document-type
                         :shape "VectorEnrichmentJobDocumentType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vector-enrichment-job-input-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vector-enrichment-job-input-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-input-config
                    'make-vector-enrichment-job-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-config))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "DocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vector-enrichment-job-list ()
   '(trivial-types:proper-list list-vector-enrichment-job-output-config))
 (common-lisp:defun make-vector-enrichment-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-vector-enrichment-job-output-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vector-enrichment-job-s3data common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         struct-shape-vector-enrichment-job-s3data-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3uri :initarg :s3uri :initform
                         (common-lisp:error ":s3uri is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-vector-enrichment-job-s3data-s3uri :shape
                         "S3Uri" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vector-enrichment-job-s3data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vector-enrichment-job-s3data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vector-enrichment-job-s3data
                    'make-vector-enrichment-job-s3data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-s3data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-s3data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vector-enrichment-job-s3data))
   common-lisp:nil))
(common-lisp:deftype vector-enrichment-job-status () 'common-lisp:string)
(common-lisp:deftype vector-enrichment-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass view-off-nadir-input common-lisp:nil
                       ((lower-bound :initarg :lower-bound :initform
                         (common-lisp:error ":lower-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-view-off-nadir-input-lower-bound :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         (common-lisp:error ":upper-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-view-off-nadir-input-upper-bound :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-view-off-nadir-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'view-off-nadir-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'view-off-nadir-input 'make-view-off-nadir-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input view-off-nadir-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input view-off-nadir-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input view-off-nadir-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass view-sun-azimuth-input common-lisp:nil
                       ((lower-bound :initarg :lower-bound :initform
                         (common-lisp:error ":lower-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-view-sun-azimuth-input-lower-bound :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         (common-lisp:error ":upper-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-view-sun-azimuth-input-upper-bound :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-view-sun-azimuth-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'view-sun-azimuth-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'view-sun-azimuth-input 'make-view-sun-azimuth-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-azimuth-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-azimuth-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-azimuth-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass view-sun-elevation-input common-lisp:nil
                       ((lower-bound :initarg :lower-bound :initform
                         (common-lisp:error ":lower-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-view-sun-elevation-input-lower-bound
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         (common-lisp:error ":upper-bound is required") :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-view-sun-elevation-input-upper-bound
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-view-sun-elevation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'view-sun-elevation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'view-sun-elevation-input 'make-view-sun-elevation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-elevation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-elevation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          view-sun-elevation-input))
   common-lisp:nil))
(common-lisp:deftype zonal-statistics () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass zonal-statistics-config-input common-lisp:nil
                       ((statistics :initarg :statistics :initform
                         (common-lisp:error ":statistics is required") :type
                         (common-lisp:or zonal-statistics-list-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-zonal-statistics-config-input-statistics
                         :shape "ZonalStatisticsListInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-bands :initarg :target-bands :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list-input common-lisp:null)
                         :accessor
                         struct-shape-zonal-statistics-config-input-target-bands
                         :shape "StringListInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zone-s3path :initarg :zone-s3path :initform
                         (common-lisp:error ":zone-s3path is required") :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         struct-shape-zonal-statistics-config-input-zone-s3path
                         :shape "S3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zone-s3path-kms-key-id :initarg
                         :zone-s3path-kms-key-id :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor
                         struct-shape-zonal-statistics-config-input-zone-s3path-kms-key-id
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-zonal-statistics-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'zonal-statistics-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'zonal-statistics-config-input
                    'make-zonal-statistics-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zonal-statistics-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zonal-statistics-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bands))
      (common-lisp:list
       (common-lisp:cons "TargetBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-s3path))
      (common-lisp:list
       (common-lisp:cons "ZoneS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-s3path-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ZoneS3PathKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zonal-statistics-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype zonal-statistics-list-input ()
   '(trivial-types:proper-list zonal-statistics))
 (common-lisp:defun make-zonal-statistics-list-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list zonal-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun delete-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-earth-observation-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/earth-observation-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "DeleteEarthObservationJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun delete-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vector-enrichment-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/vector-enrichment-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "DeleteVectorEnrichmentJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun export-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn client-token execution-role-arn
                     export-source-images output-config)
   (common-lisp:declare
    (common-lisp:ignorable arn client-token execution-role-arn
     export-source-images output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-earth-observation-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/export-earth-observation-job" "ExportEarthObservationJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun export-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn client-token execution-role-arn
                     output-config)
   (common-lisp:declare
    (common-lisp:ignorable arn client-token execution-role-arn output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-vector-enrichment-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/export-vector-enrichment-jobs" "ExportVectorEnrichmentJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun get-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-earth-observation-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/earth-observation-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "GetEarthObservationJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun get-raster-data-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-raster-data-collection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/raster-data-collection/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "GetRasterDataCollection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-raster-data-collection))
(common-lisp:progn
 (common-lisp:defun get-tile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn execution-role-arn image-assets
                     image-mask output-data-type output-format property-filters
                     target time-range-filter x y z)
   (common-lisp:declare
    (common-lisp:ignorable arn execution-role-arn image-assets image-mask
     output-data-type output-format property-filters target time-range-filter x
     y z))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tile-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tile/~A/~A/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'z))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'x))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'y))))
        "GetTile")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-tile))
(common-lisp:progn
 (common-lisp:defun get-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vector-enrichment-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/vector-enrichment-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "GetVectorEnrichmentJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun list-earth-observation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token sort-by sort-order
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token sort-by sort-order
     status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-earth-observation-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/list-earth-observation-jobs" "ListEarthObservationJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-earth-observation-jobs))
(common-lisp:progn
 (common-lisp:defun list-raster-data-collections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-raster-data-collections-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        "/raster-data-collections" "ListRasterDataCollections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-raster-data-collections))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-vector-enrichment-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token sort-by sort-order
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token sort-by sort-order
     status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vector-enrichment-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/list-vector-enrichment-jobs" "ListVectorEnrichmentJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vector-enrichment-jobs))
(common-lisp:progn
 (common-lisp:defun search-raster-data-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token
                     raster-data-collection-query)
   (common-lisp:declare
    (common-lisp:ignorable arn next-token raster-data-collection-query))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-raster-data-collection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/search-raster-data-collection" "SearchRasterDataCollection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-raster-data-collection))
(common-lisp:progn
 (common-lisp:defun start-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token execution-role-arn
                     input-config job-config kms-key-id name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token execution-role-arn input-config
     job-config kms-key-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-earth-observation-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/earth-observation-jobs" "StartEarthObservationJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun start-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token execution-role-arn
                     input-config job-config kms-key-id name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token execution-role-arn input-config
     job-config kms-key-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-vector-enrichment-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/vector-enrichment-jobs" "StartVectorEnrichmentJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun stop-earth-observation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-earth-observation-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/earth-observation-jobs/stop" "StopEarthObservationJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-earth-observation-job))
(common-lisp:progn
 (common-lisp:defun stop-vector-enrichment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-vector-enrichment-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "POST"
        "/vector-enrichment-jobs/stop" "StopVectorEnrichmentJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-vector-enrichment-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'sagemaker-geospatial-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
