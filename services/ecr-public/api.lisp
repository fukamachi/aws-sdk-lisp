;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ecr-public/api
  (:use)
  (:nicknames #:aws/ecr-public)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ecr-public/api)
(common-lisp:progn
 (common-lisp:define-condition ecr-public-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ecr-public-error))
(common-lisp:progn
 (common-lisp:defclass ecr-public-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "ecr-public" :api-version
                        "2020-10-30" :host-prefix "api.ecr-public"
                        :signing-name "ecr-public" :global-host common-lisp:nil
                        :target-prefix "SpencerFrontendService" :json-version
                        "1.1"))
 (common-lisp:export 'ecr-public-request))
(common-lisp:defvar *error-map*
  '(("EmptyUploadException" . empty-upload-exception)
    ("ImageAlreadyExistsException" . image-already-exists-exception)
    ("ImageDigestDoesNotMatchException"
     . image-digest-does-not-match-exception)
    ("ImageNotFoundException" . image-not-found-exception)
    ("ImageTagAlreadyExistsException" . image-tag-already-exists-exception)
    ("InvalidLayerException" . invalid-layer-exception)
    ("InvalidLayerPartException" . invalid-layer-part-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidTagParameterException" . invalid-tag-parameter-exception)
    ("LayerAlreadyExistsException" . layer-already-exists-exception)
    ("LayerPartTooSmallException" . layer-part-too-small-exception)
    ("LayersNotFoundException" . layers-not-found-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ReferencedImagesNotFoundException"
     . referenced-images-not-found-exception)
    ("RegistryNotFoundException" . registry-not-found-exception)
    ("RepositoryAlreadyExistsException" . repository-already-exists-exception)
    ("RepositoryCatalogDataNotFoundException"
     . repository-catalog-data-not-found-exception)
    ("RepositoryNotEmptyException" . repository-not-empty-exception)
    ("RepositoryNotFoundException" . repository-not-found-exception)
    ("RepositoryPolicyNotFoundException"
     . repository-policy-not-found-exception)
    ("ServerException" . server-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedCommandException" . unsupported-command-exception)
    ("UploadNotFoundException" . upload-not-found-exception)))
(common-lisp:deftype about-text () 'common-lisp:string)
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype architecture-list ()
   '(trivial-types:proper-list architecture))
 (common-lisp:defun make-architecture-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list architecture))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorization-data common-lisp:nil
                       ((authorization-token :initarg :authorization-token
                         :initform common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-authorization-data-authorization-token
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-at :initarg :expires-at :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration-timestamp common-lisp:null)
                         :accessor struct-shape-authorization-data-expires-at
                         :shape "ExpirationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorization-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorization-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorization-data 'make-authorization-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorization-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorization-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-token))
      (common-lisp:list
       (common-lisp:cons "authorizationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorization-data))
   common-lisp:nil))
(common-lisp:deftype base64 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-check-layer-availability-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-request-registry-id
                         :shape "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digests :initarg :layer-digests :initform
                         (common-lisp:error ":layerdigests is required") :type
                         (common-lisp:or batched-operation-layer-digest-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-request-layer-digests
                         :shape "BatchedOperationLayerDigestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-check-layer-availability-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-check-layer-availability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-check-layer-availability-request
                    'make-batch-check-layer-availability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digests))
      (common-lisp:list
       (common-lisp:cons "layerDigests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-check-layer-availability-response common-lisp:nil
                       ((layers :initarg :layers :initform common-lisp:nil
                         :type (common-lisp:or layer-list common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-response-layers
                         :shape "LayerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-failure-list common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-response-failures
                         :shape "LayerFailureList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-check-layer-availability-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-check-layer-availability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-check-layer-availability-response
                    'make-batch-check-layer-availability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-image-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-request-registry-id
                         :shape "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-ids :initarg :image-ids :initform
                         (common-lisp:error ":imageids is required") :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-request-image-ids
                         :shape "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-image-request
                    'make-batch-delete-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-image-response common-lisp:nil
                       ((image-ids :initarg :image-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-response-image-ids
                         :shape "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or image-failure-list common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-response-failures
                         :shape "ImageFailureList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-image-response
                    'make-batch-delete-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-response))
   common-lisp:nil))
(common-lisp:deftype batched-operation-layer-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batched-operation-layer-digest-list ()
   '(trivial-types:proper-list batched-operation-layer-digest))
 (common-lisp:defun make-batched-operation-layer-digest-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batched-operation-layer-digest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass complete-layer-upload-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-request-registry-id
                         :shape "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-complete-layer-upload-request-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digests :initarg :layer-digests :initform
                         (common-lisp:error ":layerdigests is required") :type
                         (common-lisp:or layer-digest-list common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-request-layer-digests
                         :shape "LayerDigestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-layer-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-layer-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-layer-upload-request
                    'make-complete-layer-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digests))
      (common-lisp:list
       (common-lisp:cons "layerDigests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-layer-upload-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-complete-layer-upload-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-digest common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-response-layer-digest
                         :shape "LayerDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-layer-upload-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-layer-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-layer-upload-response
                    'make-complete-layer-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-request common-lisp:nil
                       ((repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-data :initarg :catalog-data :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-catalog-data-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-catalog-data
                         :shape "RepositoryCatalogDataInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-repository-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-request
                    'make-create-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-data))
      (common-lisp:list
       (common-lisp:cons "catalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-response common-lisp:nil
                       ((repository :initarg :repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-create-repository-response-repository
                         :shape "Repository" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-data :initarg :catalog-data :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-catalog-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-repository-response-catalog-data
                         :shape "RepositoryCatalogData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-response
                    'make-create-repository-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-data))
      (common-lisp:list
       (common-lisp:cons "catalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-response))
   common-lisp:nil))
(common-lisp:deftype creation-timestamp () 'common-lisp:string)
(common-lisp:deftype default-registry-alias-flag () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-repository-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-policy-request
                    'make-delete-repository-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-response-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-policy-response
                    'make-delete-repository-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-delete-repository-request-force :shape
                         "ForceFlag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-request
                    'make-delete-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-response common-lisp:nil
                       ((repository :initarg :repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-delete-repository-response-repository
                         :shape "Repository" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-response
                    'make-delete-repository-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-tags-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-image-tags-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-image-tags-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-image-tags-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-image-tags-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-image-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-image-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-image-tags-request
                    'make-describe-image-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-tags-response common-lisp:nil
                       ((image-tag-details :initarg :image-tag-details
                         :initform common-lisp:nil :type
                         (common-lisp:or image-tag-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-image-tags-response-image-tag-details
                         :shape "ImageTagDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-image-tags-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-image-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-image-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-image-tags-response
                    'make-describe-image-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tag-details))
      (common-lisp:list
       (common-lisp:cons "imageTagDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-images-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-ids :initarg :image-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-image-ids :shape
                         "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-images-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-images-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-images-request 'make-describe-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-images-response common-lisp:nil
                       ((image-details :initarg :image-details :initform
                         common-lisp:nil :type
                         (common-lisp:or image-detail-list common-lisp:null)
                         :accessor
                         struct-shape-describe-images-response-image-details
                         :shape "ImageDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-images-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-images-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-images-response 'make-describe-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-details))
      (common-lisp:list
       (common-lisp:cons "imageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-registries-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-registries-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-registries-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-registries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-registries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-registries-request
                    'make-describe-registries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-registries-response common-lisp:nil
                       ((registries :initarg :registries :initform
                         (common-lisp:error ":registries is required") :type
                         (common-lisp:or registry-list common-lisp:null)
                         :accessor
                         struct-shape-describe-registries-response-registries
                         :shape "RegistryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-registries-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-registries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-registries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-registries-response
                    'make-describe-registries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registries))
      (common-lisp:list
       (common-lisp:cons "registries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repositories-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-names :initarg :repository-names :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-request-repository-names
                         :shape "RepositoryNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-repositories-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-repositories-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-repositories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-repositories-request
                    'make-describe-repositories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-names))
      (common-lisp:list
       (common-lisp:cons "repositoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repositories-response common-lisp:nil
                       ((repositories :initarg :repositories :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-list common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-response-repositories
                         :shape "RepositoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-repositories-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-repositories-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-repositories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-repositories-response
                    'make-describe-repositories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition empty-upload-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       empty-upload-exception-message)))
 (common-lisp:export
  (common-lisp:list 'empty-upload-exception 'empty-upload-exception-message)))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype expiration-timestamp () 'common-lisp:string)
(common-lisp:deftype force-flag () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass get-authorization-token-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-authorization-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-authorization-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-request
                    'make-get-authorization-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-authorization-token-response common-lisp:nil
                       ((authorization-data :initarg :authorization-data
                         :initform common-lisp:nil :type
                         (common-lisp:or authorization-data common-lisp:null)
                         :accessor
                         struct-shape-get-authorization-token-response-authorization-data
                         :shape "AuthorizationData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-authorization-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-authorization-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-response
                    'make-get-authorization-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-data))
      (common-lisp:list
       (common-lisp:cons "authorizationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-catalog-data-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-catalog-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-registry-catalog-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-catalog-data-request
                    'make-get-registry-catalog-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-catalog-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-catalog-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-catalog-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-catalog-data-response common-lisp:nil
                       ((registry-catalog-data :initarg :registry-catalog-data
                         :initform
                         (common-lisp:error ":registrycatalogdata is required")
                         :type
                         (common-lisp:or registry-catalog-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-registry-catalog-data-response-registry-catalog-data
                         :shape "RegistryCatalogData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-catalog-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-registry-catalog-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-catalog-data-response
                    'make-get-registry-catalog-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-catalog-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-catalog-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registry-catalog-data))
      (common-lisp:list
       (common-lisp:cons "registryCatalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-catalog-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-catalog-data-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-catalog-data-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-catalog-data-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-catalog-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-catalog-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-catalog-data-request
                    'make-get-repository-catalog-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-catalog-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-catalog-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-catalog-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-catalog-data-response common-lisp:nil
                       ((catalog-data :initarg :catalog-data :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-catalog-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-repository-catalog-data-response-catalog-data
                         :shape "RepositoryCatalogData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-catalog-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-catalog-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-catalog-data-response
                    'make-get-repository-catalog-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-catalog-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-catalog-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-data))
      (common-lisp:list
       (common-lisp:cons "catalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-catalog-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-policy-request
                    'make-get-repository-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-response-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-policy-response
                    'make-get-repository-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor struct-shape-image-registry-id :shape
                         "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-image-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor struct-shape-image-image-id :shape
                         "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest :initarg :image-manifest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-manifest common-lisp:null)
                         :accessor struct-shape-image-image-manifest :shape
                         "ImageManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor struct-shape-image-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-manifest))
      (common-lisp:list
       (common-lisp:cons "imageManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition image-already-exists-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-already-exists-exception
                    'image-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass image-detail common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-image-detail-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-image-detail-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor struct-shape-image-detail-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tags :initarg :image-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag-list common-lisp:null)
                         :accessor struct-shape-image-detail-image-tags :shape
                         "ImageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-size-in-bytes :initarg :image-size-in-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or image-size-in-bytes common-lisp:null)
                         :accessor
                         struct-shape-image-detail-image-size-in-bytes :shape
                         "ImageSizeInBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-pushed-at :initarg :image-pushed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or push-timestamp common-lisp:null)
                         :accessor struct-shape-image-detail-image-pushed-at
                         :shape "PushTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor
                         struct-shape-image-detail-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-media-type :initarg :artifact-media-type
                         :initform common-lisp:nil :type
                         (common-lisp:or media-type common-lisp:null) :accessor
                         struct-shape-image-detail-artifact-media-type :shape
                         "MediaType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-detail 'make-image-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "imageSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pushed-at))
      (common-lisp:list
       (common-lisp:cons "imagePushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-media-type))
      (common-lisp:list
       (common-lisp:cons "artifactMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-detail-list ()
   '(trivial-types:proper-list image-detail))
 (common-lisp:defun make-image-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-digest-does-not-match-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-digest-does-not-match-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-digest-does-not-match-exception
                    'image-digest-does-not-match-exception-message)))
(common-lisp:progn
 (common-lisp:defclass image-failure common-lisp:nil
                       ((image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor struct-shape-image-failure-image-id :shape
                         "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or image-failure-code common-lisp:null)
                         :accessor struct-shape-image-failure-failure-code
                         :shape "ImageFailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or image-failure-reason common-lisp:null)
                         :accessor struct-shape-image-failure-failure-reason
                         :shape "ImageFailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-failure 'make-image-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-failure))
   common-lisp:nil))
(common-lisp:deftype image-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-failure-list ()
   '(trivial-types:proper-list image-failure))
 (common-lisp:defun make-image-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-identifier common-lisp:nil
                       ((image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor struct-shape-image-identifier-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag :initarg :image-tag :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag common-lisp:null) :accessor
                         struct-shape-image-identifier-image-tag :shape
                         "ImageTag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-identifier 'make-image-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tag))
      (common-lisp:list
       (common-lisp:cons "imageTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-identifier-list ()
   '(trivial-types:proper-list image-identifier))
 (common-lisp:defun make-image-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-manifest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-not-found-exception
                    'image-not-found-exception-message)))
(common-lisp:deftype image-size-in-bytes () 'common-lisp:integer)
(common-lisp:deftype image-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-tag-already-exists-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-tag-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-tag-already-exists-exception
                    'image-tag-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass image-tag-detail common-lisp:nil
                       ((image-tag :initarg :image-tag :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag common-lisp:null) :accessor
                         struct-shape-image-tag-detail-image-tag :shape
                         "ImageTag" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor struct-shape-image-tag-detail-created-at
                         :shape "CreationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-detail :initarg :image-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or referenced-image-detail
                                         common-lisp:null)
                         :accessor struct-shape-image-tag-detail-image-detail
                         :shape "ReferencedImageDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-tag-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-tag-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-tag-detail 'make-image-tag-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-tag-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-tag-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tag))
      (common-lisp:list
       (common-lisp:cons "imageTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-detail))
      (common-lisp:list
       (common-lisp:cons "imageDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-tag-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-tag-detail-list ()
   '(trivial-types:proper-list image-tag-detail))
 (common-lisp:defun make-image-tag-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-tag-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-tag-list () '(trivial-types:proper-list image-tag))
 (common-lisp:defun make-image-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass initiate-layer-upload-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor
                         struct-shape-initiate-layer-upload-request-registry-id
                         :shape "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-initiate-layer-upload-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiate-layer-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'initiate-layer-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initiate-layer-upload-request
                    'make-initiate-layer-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initiate-layer-upload-response common-lisp:nil
                       ((upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-initiate-layer-upload-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-size :initarg :part-size :initform
                         common-lisp:nil :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-initiate-layer-upload-response-part-size
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiate-layer-upload-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'initiate-layer-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initiate-layer-upload-response
                    'make-initiate-layer-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-size))
      (common-lisp:list
       (common-lisp:cons "partSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-layer-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-layer-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-layer-exception 'invalid-layer-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-layer-part-exception
     (ecr-public-error)
     ((registry-id :initarg :registry-id :initform common-lisp:nil :reader
       invalid-layer-part-exception-registry-id)
      (repository-name :initarg :repository-name :initform common-lisp:nil
       :reader invalid-layer-part-exception-repository-name)
      (upload-id :initarg :upload-id :initform common-lisp:nil :reader
       invalid-layer-part-exception-upload-id)
      (last-valid-byte-received :initarg :last-valid-byte-received :initform
       common-lisp:nil :reader
       invalid-layer-part-exception-last-valid-byte-received)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-layer-part-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-layer-part-exception
                    'invalid-layer-part-exception-registry-id
                    'invalid-layer-part-exception-repository-name
                    'invalid-layer-part-exception-upload-id
                    'invalid-layer-part-exception-last-valid-byte-received
                    'invalid-layer-part-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-parameter-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-parameter-exception
                    'invalid-tag-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:defclass layer common-lisp:nil
                       ((layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-digest common-lisp:null)
                         :accessor struct-shape-layer-layer-digest :shape
                         "LayerDigest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-availability :initarg :layer-availability
                         :initform common-lisp:nil :type
                         (common-lisp:or layer-availability common-lisp:null)
                         :accessor struct-shape-layer-layer-availability :shape
                         "LayerAvailability" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-size :initarg :layer-size :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-size-in-bytes common-lisp:null)
                         :accessor struct-shape-layer-layer-size :shape
                         "LayerSizeInBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-type :initarg :media-type :initform
                         common-lisp:nil :type
                         (common-lisp:or media-type common-lisp:null) :accessor
                         struct-shape-layer-media-type :shape "MediaType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layer 'make-layer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-availability))
      (common-lisp:list
       (common-lisp:cons "layerAvailability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-size))
      (common-lisp:list
       (common-lisp:cons "layerSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-type))
      (common-lisp:list
       (common-lisp:cons "mediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition layer-already-exists-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layer-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layer-already-exists-exception
                    'layer-already-exists-exception-message)))
(common-lisp:deftype layer-availability () 'common-lisp:string)
(common-lisp:deftype layer-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-digest-list ()
   '(trivial-types:proper-list layer-digest))
 (common-lisp:defun make-layer-digest-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer-digest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass layer-failure common-lisp:nil
                       ((layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or batched-operation-layer-digest
                                         common-lisp:null)
                         :accessor struct-shape-layer-failure-layer-digest
                         :shape "BatchedOperationLayerDigest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-failure-code common-lisp:null)
                         :accessor struct-shape-layer-failure-failure-code
                         :shape "LayerFailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-failure-reason common-lisp:null)
                         :accessor struct-shape-layer-failure-failure-reason
                         :shape "LayerFailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layer-failure 'make-layer-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layer-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layer-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layer-failure))
   common-lisp:nil))
(common-lisp:deftype layer-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-failure-list ()
   '(trivial-types:proper-list layer-failure))
 (common-lisp:defun make-layer-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype layer-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-list () '(trivial-types:proper-list layer))
 (common-lisp:defun make-layer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype layer-part-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition layer-part-too-small-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layer-part-too-small-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layer-part-too-small-exception
                    'layer-part-too-small-exception-message)))
(common-lisp:deftype layer-size-in-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition layers-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layers-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layers-not-found-exception
                    'layers-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype logo-image-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype marketplace-certified () 'common-lisp:boolean)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype media-type () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype operating-system () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operating-system-list ()
   '(trivial-types:proper-list operating-system))
 (common-lisp:defun make-operating-system-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operating-system))
   aws-sdk/generator/shape::members))
(common-lisp:deftype part-size () 'common-lisp:integer)
(common-lisp:deftype primary-registry-alias-flag () 'common-lisp:boolean)
(common-lisp:deftype push-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-image-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor struct-shape-put-image-request-registry-id
                         :shape "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-image-request-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest :initarg :image-manifest :initform
                         (common-lisp:error ":imagemanifest is required") :type
                         (common-lisp:or image-manifest common-lisp:null)
                         :accessor
                         struct-shape-put-image-request-image-manifest :shape
                         "ImageManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor
                         struct-shape-put-image-request-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag :initarg :image-tag :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag common-lisp:null) :accessor
                         struct-shape-put-image-request-image-tag :shape
                         "ImageTag" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor struct-shape-put-image-request-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-request 'make-put-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-manifest))
      (common-lisp:list
       (common-lisp:cons "imageManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tag))
      (common-lisp:list
       (common-lisp:cons "imageTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-response common-lisp:nil
                       ((image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-put-image-response-image :shape "Image"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-response 'make-put-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-registry-catalog-data-request common-lisp:nil
                       ((display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-registry-catalog-data-request-display-name
                         :shape "RegistryDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-registry-catalog-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-registry-catalog-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-registry-catalog-data-request
                    'make-put-registry-catalog-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-catalog-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-catalog-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-catalog-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-registry-catalog-data-response common-lisp:nil
                       ((registry-catalog-data :initarg :registry-catalog-data
                         :initform
                         (common-lisp:error ":registrycatalogdata is required")
                         :type
                         (common-lisp:or registry-catalog-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-registry-catalog-data-response-registry-catalog-data
                         :shape "RegistryCatalogData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-registry-catalog-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-registry-catalog-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-registry-catalog-data-response
                    'make-put-registry-catalog-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-catalog-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-catalog-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registry-catalog-data))
      (common-lisp:list
       (common-lisp:cons "registryCatalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-catalog-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-repository-catalog-data-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-repository-catalog-data-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-repository-catalog-data-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-data :initarg :catalog-data :initform
                         (common-lisp:error ":catalogdata is required") :type
                         (common-lisp:or repository-catalog-data-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-repository-catalog-data-request-catalog-data
                         :shape "RepositoryCatalogDataInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-repository-catalog-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-repository-catalog-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-repository-catalog-data-request
                    'make-put-repository-catalog-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-catalog-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-catalog-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-data))
      (common-lisp:list
       (common-lisp:cons "catalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-catalog-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-repository-catalog-data-response common-lisp:nil
                       ((catalog-data :initarg :catalog-data :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-catalog-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-repository-catalog-data-response-catalog-data
                         :shape "RepositoryCatalogData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-repository-catalog-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-repository-catalog-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-repository-catalog-data-response
                    'make-put-repository-catalog-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-catalog-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-catalog-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-data))
      (common-lisp:list
       (common-lisp:cons "catalogData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-catalog-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass referenced-image-detail common-lisp:nil
                       ((image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         struct-shape-referenced-image-detail-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-size-in-bytes :initarg :image-size-in-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or image-size-in-bytes common-lisp:null)
                         :accessor
                         struct-shape-referenced-image-detail-image-size-in-bytes
                         :shape "ImageSizeInBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-pushed-at :initarg :image-pushed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or push-timestamp common-lisp:null)
                         :accessor
                         struct-shape-referenced-image-detail-image-pushed-at
                         :shape "PushTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor
                         struct-shape-referenced-image-detail-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-media-type :initarg :artifact-media-type
                         :initform common-lisp:nil :type
                         (common-lisp:or media-type common-lisp:null) :accessor
                         struct-shape-referenced-image-detail-artifact-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-referenced-image-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'referenced-image-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'referenced-image-detail 'make-referenced-image-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          referenced-image-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          referenced-image-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "imageSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pushed-at))
      (common-lisp:list
       (common-lisp:cons "imagePushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-media-type))
      (common-lisp:list
       (common-lisp:cons "artifactMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          referenced-image-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition referenced-images-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       referenced-images-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'referenced-images-not-found-exception
                    'referenced-images-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass registry common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         (common-lisp:error ":registryid is required") :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-registry-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         (common-lisp:error ":registryarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-registry-registry-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-uri :initarg :registry-uri :initform
                         (common-lisp:error ":registryuri is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-registry-registry-uri :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (verified :initarg :verified :initform
                         (common-lisp:error ":verified is required") :type
                         (common-lisp:or registry-verified common-lisp:null)
                         :accessor struct-shape-registry-verified :shape
                         "RegistryVerified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aliases :initarg :aliases :initform
                         (common-lisp:error ":aliases is required") :type
                         (common-lisp:or registry-alias-list common-lisp:null)
                         :accessor struct-shape-registry-aliases :shape
                         "RegistryAliasList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'registry 'make-registry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "registryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-uri))
      (common-lisp:list
       (common-lisp:cons "registryUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified))
      (common-lisp:list
       (common-lisp:cons "verified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registry-alias common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or registry-alias-name common-lisp:null)
                         :accessor struct-shape-registry-alias-name :shape
                         "RegistryAliasName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or registry-alias-status
                                         common-lisp:null)
                         :accessor struct-shape-registry-alias-status :shape
                         "RegistryAliasStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-registry-alias :initarg
                         :primary-registry-alias :initform
                         (common-lisp:error
                          ":primaryregistryalias is required")
                         :type
                         (common-lisp:or primary-registry-alias-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-registry-alias-primary-registry-alias
                         :shape "PrimaryRegistryAliasFlag" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-registry-alias :initarg
                         :default-registry-alias :initform
                         (common-lisp:error
                          ":defaultregistryalias is required")
                         :type
                         (common-lisp:or default-registry-alias-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-registry-alias-default-registry-alias
                         :shape "DefaultRegistryAliasFlag" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry-alias
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registry-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'registry-alias 'make-registry-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registry-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registry-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-registry-alias))
      (common-lisp:list
       (common-lisp:cons "primaryRegistryAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-registry-alias))
      (common-lisp:list
       (common-lisp:cons "defaultRegistryAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registry-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registry-alias-list ()
   '(trivial-types:proper-list registry-alias))
 (common-lisp:defun make-registry-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registry-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registry-alias-name () 'common-lisp:string)
(common-lisp:deftype registry-alias-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass registry-catalog-data common-lisp:nil
                       ((display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-registry-catalog-data-display-name :shape
                         "RegistryDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry-catalog-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registry-catalog-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'registry-catalog-data 'make-registry-catalog-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registry-catalog-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registry-catalog-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registry-catalog-data))
   common-lisp:nil))
(common-lisp:deftype registry-display-name () 'common-lisp:string)
(common-lisp:deftype registry-id () 'common-lisp:string)
(common-lisp:deftype registry-id-or-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype registry-list () '(trivial-types:proper-list registry))
 (common-lisp:defun make-registry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition registry-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       registry-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'registry-not-found-exception
                    'registry-not-found-exception-message)))
(common-lisp:deftype registry-verified () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass repository common-lisp:nil
                       ((repository-arn :initarg :repository-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-repository-repository-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-repository-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-repository-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-uri :initarg :repository-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-repository-repository-uri :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor struct-shape-repository-created-at :shape
                         "CreationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'repository 'make-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-uri))
      (common-lisp:list
       (common-lisp:cons "repositoryUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition repository-already-exists-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-already-exists-exception
                    'repository-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass repository-catalog-data common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-description
                         :shape "RepositoryDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (architectures :initarg :architectures :initform
                         common-lisp:nil :type
                         (common-lisp:or architecture-list common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-architectures
                         :shape "ArchitectureList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-systems :initarg :operating-systems
                         :initform common-lisp:nil :type
                         (common-lisp:or operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-operating-systems
                         :shape "OperatingSystemList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logo-url :initarg :logo-url :initform common-lisp:nil
                         :type (common-lisp:or resource-url common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-logo-url :shape
                         "ResourceUrl" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (about-text :initarg :about-text :initform
                         common-lisp:nil :type
                         (common-lisp:or about-text common-lisp:null) :accessor
                         struct-shape-repository-catalog-data-about-text :shape
                         "AboutText" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-text :initarg :usage-text :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-text common-lisp:null) :accessor
                         struct-shape-repository-catalog-data-usage-text :shape
                         "UsageText" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marketplace-certified :initarg :marketplace-certified
                         :initform common-lisp:nil :type
                         (common-lisp:or marketplace-certified
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-marketplace-certified
                         :shape "MarketplaceCertified" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-catalog-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-catalog-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-catalog-data 'make-repository-catalog-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-catalog-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-catalog-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-systems))
      (common-lisp:list
       (common-lisp:cons "operatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo-url))
      (common-lisp:list
       (common-lisp:cons "logoUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'about-text))
      (common-lisp:list
       (common-lisp:cons "aboutText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-text))
      (common-lisp:list
       (common-lisp:cons "usageText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-certified))
      (common-lisp:list
       (common-lisp:cons "marketplaceCertified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-catalog-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-catalog-data-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-input-description
                         :shape "RepositoryDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (architectures :initarg :architectures :initform
                         common-lisp:nil :type
                         (common-lisp:or architecture-list common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-input-architectures
                         :shape "ArchitectureList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-systems :initarg :operating-systems
                         :initform common-lisp:nil :type
                         (common-lisp:or operating-system-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-input-operating-systems
                         :shape "OperatingSystemList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logo-image-blob :initarg :logo-image-blob :initform
                         common-lisp:nil :type
                         (common-lisp:or logo-image-blob common-lisp:null)
                         :accessor
                         struct-shape-repository-catalog-data-input-logo-image-blob
                         :shape "LogoImageBlob" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (about-text :initarg :about-text :initform
                         common-lisp:nil :type
                         (common-lisp:or about-text common-lisp:null) :accessor
                         struct-shape-repository-catalog-data-input-about-text
                         :shape "AboutText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-text :initarg :usage-text :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-text common-lisp:null) :accessor
                         struct-shape-repository-catalog-data-input-usage-text
                         :shape "UsageText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-catalog-data-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'repository-catalog-data-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-catalog-data-input
                    'make-repository-catalog-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-catalog-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-catalog-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-systems))
      (common-lisp:list
       (common-lisp:cons "operatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo-image-blob))
      (common-lisp:list
       (common-lisp:cons "logoImageBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'about-text))
      (common-lisp:list
       (common-lisp:cons "aboutText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-text))
      (common-lisp:list
       (common-lisp:cons "usageText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-catalog-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition repository-catalog-data-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-catalog-data-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-catalog-data-not-found-exception
                    'repository-catalog-data-not-found-exception-message)))
(common-lisp:deftype repository-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-list ()
   '(trivial-types:proper-list repository))
 (common-lisp:defun make-repository-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-name-list ()
   '(trivial-types:proper-list repository-name))
 (common-lisp:defun make-repository-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition repository-not-empty-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-not-empty-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-not-empty-exception
                    'repository-not-empty-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition repository-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-not-found-exception
                    'repository-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition repository-policy-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-policy-not-found-exception
                    'repository-policy-not-found-exception-message)))
(common-lisp:deftype repository-policy-text () 'common-lisp:string)
(common-lisp:deftype resource-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass set-repository-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         (common-lisp:error ":policytext is required") :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-request-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-set-repository-policy-request-force
                         :shape "ForceFlag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-repository-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-repository-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-repository-policy-request
                    'make-set-repository-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-repository-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-response-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-repository-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-repository-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-repository-policy-response
                    'make-set-repository-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-command-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-command-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-command-exception
                    'unsupported-command-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype upload-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upload-layer-part-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id-or-alias common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-request-registry-id
                         :shape "RegistryIdOrAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-upload-layer-part-request-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-first-byte :initarg :part-first-byte :initform
                         (common-lisp:error ":partfirstbyte is required") :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-upload-layer-part-request-part-first-byte
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-last-byte :initarg :part-last-byte :initform
                         (common-lisp:error ":partlastbyte is required") :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-upload-layer-part-request-part-last-byte
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-part-blob :initarg :layer-part-blob :initform
                         (common-lisp:error ":layerpartblob is required") :type
                         (common-lisp:or layer-part-blob common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-request-layer-part-blob
                         :shape "LayerPartBlob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-layer-part-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-layer-part-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-layer-part-request
                    'make-upload-layer-part-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-first-byte))
      (common-lisp:list
       (common-lisp:cons "partFirstByte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-last-byte))
      (common-lisp:list
       (common-lisp:cons "partLastByte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-part-blob))
      (common-lisp:list
       (common-lisp:cons "layerPartBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-layer-part-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-upload-layer-part-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-byte-received :initarg :last-byte-received
                         :initform common-lisp:nil :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-upload-layer-part-response-last-byte-received
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-layer-part-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-layer-part-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-layer-part-response
                    'make-upload-layer-part-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-byte-received))
      (common-lisp:list
       (common-lisp:cons "lastByteReceived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition upload-not-found-exception
     (ecr-public-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       upload-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'upload-not-found-exception
                    'upload-not-found-exception-message)))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype usage-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-check-layer-availability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     layer-digests)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name layer-digests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-check-layer-availability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchCheckLayerAvailability"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-check-layer-availability))
(common-lisp:progn
 (common-lisp:defun batch-delete-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-ids)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-image))
(common-lisp:progn
 (common-lisp:defun complete-layer-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name upload-id
                     layer-digests)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name upload-id
     layer-digests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-layer-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CompleteLayerUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'complete-layer-upload))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name catalog-data tags)
   (common-lisp:declare
    (common-lisp:ignorable repository-name catalog-data tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name force)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun delete-repository-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepositoryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-repository-policy))
(common-lisp:progn
 (common-lisp:defun describe-image-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-image-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImageTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-image-tags))
(common-lisp:progn
 (common-lisp:defun describe-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-ids
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-ids next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-images))
(common-lisp:progn
 (common-lisp:defun describe-registries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-registries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRegistries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-registries))
(common-lisp:progn
 (common-lisp:defun describe-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-names next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-names next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-repositories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRepositories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-repositories))
(common-lisp:progn
 (common-lisp:defun get-authorization-token ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ecr-public-request :method "POST" :path "/"
                                :operation "GetAuthorizationToken"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-authorization-token))
(common-lisp:progn
 (common-lisp:defun get-registry-catalog-data ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ecr-public-request :method "POST" :path "/"
                                :operation "GetRegistryCatalogData"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-registry-catalog-data))
(common-lisp:progn
 (common-lisp:defun get-repository-catalog-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-repository-catalog-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepositoryCatalogData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository-catalog-data))
(common-lisp:progn
 (common-lisp:defun get-repository-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepositoryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository-policy))
(common-lisp:progn
 (common-lisp:defun initiate-layer-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-initiate-layer-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "InitiateLayerUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'initiate-layer-upload))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     image-manifest image-manifest-media-type image-tag
                     image-digest)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-manifest
     image-manifest-media-type image-tag image-digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-image))
(common-lisp:progn
 (common-lisp:defun put-registry-catalog-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key display-name)
   (common-lisp:declare (common-lisp:ignorable display-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-registry-catalog-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRegistryCatalogData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-registry-catalog-data))
(common-lisp:progn
 (common-lisp:defun put-repository-catalog-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name catalog-data)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name catalog-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-repository-catalog-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRepositoryCatalogData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-repository-catalog-data))
(common-lisp:progn
 (common-lisp:defun set-repository-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name policy-text
                     force)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name policy-text force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-repository-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetRepositoryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-repository-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun upload-layer-part
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name upload-id
                     part-first-byte part-last-byte layer-part-blob)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name upload-id
     part-first-byte part-last-byte layer-part-blob))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-layer-part-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-public-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadLayerPart"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upload-layer-part))
