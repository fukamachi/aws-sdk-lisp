;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/bedrock-agent-runtime/api
  (:use)
  (:nicknames #:aws/bedrock-agent-runtime)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/bedrock-agent-runtime/api)
(common-lisp:progn
 (common-lisp:define-condition bedrock-agent-runtime-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'bedrock-agent-runtime-error))
(common-lisp:progn
 (common-lisp:defclass bedrock-agent-runtime-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "bedrock-agent-runtime"
                        :api-version "2023-07-26" :host-prefix
                        "bedrock-agent-runtime" :signing-name "bedrock"
                        :global-host common-lisp:nil))
 (common-lisp:export 'bedrock-agent-runtime-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadGatewayException" . bad-gateway-exception)
    ("ConflictException" . conflict-exception)
    ("DependencyFailedException" . dependency-failed-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass action-group-invocation-input common-lisp:nil
                       ((action-group-name :initarg :action-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or action-group-name common-lisp:null)
                         :accessor
                         struct-shape-action-group-invocation-input-action-group-name
                         :shape "ActionGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-path :initarg :api-path :initform common-lisp:nil
                         :type (common-lisp:or api-path common-lisp:null)
                         :accessor
                         struct-shape-action-group-invocation-input-api-path
                         :shape "ApiPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         struct-shape-action-group-invocation-input-parameters
                         :shape "Parameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-body :initarg :request-body :initform
                         common-lisp:nil :type
                         (common-lisp:or request-body common-lisp:null)
                         :accessor
                         struct-shape-action-group-invocation-input-request-body
                         :shape "RequestBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verb :initarg :verb :initform common-lisp:nil :type
                         (common-lisp:or verb common-lisp:null) :accessor
                         struct-shape-action-group-invocation-input-verb :shape
                         "Verb" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-group-invocation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'action-group-invocation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-group-invocation-input
                    'make-action-group-invocation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-group-invocation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-group-invocation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-group-name))
      (common-lisp:list
       (common-lisp:cons "actionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-path))
      (common-lisp:list
       (common-lisp:cons "apiPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-body))
      (common-lisp:list
       (common-lisp:cons "requestBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verb))
      (common-lisp:list
       (common-lisp:cons "verb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-group-invocation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-group-invocation-output common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or action-group-output-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-group-invocation-output-text
                         :shape "ActionGroupOutputString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-group-invocation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'action-group-invocation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-group-invocation-output
                    'make-action-group-invocation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-group-invocation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-group-invocation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-group-invocation-output))
   common-lisp:nil))
(common-lisp:deftype action-group-name () 'common-lisp:string)
(common-lisp:deftype action-group-output-string () 'common-lisp:string)
(common-lisp:deftype agent-alias-id () 'common-lisp:string)
(common-lisp:deftype agent-id () 'common-lisp:string)
(common-lisp:deftype api-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribution common-lisp:nil
                       ((citations :initarg :citations :initform
                         common-lisp:nil :type
                         (common-lisp:or citations common-lisp:null) :accessor
                         struct-shape-attribution-citations :shape "Citations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribution
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribution 'make-attribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'citations))
      (common-lisp:list
       (common-lisp:cons "citations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-gateway-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-gateway-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       bad-gateway-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'bad-gateway-exception 'bad-gateway-exception-message
                    'bad-gateway-exception-resource-name)))
(common-lisp:deftype bedrock-model-arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass citation common-lisp:nil
                       ((generated-response-part :initarg
                         :generated-response-part :initform common-lisp:nil
                         :type
                         (common-lisp:or generated-response-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-citation-generated-response-part :shape
                         "GeneratedResponsePart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retrieved-references :initarg :retrieved-references
                         :initform common-lisp:nil :type
                         (common-lisp:or retrieved-references common-lisp:null)
                         :accessor struct-shape-citation-retrieved-references
                         :shape "RetrievedReferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-citation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'citation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'citation 'make-citation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input citation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input citation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-response-part))
      (common-lisp:list
       (common-lisp:cons "generatedResponsePart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retrieved-references))
      (common-lisp:list
       (common-lisp:cons "retrievedReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input citation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype citations () '(trivial-types:proper-list citation))
 (common-lisp:defun make-citations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list citation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:deftype content-map () 'common-lisp:hash-table)
 (common-lisp:defun make-content-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype creation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition dependency-failed-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-failed-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       dependency-failed-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'dependency-failed-exception
                    'dependency-failed-exception-message
                    'dependency-failed-exception-resource-name)))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype failure-reason-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failure-trace common-lisp:nil
                       ((failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason-string
                                         common-lisp:null)
                         :accessor struct-shape-failure-trace-failure-reason
                         :shape "FailureReasonString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor struct-shape-failure-trace-trace-id :shape
                         "TraceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failure-trace
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failure-trace
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failure-trace 'make-failure-trace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-trace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-trace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-trace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass final-response common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or final-response-string
                                         common-lisp:null)
                         :accessor struct-shape-final-response-text :shape
                         "FinalResponseString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-final-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'final-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'final-response 'make-final-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input final-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input final-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input final-response))
   common-lisp:nil))
(common-lisp:deftype final-response-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass generated-response-part common-lisp:nil
                       ((text-response-part :initarg :text-response-part
                         :initform common-lisp:nil :type
                         (common-lisp:or text-response-part common-lisp:null)
                         :accessor
                         struct-shape-generated-response-part-text-response-part
                         :shape "TextResponsePart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generated-response-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generated-response-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generated-response-part 'make-generated-response-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-response-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-response-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-response-part))
      (common-lisp:list
       (common-lisp:cons "textResponsePart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-response-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inference-configuration common-lisp:nil
                       ((maximum-length :initarg :maximum-length :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-length common-lisp:null)
                         :accessor
                         struct-shape-inference-configuration-maximum-length
                         :shape "MaximumLength" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-sequences :initarg :stop-sequences :initform
                         common-lisp:nil :type
                         (common-lisp:or stop-sequences common-lisp:null)
                         :accessor
                         struct-shape-inference-configuration-stop-sequences
                         :shape "StopSequences" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temperature :initarg :temperature :initform
                         common-lisp:nil :type
                         (common-lisp:or temperature common-lisp:null)
                         :accessor
                         struct-shape-inference-configuration-temperature
                         :shape "Temperature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (top-k :initarg :top-k :initform common-lisp:nil :type
                         (common-lisp:or top-k common-lisp:null) :accessor
                         struct-shape-inference-configuration-top-k :shape
                         "TopK" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (top-p :initarg :top-p :initform common-lisp:nil :type
                         (common-lisp:or top-p common-lisp:null) :accessor
                         struct-shape-inference-configuration-top-p :shape
                         "TopP" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inference-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inference-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inference-configuration 'make-inference-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-length))
      (common-lisp:list
       (common-lisp:cons "maximumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-sequences))
      (common-lisp:list
       (common-lisp:cons "stopSequences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temperature))
      (common-lisp:list
       (common-lisp:cons "temperature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-k))
      (common-lisp:list
       (common-lisp:cons "topK"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-p))
      (common-lisp:list
       (common-lisp:cons "topP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-configuration))
   common-lisp:nil))
(common-lisp:deftype input-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invocation-input common-lisp:nil
                       ((action-group-invocation-input :initarg
                         :action-group-invocation-input :initform
                         common-lisp:nil :type
                         (common-lisp:or action-group-invocation-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-invocation-input-action-group-invocation-input
                         :shape "ActionGroupInvocationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (invocation-type :initarg :invocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or invocation-type common-lisp:null)
                         :accessor
                         struct-shape-invocation-input-invocation-type :shape
                         "InvocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-lookup-input :initarg
                         :knowledge-base-lookup-input :initform common-lisp:nil
                         :type
                         (common-lisp:or knowledge-base-lookup-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-invocation-input-knowledge-base-lookup-input
                         :shape "KnowledgeBaseLookupInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor struct-shape-invocation-input-trace-id
                         :shape "TraceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invocation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invocation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invocation-input 'make-invocation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invocation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invocation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-group-invocation-input))
      (common-lisp:list
       (common-lisp:cons "actionGroupInvocationInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:list
       (common-lisp:cons "invocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-lookup-input))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseLookupInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invocation-input))
   common-lisp:nil))
(common-lisp:deftype invocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass invoke-agent-request common-lisp:nil
                       ((agent-alias-id :initarg :agent-alias-id :initform
                         (common-lisp:error ":agentaliasid is required") :type
                         (common-lisp:or agent-alias-id common-lisp:null)
                         :accessor
                         struct-shape-invoke-agent-request-agent-alias-id
                         :shape "AgentAliasId" :location "uri" :location-name
                         "agentAliasId")
                        (agent-id :initarg :agent-id :initform
                         (common-lisp:error ":agentid is required") :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         struct-shape-invoke-agent-request-agent-id :shape
                         "AgentId" :location "uri" :location-name "agentId")
                        (enable-trace :initarg :enable-trace :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-invoke-agent-request-enable-trace :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-session :initarg :end-session :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-invoke-agent-request-end-session :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-text :initarg :input-text :initform
                         (common-lisp:error ":inputtext is required") :type
                         (common-lisp:or input-text common-lisp:null) :accessor
                         struct-shape-invoke-agent-request-input-text :shape
                         "InputText" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-invoke-agent-request-session-id :shape
                         "SessionId" :location "uri" :location-name
                         "sessionId")
                        (session-state :initarg :session-state :initform
                         common-lisp:nil :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor
                         struct-shape-invoke-agent-request-session-state :shape
                         "SessionState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-agent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoke-agent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-agent-request 'make-invoke-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invoke-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invoke-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-trace))
      (common-lisp:list
       (common-lisp:cons "enableTrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-session))
      (common-lisp:list
       (common-lisp:cons "endSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-text))
      (common-lisp:list
       (common-lisp:cons "inputText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invoke-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invoke-agent-response common-lisp:nil
                       ((completion :initarg :completion :initform
                         (common-lisp:error ":completion is required") :type
                         (common-lisp:or response-stream common-lisp:null)
                         :accessor
                         struct-shape-invoke-agent-response-completion :shape
                         "ResponseStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or mime-type common-lisp:null) :accessor
                         struct-shape-invoke-agent-response-content-type :shape
                         "MimeType" :location "header" :location-name
                         "x-amzn-bedrock-agent-content-type")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-invoke-agent-response-session-id :shape
                         "SessionId" :location "header" :location-name
                         "x-amz-bedrock-agent-session-id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-agent-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoke-agent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-agent-response 'make-invoke-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "x-amzn-bedrock-agent-content-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amz-bedrock-agent-session-id"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion))
      (common-lisp:list
       (common-lisp:cons "completion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-agent-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'completion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          invoke-agent-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype knowledge-base-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass knowledge-base-lookup-input common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform common-lisp:nil :type
                         (common-lisp:or trace-knowledge-base-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-lookup-input-knowledge-base-id
                         :shape "TraceKnowledgeBaseId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or knowledge-base-lookup-input-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-lookup-input-text :shape
                         "KnowledgeBaseLookupInputString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-lookup-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'knowledge-base-lookup-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-lookup-input
                    'make-knowledge-base-lookup-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-lookup-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-lookup-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-lookup-input))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-lookup-input-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass knowledge-base-lookup-output common-lisp:nil
                       ((retrieved-references :initarg :retrieved-references
                         :initform common-lisp:nil :type
                         (common-lisp:or retrieved-references common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-lookup-output-retrieved-references
                         :shape "RetrievedReferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-lookup-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'knowledge-base-lookup-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-lookup-output
                    'make-knowledge-base-lookup-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-lookup-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-lookup-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retrieved-references))
      (common-lisp:list
       (common-lisp:cons "retrievedReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-lookup-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass knowledge-base-query common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or knowledge-base-query-text-string
                                         common-lisp:null)
                         :accessor struct-shape-knowledge-base-query-text
                         :shape "KnowledgeBaseQueryTextString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'knowledge-base-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-query 'make-knowledge-base-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input knowledge-base-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input knowledge-base-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input knowledge-base-query))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-query-text-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass knowledge-base-retrieval-configuration common-lisp:nil
                       ((vector-search-configuration :initarg
                         :vector-search-configuration :initform
                         (common-lisp:error
                          ":vectorsearchconfiguration is required")
                         :type
                         (common-lisp:or
                          knowledge-base-vector-search-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-retrieval-configuration-vector-search-configuration
                         :shape "KnowledgeBaseVectorSearchConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-retrieval-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'knowledge-base-retrieval-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-retrieval-configuration
                    'make-knowledge-base-retrieval-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieval-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieval-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vector-search-configuration))
      (common-lisp:list
       (common-lisp:cons "vectorSearchConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieval-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass knowledge-base-retrieval-result common-lisp:nil
                       ((content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or retrieval-result-content
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-retrieval-result-content
                         :shape "RetrievalResultContent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or retrieval-result-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-retrieval-result-location
                         :shape "RetrievalResultLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-knowledge-base-retrieval-result-score
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-retrieval-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'knowledge-base-retrieval-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-retrieval-result
                    'make-knowledge-base-retrieval-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieval-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieval-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieval-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype knowledge-base-retrieval-results ()
   '(trivial-types:proper-list knowledge-base-retrieval-result))
 (common-lisp:defun make-knowledge-base-retrieval-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            knowledge-base-retrieval-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass knowledge-base-retrieve-and-generate-configuration
                       common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type
                         (common-lisp:or knowledge-base-id common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-retrieve-and-generate-configuration-knowledge-base-id
                         :shape "KnowledgeBaseId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-arn :initarg :model-arn :initform
                         (common-lisp:error ":modelarn is required") :type
                         (common-lisp:or bedrock-model-arn common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-retrieve-and-generate-configuration-model-arn
                         :shape "BedrockModelArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retrieval-configuration :initarg
                         :retrieval-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or knowledge-base-retrieval-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-retrieve-and-generate-configuration-retrieval-configuration
                         :shape "KnowledgeBaseRetrievalConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-retrieve-and-generate-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'knowledge-base-retrieve-and-generate-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-retrieve-and-generate-configuration
                    'make-knowledge-base-retrieve-and-generate-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieve-and-generate-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieve-and-generate-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "modelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retrieval-configuration))
      (common-lisp:list
       (common-lisp:cons "retrievalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-retrieve-and-generate-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass knowledge-base-vector-search-configuration
                       common-lisp:nil
                       ((number-of-results :initarg :number-of-results
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          knowledge-base-vector-search-configuration-number-of-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-vector-search-configuration-number-of-results
                         :shape
                         "KnowledgeBaseVectorSearchConfigurationNumberOfResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (override-search-type :initarg :override-search-type
                         :initform common-lisp:nil :type
                         (common-lisp:or search-type common-lisp:null)
                         :accessor
                         struct-shape-knowledge-base-vector-search-configuration-override-search-type
                         :shape "SearchType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-knowledge-base-vector-search-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'knowledge-base-vector-search-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-vector-search-configuration
                    'make-knowledge-base-vector-search-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-vector-search-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-vector-search-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-results))
      (common-lisp:list
       (common-lisp:cons "numberOfResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-search-type))
      (common-lisp:list
       (common-lisp:cons "overrideSearchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-vector-search-configuration))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-vector-search-configuration-number-of-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:deftype maximum-length () 'common-lisp:integer)
(common-lisp:deftype mime-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-invocation-input common-lisp:nil
                       ((inference-configuration :initarg
                         :inference-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or inference-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-model-invocation-input-inference-configuration
                         :shape "InferenceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (override-lambda :initarg :override-lambda :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         struct-shape-model-invocation-input-override-lambda
                         :shape "LambdaArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parser-mode :initarg :parser-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-mode common-lisp:null)
                         :accessor
                         struct-shape-model-invocation-input-parser-mode :shape
                         "CreationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prompt-creation-mode :initarg :prompt-creation-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or creation-mode common-lisp:null)
                         :accessor
                         struct-shape-model-invocation-input-prompt-creation-mode
                         :shape "CreationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or prompt-text common-lisp:null)
                         :accessor struct-shape-model-invocation-input-text
                         :shape "PromptText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor struct-shape-model-invocation-input-trace-id
                         :shape "TraceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or prompt-type common-lisp:null)
                         :accessor struct-shape-model-invocation-input-type
                         :shape "PromptType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-invocation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-invocation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-invocation-input 'make-model-invocation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-invocation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-invocation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-configuration))
      (common-lisp:list
       (common-lisp:cons "inferenceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-lambda))
      (common-lisp:list
       (common-lisp:cons "overrideLambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parser-mode))
      (common-lisp:list
       (common-lisp:cons "parserMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-creation-mode))
      (common-lisp:list
       (common-lisp:cons "promptCreationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-invocation-input))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-blank-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass observation common-lisp:nil
                       ((action-group-invocation-output :initarg
                         :action-group-invocation-output :initform
                         common-lisp:nil :type
                         (common-lisp:or action-group-invocation-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-observation-action-group-invocation-output
                         :shape "ActionGroupInvocationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (final-response :initarg :final-response :initform
                         common-lisp:nil :type
                         (common-lisp:or final-response common-lisp:null)
                         :accessor struct-shape-observation-final-response
                         :shape "FinalResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (knowledge-base-lookup-output :initarg
                         :knowledge-base-lookup-output :initform
                         common-lisp:nil :type
                         (common-lisp:or knowledge-base-lookup-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-observation-knowledge-base-lookup-output
                         :shape "KnowledgeBaseLookupOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reprompt-response :initarg :reprompt-response
                         :initform common-lisp:nil :type
                         (common-lisp:or reprompt-response common-lisp:null)
                         :accessor struct-shape-observation-reprompt-response
                         :shape "RepromptResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor struct-shape-observation-trace-id :shape
                         "TraceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-observation-type :shape "Type" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-observation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'observation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'observation 'make-observation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input observation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input observation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-group-invocation-output))
      (common-lisp:list
       (common-lisp:cons "actionGroupInvocationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-response))
      (common-lisp:list
       (common-lisp:cons "finalResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-lookup-output))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseLookupOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reprompt-response))
      (common-lisp:list
       (common-lisp:cons "repromptResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input observation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass orchestration-trace common-lisp:nil
                       ((invocation-input :initarg :invocation-input :initform
                         common-lisp:nil :type
                         (common-lisp:or invocation-input common-lisp:null)
                         :accessor
                         struct-shape-orchestration-trace-invocation-input
                         :shape "InvocationInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-invocation-input :initarg
                         :model-invocation-input :initform common-lisp:nil
                         :type
                         (common-lisp:or model-invocation-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-orchestration-trace-model-invocation-input
                         :shape "ModelInvocationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (observation :initarg :observation :initform
                         common-lisp:nil :type
                         (common-lisp:or observation common-lisp:null)
                         :accessor struct-shape-orchestration-trace-observation
                         :shape "Observation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rationale :initarg :rationale :initform
                         common-lisp:nil :type
                         (common-lisp:or rationale common-lisp:null) :accessor
                         struct-shape-orchestration-trace-rationale :shape
                         "Rationale" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-orchestration-trace
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'orchestration-trace
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'orchestration-trace 'make-orchestration-trace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input orchestration-trace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input orchestration-trace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-input))
      (common-lisp:list
       (common-lisp:cons "invocationInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-invocation-input))
      (common-lisp:list
       (common-lisp:cons "modelInvocationInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation))
      (common-lisp:list
       (common-lisp:cons "observation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rationale))
      (common-lisp:list
       (common-lisp:cons "rationale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input orchestration-trace))
   common-lisp:nil))
(common-lisp:deftype output-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameters () '(trivial-types:proper-list parameter))
 (common-lisp:defun make-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype part-body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass payload-part common-lisp:nil
                       ((attribution :initarg :attribution :initform
                         common-lisp:nil :type
                         (common-lisp:or attribution common-lisp:null)
                         :accessor struct-shape-payload-part-attribution :shape
                         "Attribution" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bytes :initarg :bytes :initform common-lisp:nil :type
                         (common-lisp:or part-body common-lisp:null) :accessor
                         struct-shape-payload-part-bytes :shape "PartBody"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-payload-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'payload-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'payload-part 'make-payload-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input payload-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input payload-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribution))
      (common-lisp:list
       (common-lisp:cons "attribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input payload-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-processing-model-invocation-output common-lisp:nil
                       ((parsed-response :initarg :parsed-response :initform
                         common-lisp:nil :type
                         (common-lisp:or post-processing-parsed-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-processing-model-invocation-output-parsed-response
                         :shape "PostProcessingParsedResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor
                         struct-shape-post-processing-model-invocation-output-trace-id
                         :shape "TraceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-processing-model-invocation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'post-processing-model-invocation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-processing-model-invocation-output
                    'make-post-processing-model-invocation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-model-invocation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-model-invocation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parsed-response))
      (common-lisp:list
       (common-lisp:cons "parsedResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-model-invocation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-processing-parsed-response common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or output-string common-lisp:null)
                         :accessor
                         struct-shape-post-processing-parsed-response-text
                         :shape "OutputString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-processing-parsed-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'post-processing-parsed-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-processing-parsed-response
                    'make-post-processing-parsed-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-parsed-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-parsed-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-parsed-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-processing-trace common-lisp:nil
                       ((model-invocation-input :initarg
                         :model-invocation-input :initform common-lisp:nil
                         :type
                         (common-lisp:or model-invocation-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-processing-trace-model-invocation-input
                         :shape "ModelInvocationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-invocation-output :initarg
                         :model-invocation-output :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          post-processing-model-invocation-output
                          common-lisp:null)
                         :accessor
                         struct-shape-post-processing-trace-model-invocation-output
                         :shape "PostProcessingModelInvocationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-processing-trace
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'post-processing-trace
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-processing-trace 'make-post-processing-trace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-trace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-trace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-invocation-input))
      (common-lisp:list
       (common-lisp:cons "modelInvocationInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-invocation-output))
      (common-lisp:list
       (common-lisp:cons "modelInvocationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-processing-trace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pre-processing-model-invocation-output common-lisp:nil
                       ((parsed-response :initarg :parsed-response :initform
                         common-lisp:nil :type
                         (common-lisp:or pre-processing-parsed-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-pre-processing-model-invocation-output-parsed-response
                         :shape "PreProcessingParsedResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor
                         struct-shape-pre-processing-model-invocation-output-trace-id
                         :shape "TraceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pre-processing-model-invocation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pre-processing-model-invocation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pre-processing-model-invocation-output
                    'make-pre-processing-model-invocation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pre-processing-model-invocation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pre-processing-model-invocation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parsed-response))
      (common-lisp:list
       (common-lisp:cons "parsedResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pre-processing-model-invocation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pre-processing-parsed-response common-lisp:nil
                       ((is-valid :initarg :is-valid :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-pre-processing-parsed-response-is-valid
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rationale :initarg :rationale :initform
                         common-lisp:nil :type
                         (common-lisp:or rationale-string common-lisp:null)
                         :accessor
                         struct-shape-pre-processing-parsed-response-rationale
                         :shape "RationaleString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pre-processing-parsed-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pre-processing-parsed-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pre-processing-parsed-response
                    'make-pre-processing-parsed-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pre-processing-parsed-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pre-processing-parsed-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-valid))
      (common-lisp:list
       (common-lisp:cons "isValid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rationale))
      (common-lisp:list
       (common-lisp:cons "rationale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pre-processing-parsed-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pre-processing-trace common-lisp:nil
                       ((model-invocation-input :initarg
                         :model-invocation-input :initform common-lisp:nil
                         :type
                         (common-lisp:or model-invocation-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-pre-processing-trace-model-invocation-input
                         :shape "ModelInvocationInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-invocation-output :initarg
                         :model-invocation-output :initform common-lisp:nil
                         :type
                         (common-lisp:or pre-processing-model-invocation-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-pre-processing-trace-model-invocation-output
                         :shape "PreProcessingModelInvocationOutput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pre-processing-trace
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pre-processing-trace
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pre-processing-trace 'make-pre-processing-trace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pre-processing-trace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pre-processing-trace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-invocation-input))
      (common-lisp:list
       (common-lisp:cons "modelInvocationInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-invocation-output))
      (common-lisp:list
       (common-lisp:cons "modelInvocationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pre-processing-trace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prompt-session-attributes-map () 'common-lisp:hash-table)
 (common-lisp:defun make-prompt-session-attributes-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype prompt-text () 'common-lisp:string)
(common-lisp:deftype prompt-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rationale common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or rationale-string common-lisp:null)
                         :accessor struct-shape-rationale-text :shape
                         "RationaleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace-id :initarg :trace-id :initform common-lisp:nil
                         :type (common-lisp:or trace-id common-lisp:null)
                         :accessor struct-shape-rationale-trace-id :shape
                         "TraceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rationale
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rationale
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rationale 'make-rationale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rationale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rationale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "traceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rationale))
   common-lisp:nil))
(common-lisp:deftype rationale-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reprompt-response common-lisp:nil
                       ((source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor struct-shape-reprompt-response-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reprompt-response-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reprompt-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reprompt-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reprompt-response 'make-reprompt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reprompt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reprompt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reprompt-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-body common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or content-map common-lisp:null)
                         :accessor struct-shape-request-body-content :shape
                         "ContentMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-request-body
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'request-body
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'request-body 'make-request-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass response-stream common-lisp:nil
                       ((access-denied-exception :initarg
                         :access-denied-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or access-denied-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-access-denied-exception
                         :shape "AccessDeniedException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bad-gateway-exception :initarg :bad-gateway-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or bad-gateway-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-bad-gateway-exception
                         :shape "BadGatewayException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (chunk :initarg :chunk :initform common-lisp:nil :type
                         (common-lisp:or payload-part common-lisp:null)
                         :accessor struct-shape-response-stream-chunk :shape
                         "PayloadPart" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conflict-exception :initarg :conflict-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or conflict-exception common-lisp:null)
                         :accessor
                         struct-shape-response-stream-conflict-exception :shape
                         "ConflictException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dependency-failed-exception :initarg
                         :dependency-failed-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or dependency-failed-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-dependency-failed-exception
                         :shape "DependencyFailedException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (internal-server-exception :initarg
                         :internal-server-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or internal-server-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-internal-server-exception
                         :shape "InternalServerException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-not-found-exception :initarg
                         :resource-not-found-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-not-found-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-resource-not-found-exception
                         :shape "ResourceNotFoundException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-quota-exceeded-exception :initarg
                         :service-quota-exceeded-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or service-quota-exceeded-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-service-quota-exceeded-exception
                         :shape "ServiceQuotaExceededException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (throttling-exception :initarg :throttling-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or throttling-exception common-lisp:null)
                         :accessor
                         struct-shape-response-stream-throttling-exception
                         :shape "ThrottlingException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trace :initarg :trace :initform common-lisp:nil :type
                         (common-lisp:or trace-part common-lisp:null) :accessor
                         struct-shape-response-stream-trace :shape "TracePart"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-exception :initarg :validation-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or validation-exception common-lisp:null)
                         :accessor
                         struct-shape-response-stream-validation-exception
                         :shape "ValidationException" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'response-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'response-stream 'make-response-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-denied-exception))
      (common-lisp:list
       (common-lisp:cons "accessDeniedException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-gateway-exception))
      (common-lisp:list
       (common-lisp:cons "badGatewayException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chunk))
      (common-lisp:list
       (common-lisp:cons "chunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "conflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dependency-failed-exception))
      (common-lisp:list
       (common-lisp:cons "dependencyFailedException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-server-exception))
      (common-lisp:list
       (common-lisp:cons "internalServerException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-not-found-exception))
      (common-lisp:list
       (common-lisp:cons "resourceNotFoundException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-quota-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "serviceQuotaExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-exception))
      (common-lisp:list
       (common-lisp:cons "throttlingException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace))
      (common-lisp:list
       (common-lisp:cons "trace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-exception))
      (common-lisp:list
       (common-lisp:cons "validationException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieval-result-content common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-retrieval-result-content-text :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieval-result-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieval-result-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieval-result-content 'make-retrieval-result-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieval-result-location common-lisp:nil
                       ((s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or retrieval-result-s3location
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieval-result-location-s3location
                         :shape "RetrievalResultS3Location" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or retrieval-result-location-type
                                         common-lisp:null)
                         :accessor struct-shape-retrieval-result-location-type
                         :shape "RetrievalResultLocationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieval-result-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieval-result-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieval-result-location
                    'make-retrieval-result-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-location))
   common-lisp:nil))
(common-lisp:deftype retrieval-result-location-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retrieval-result-s3location common-lisp:nil
                       ((uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-retrieval-result-s3location-uri :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieval-result-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieval-result-s3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieval-result-s3location
                    'make-retrieval-result-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieval-result-s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-and-generate-configuration common-lisp:nil
                       ((knowledge-base-configuration :initarg
                         :knowledge-base-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          knowledge-base-retrieve-and-generate-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-configuration-knowledge-base-configuration
                         :shape "KnowledgeBaseRetrieveAndGenerateConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or retrieve-and-generate-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-configuration-type
                         :shape "RetrieveAndGenerateType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-and-generate-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-and-generate-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-and-generate-configuration
                    'make-retrieve-and-generate-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-configuration))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-and-generate-input common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or
                          retrieve-and-generate-input-text-string
                          common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-input-text :shape
                         "RetrieveAndGenerateInputTextString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-and-generate-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieve-and-generate-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-and-generate-input
                    'make-retrieve-and-generate-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-input))
   common-lisp:nil))
(common-lisp:deftype retrieve-and-generate-input-text-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retrieve-and-generate-output common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-retrieve-and-generate-output-text :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-and-generate-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieve-and-generate-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-and-generate-output
                    'make-retrieve-and-generate-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-and-generate-request common-lisp:nil
                       ((input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or retrieve-and-generate-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-request-input
                         :shape "RetrieveAndGenerateInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retrieve-and-generate-configuration :initarg
                         :retrieve-and-generate-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or retrieve-and-generate-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-request-retrieve-and-generate-configuration
                         :shape "RetrieveAndGenerateConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-configuration :initarg :session-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          retrieve-and-generate-session-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-request-session-configuration
                         :shape "RetrieveAndGenerateSessionConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-retrieve-and-generate-request-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-and-generate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-and-generate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-and-generate-request
                    'make-retrieve-and-generate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retrieve-and-generate-configuration))
      (common-lisp:list
       (common-lisp:cons "retrieveAndGenerateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-configuration))
      (common-lisp:list
       (common-lisp:cons "sessionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-and-generate-response common-lisp:nil
                       ((citations :initarg :citations :initform
                         common-lisp:nil :type
                         (common-lisp:or citations common-lisp:null) :accessor
                         struct-shape-retrieve-and-generate-response-citations
                         :shape "Citations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output :initarg :output :initform
                         (common-lisp:error ":output is required") :type
                         (common-lisp:or retrieve-and-generate-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-response-output
                         :shape "RetrieveAndGenerateOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":sessionid is required") :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-retrieve-and-generate-response-session-id
                         :shape "SessionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-and-generate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-and-generate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-and-generate-response
                    'make-retrieve-and-generate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'citations))
      (common-lisp:list
       (common-lisp:cons "citations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-and-generate-session-configuration
                       common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :initform
                         (common-lisp:error ":kmskeyarn is required") :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-retrieve-and-generate-session-configuration-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-and-generate-session-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-and-generate-session-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-and-generate-session-configuration
                    'make-retrieve-and-generate-session-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-and-generate-session-configuration))
   common-lisp:nil))
(common-lisp:deftype retrieve-and-generate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retrieve-request common-lisp:nil
                       ((knowledge-base-id :initarg :knowledge-base-id
                         :initform
                         (common-lisp:error ":knowledgebaseid is required")
                         :type
                         (common-lisp:or knowledge-base-id common-lisp:null)
                         :accessor
                         struct-shape-retrieve-request-knowledge-base-id :shape
                         "KnowledgeBaseId" :location "uri" :location-name
                         "knowledgeBaseId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-retrieve-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retrieval-configuration :initarg
                         :retrieval-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or knowledge-base-retrieval-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieve-request-retrieval-configuration
                         :shape "KnowledgeBaseRetrievalConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retrieval-query :initarg :retrieval-query :initform
                         (common-lisp:error ":retrievalquery is required")
                         :type
                         (common-lisp:or knowledge-base-query common-lisp:null)
                         :accessor
                         struct-shape-retrieve-request-retrieval-query :shape
                         "KnowledgeBaseQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieve-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-request 'make-retrieve-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retrieve-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retrieve-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retrieval-configuration))
      (common-lisp:list
       (common-lisp:cons "retrievalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieval-query))
      (common-lisp:list
       (common-lisp:cons "retrievalQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retrieve-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-retrieve-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retrieval-results :initarg :retrieval-results
                         :initform
                         (common-lisp:error ":retrievalresults is required")
                         :type
                         (common-lisp:or knowledge-base-retrieval-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-retrieve-response-retrieval-results
                         :shape "KnowledgeBaseRetrievalResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieve-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieve-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieve-response 'make-retrieve-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retrieve-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retrieve-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieval-results))
      (common-lisp:list
       (common-lisp:cons "retrievalResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retrieve-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieved-reference common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or retrieval-result-content
                                         common-lisp:null)
                         :accessor struct-shape-retrieved-reference-content
                         :shape "RetrievalResultContent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or retrieval-result-location
                                         common-lisp:null)
                         :accessor struct-shape-retrieved-reference-location
                         :shape "RetrievalResultLocation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retrieved-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retrieved-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retrieved-reference 'make-retrieved-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retrieved-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retrieved-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retrieved-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype retrieved-references ()
   '(trivial-types:proper-list retrieved-reference))
 (common-lisp:defun make-retrieved-references
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retrieved-reference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype session-attributes-map () 'common-lisp:hash-table)
 (common-lisp:defun make-session-attributes-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-state common-lisp:nil
                       ((prompt-session-attributes :initarg
                         :prompt-session-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or prompt-session-attributes-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-state-prompt-session-attributes
                         :shape "PromptSessionAttributesMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-attributes :initarg :session-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or session-attributes-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-state-session-attributes :shape
                         "SessionAttributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session-state 'make-session-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-session-attributes))
      (common-lisp:list
       (common-lisp:cons "promptSessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-state))
   common-lisp:nil))
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass span common-lisp:nil
                       ((end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or span-end-integer common-lisp:null)
                         :accessor struct-shape-span-end :shape
                         "SpanEndInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or span-start-integer common-lisp:null)
                         :accessor struct-shape-span-start :shape
                         "SpanStartInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-span (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'span
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'span 'make-span))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input span))
   common-lisp:nil))
(common-lisp:deftype span-end-integer () 'common-lisp:integer)
(common-lisp:deftype span-start-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype stop-sequences () '(trivial-types:proper-list string))
 (common-lisp:defun make-stop-sequences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype temperature () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass text-response-part common-lisp:nil
                       ((span :initarg :span :initform common-lisp:nil :type
                         (common-lisp:or span common-lisp:null) :accessor
                         struct-shape-text-response-part-span :shape "Span"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-text-response-part-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-response-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-response-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-response-part 'make-text-response-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-response-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-response-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'span))
      (common-lisp:list
       (common-lisp:cons "span"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-response-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype top-k () 'common-lisp:integer)
(common-lisp:deftype top-p () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass trace common-lisp:nil
                       ((failure-trace :initarg :failure-trace :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-trace common-lisp:null)
                         :accessor struct-shape-trace-failure-trace :shape
                         "FailureTrace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (orchestration-trace :initarg :orchestration-trace
                         :initform common-lisp:nil :type
                         (common-lisp:or orchestration-trace common-lisp:null)
                         :accessor struct-shape-trace-orchestration-trace
                         :shape "OrchestrationTrace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-processing-trace :initarg :post-processing-trace
                         :initform common-lisp:nil :type
                         (common-lisp:or post-processing-trace
                                         common-lisp:null)
                         :accessor struct-shape-trace-post-processing-trace
                         :shape "PostProcessingTrace" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-processing-trace :initarg :pre-processing-trace
                         :initform common-lisp:nil :type
                         (common-lisp:or pre-processing-trace common-lisp:null)
                         :accessor struct-shape-trace-pre-processing-trace
                         :shape "PreProcessingTrace" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trace
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trace
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trace 'make-trace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-trace))
      (common-lisp:list
       (common-lisp:cons "failureTrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orchestration-trace))
      (common-lisp:list
       (common-lisp:cons "orchestrationTrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-processing-trace))
      (common-lisp:list
       (common-lisp:cons "postProcessingTrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-processing-trace))
      (common-lisp:list
       (common-lisp:cons "preProcessingTrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace))
   common-lisp:nil))
(common-lisp:deftype trace-id () 'common-lisp:string)
(common-lisp:deftype trace-knowledge-base-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trace-part common-lisp:nil
                       ((agent-alias-id :initarg :agent-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or agent-alias-id common-lisp:null)
                         :accessor struct-shape-trace-part-agent-alias-id
                         :shape "AgentAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-id :initarg :agent-id :initform common-lisp:nil
                         :type (common-lisp:or agent-id common-lisp:null)
                         :accessor struct-shape-trace-part-agent-id :shape
                         "AgentId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-trace-part-session-id :shape "SessionId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trace :initarg :trace :initform common-lisp:nil :type
                         (common-lisp:or trace common-lisp:null) :accessor
                         struct-shape-trace-part-trace :shape "Trace" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trace-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trace-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trace-part 'make-trace-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-alias-id))
      (common-lisp:list
       (common-lisp:cons "agentAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace))
      (common-lisp:list
       (common-lisp:cons "trace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace-part))
   common-lisp:nil))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (bedrock-agent-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype verb () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun invoke-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-alias-id agent-id enable-trace
                     end-session input-text session-id session-state)
   (common-lisp:declare
    (common-lisp:ignorable agent-alias-id agent-id enable-trace end-session
     input-text session-id session-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invoke-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'bedrock-agent-runtime-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/agents/~A/agentAliases/~A/sessions/~A/text"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'agent-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'agent-alias-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'session-id))))
        "InvokeAgent"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invoke-agent))
(common-lisp:progn
 (common-lisp:defun retrieve
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id next-token
                     retrieval-configuration retrieval-query)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id next-token retrieval-configuration
     retrieval-query))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retrieve-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'bedrock-agent-runtime-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/knowledgebases/~A/retrieve"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'knowledge-base-id))))
        "Retrieve"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'retrieve))
(common-lisp:progn
 (common-lisp:defun retrieve-and-generate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input retrieve-and-generate-configuration
                     session-configuration session-id)
   (common-lisp:declare
    (common-lisp:ignorable input retrieve-and-generate-configuration
     session-configuration session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retrieve-and-generate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'bedrock-agent-runtime-request aws-sdk/generator/operation::input
        "POST" "/retrieveAndGenerate" "RetrieveAndGenerate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'retrieve-and-generate))
