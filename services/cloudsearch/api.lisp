;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudsearch/api
  (:use)
  (:nicknames #:aws/cloudsearch)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudsearch/api)
(common-lisp:progn
 (common-lisp:define-condition cloudsearch-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudsearch-error))
(common-lisp:progn
 (common-lisp:defclass cloudsearch-request
                       (aws-sdk/query-request:query-request) common-lisp:nil
                       (:default-initargs :service "cloudsearch" :api-version
                        "2013-01-01" :host-prefix "cloudsearch" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'cloudsearch-request))
(common-lisp:defvar *error-map*
  '(("BaseException" . base-exception)
    ("DisabledOperationException" . disabled-operation-exception)
    ("InternalException" . internal-exception)
    ("InvalidTypeException" . invalid-type-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype apiversion () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-policies-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor struct-shape-access-policies-status-options
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-access-policies-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-policies-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-policies-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-policies-status 'make-access-policies-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   common-lisp:nil))
(common-lisp:deftype algorithmic-stemming () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-options common-lisp:nil
                       ((synonyms :initarg :synonyms :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-analysis-options-synonyms
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopwords :initarg :stopwords :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-analysis-options-stopwords :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stemming-dictionary :initarg :stemming-dictionary
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-analysis-options-stemming-dictionary
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (japanese-tokenization-dictionary :initarg
                         :japanese-tokenization-dictionary :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-analysis-options-japanese-tokenization-dictionary
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (algorithmic-stemming :initarg :algorithmic-stemming
                         :initform common-lisp:nil :type
                         (common-lisp:or algorithmic-stemming common-lisp:null)
                         :accessor
                         struct-shape-analysis-options-algorithmic-stemming
                         :shape "AlgorithmicStemming" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-options 'make-analysis-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synonyms))
      (common-lisp:list
       (common-lisp:cons "Synonyms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopwords))
      (common-lisp:list
       (common-lisp:cons "Stopwords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stemming-dictionary))
      (common-lisp:list
       (common-lisp:cons "StemmingDictionary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'japanese-tokenization-dictionary))
      (common-lisp:list
       (common-lisp:cons "JapaneseTokenizationDictionary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithmic-stemming))
      (common-lisp:list
       (common-lisp:cons "AlgorithmicStemming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-scheme common-lisp:nil
                       ((analysis-scheme-name :initarg :analysis-scheme-name
                         :initform
                         (common-lisp:error
                          ":analysis-scheme-name is required")
                         :type (common-lisp:or standard-name common-lisp:null)
                         :accessor
                         struct-shape-analysis-scheme-analysis-scheme-name
                         :shape "StandardName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-scheme-language :initarg
                         :analysis-scheme-language :initform
                         (common-lisp:error
                          ":analysis-scheme-language is required")
                         :type
                         (common-lisp:or analysis-scheme-language
                                         common-lisp:null)
                         :accessor
                         struct-shape-analysis-scheme-analysis-scheme-language
                         :shape "AnalysisSchemeLanguage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analysis-options :initarg :analysis-options :initform
                         common-lisp:nil :type
                         (common-lisp:or analysis-options common-lisp:null)
                         :accessor
                         struct-shape-analysis-scheme-analysis-options :shape
                         "AnalysisOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-scheme
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'analysis-scheme 'make-analysis-scheme))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-scheme-name))
      (common-lisp:list
       (common-lisp:cons "AnalysisSchemeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-scheme-language))
      (common-lisp:list
       (common-lisp:cons "AnalysisSchemeLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-options))
      (common-lisp:list
       (common-lisp:cons "AnalysisOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-scheme))
   common-lisp:nil))
(common-lisp:deftype analysis-scheme-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-scheme-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or analysis-scheme common-lisp:null)
                         :accessor struct-shape-analysis-scheme-status-options
                         :shape "AnalysisScheme" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-analysis-scheme-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analysis-scheme-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-scheme-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analysis-scheme-status 'make-analysis-scheme-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-scheme-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-scheme-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-scheme-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-scheme-status-list ()
   '(trivial-types:proper-list analysis-scheme-status))
 (common-lisp:defun make-analysis-scheme-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-scheme-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass availability-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or multi-az common-lisp:null) :accessor
                         struct-shape-availability-options-status-options
                         :shape "MultiAZ" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-availability-options-status-status :shape
                         "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-options-status
                    'make-availability-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          availability-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          availability-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          availability-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition base-exception
     (cloudsearch-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       base-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       base-exception-message)))
 (common-lisp:export
  (common-lisp:list 'base-exception 'base-exception-code
                    'base-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass build-suggesters-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-build-suggesters-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-build-suggesters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'build-suggesters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'build-suggesters-request 'make-build-suggesters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          build-suggesters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          build-suggesters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          build-suggesters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass build-suggesters-response common-lisp:nil
                       ((field-names :initarg :field-names :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-list common-lisp:null)
                         :accessor
                         struct-shape-build-suggesters-response-field-names
                         :shape "FieldNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-build-suggesters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'build-suggesters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'build-suggesters-response
                    'make-build-suggesters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          build-suggesters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          build-suggesters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-names))
      (common-lisp:list
       (common-lisp:cons "FieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          build-suggesters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-domain-request-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor
                         struct-shape-create-domain-response-domain-status
                         :shape "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-array-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor
                         struct-shape-date-array-options-default-value :shape
                         "FieldValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-fields :initarg :source-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-comma-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-date-array-options-source-fields :shape
                         "FieldNameCommaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-array-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-array-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-array-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-array-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'date-array-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'date-array-options 'make-date-array-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-array-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-array-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-array-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-date-options-default-value
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-field :initarg :source-field :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-date-options-source-field :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-enabled :initarg :sort-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-date-options-sort-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'date-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'date-options 'make-date-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-enabled))
      (common-lisp:list
       (common-lisp:cons "SortEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-analysis-scheme-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-define-analysis-scheme-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-scheme :initarg :analysis-scheme :initform
                         (common-lisp:error ":analysis-scheme is required")
                         :type
                         (common-lisp:or analysis-scheme common-lisp:null)
                         :accessor
                         struct-shape-define-analysis-scheme-request-analysis-scheme
                         :shape "AnalysisScheme" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-analysis-scheme-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'define-analysis-scheme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-analysis-scheme-request
                    'make-define-analysis-scheme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-analysis-scheme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-analysis-scheme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-scheme))
      (common-lisp:list
       (common-lisp:cons "AnalysisScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-analysis-scheme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-analysis-scheme-response common-lisp:nil
                       ((analysis-scheme :initarg :analysis-scheme :initform
                         (common-lisp:error ":analysis-scheme is required")
                         :type
                         (common-lisp:or analysis-scheme-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-define-analysis-scheme-response-analysis-scheme
                         :shape "AnalysisSchemeStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-analysis-scheme-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'define-analysis-scheme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-analysis-scheme-response
                    'make-define-analysis-scheme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-analysis-scheme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-analysis-scheme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-scheme))
      (common-lisp:list
       (common-lisp:cons "AnalysisScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-analysis-scheme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-expression-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-define-expression-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-define-expression-request-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-expression-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'define-expression-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-expression-request
                    'make-define-expression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-expression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-expression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-expression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-expression-response common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression-status common-lisp:null)
                         :accessor
                         struct-shape-define-expression-response-expression
                         :shape "ExpressionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-expression-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'define-expression-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-expression-response
                    'make-define-expression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-expression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-expression-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-expression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-index-field-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-define-index-field-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-field :initarg :index-field :initform
                         (common-lisp:error ":index-field is required") :type
                         (common-lisp:or index-field common-lisp:null)
                         :accessor
                         struct-shape-define-index-field-request-index-field
                         :shape "IndexField" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-index-field-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'define-index-field-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-index-field-request
                    'make-define-index-field-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-index-field-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-index-field-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field))
      (common-lisp:list
       (common-lisp:cons "IndexField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-index-field-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-index-field-response common-lisp:nil
                       ((index-field :initarg :index-field :initform
                         (common-lisp:error ":index-field is required") :type
                         (common-lisp:or index-field-status common-lisp:null)
                         :accessor
                         struct-shape-define-index-field-response-index-field
                         :shape "IndexFieldStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-index-field-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'define-index-field-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-index-field-response
                    'make-define-index-field-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-index-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-index-field-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field))
      (common-lisp:list
       (common-lisp:cons "IndexField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-index-field-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-suggester-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-define-suggester-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suggester :initarg :suggester :initform
                         (common-lisp:error ":suggester is required") :type
                         (common-lisp:or suggester common-lisp:null) :accessor
                         struct-shape-define-suggester-request-suggester :shape
                         "Suggester" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-suggester-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'define-suggester-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-suggester-request 'make-define-suggester-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-suggester-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-suggester-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggester))
      (common-lisp:list
       (common-lisp:cons "Suggester"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-suggester-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass define-suggester-response common-lisp:nil
                       ((suggester :initarg :suggester :initform
                         (common-lisp:error ":suggester is required") :type
                         (common-lisp:or suggester-status common-lisp:null)
                         :accessor
                         struct-shape-define-suggester-response-suggester
                         :shape "SuggesterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-define-suggester-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'define-suggester-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'define-suggester-response
                    'make-define-suggester-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          define-suggester-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          define-suggester-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggester))
      (common-lisp:list
       (common-lisp:cons "Suggester"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          define-suggester-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analysis-scheme-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-analysis-scheme-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-scheme-name :initarg :analysis-scheme-name
                         :initform
                         (common-lisp:error
                          ":analysis-scheme-name is required")
                         :type (common-lisp:or standard-name common-lisp:null)
                         :accessor
                         struct-shape-delete-analysis-scheme-request-analysis-scheme-name
                         :shape "StandardName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-analysis-scheme-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-analysis-scheme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-scheme-request
                    'make-delete-analysis-scheme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-scheme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-scheme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-scheme-name))
      (common-lisp:list
       (common-lisp:cons "AnalysisSchemeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-scheme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analysis-scheme-response common-lisp:nil
                       ((analysis-scheme :initarg :analysis-scheme :initform
                         (common-lisp:error ":analysis-scheme is required")
                         :type
                         (common-lisp:or analysis-scheme-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-analysis-scheme-response-analysis-scheme
                         :shape "AnalysisSchemeStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-analysis-scheme-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-analysis-scheme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-analysis-scheme-response
                    'make-delete-analysis-scheme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-scheme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-scheme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-scheme))
      (common-lisp:list
       (common-lisp:cons "AnalysisScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analysis-scheme-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-request-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-response-domain-status
                         :shape "DomainStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-response 'make-delete-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-expression-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-expression-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression-name :initarg :expression-name :initform
                         (common-lisp:error ":expression-name is required")
                         :type (common-lisp:or standard-name common-lisp:null)
                         :accessor
                         struct-shape-delete-expression-request-expression-name
                         :shape "StandardName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-expression-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-expression-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-expression-request
                    'make-delete-expression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-expression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-expression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-name))
      (common-lisp:list
       (common-lisp:cons "ExpressionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-expression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-expression-response common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression-status common-lisp:null)
                         :accessor
                         struct-shape-delete-expression-response-expression
                         :shape "ExpressionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-expression-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-expression-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-expression-response
                    'make-delete-expression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-expression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-expression-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-expression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-index-field-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-index-field-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-field-name :initarg :index-field-name :initform
                         (common-lisp:error ":index-field-name is required")
                         :type
                         (common-lisp:or dynamic-field-name common-lisp:null)
                         :accessor
                         struct-shape-delete-index-field-request-index-field-name
                         :shape "DynamicFieldName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-index-field-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-index-field-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-index-field-request
                    'make-delete-index-field-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-field-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-field-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-field-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-index-field-response common-lisp:nil
                       ((index-field :initarg :index-field :initform
                         (common-lisp:error ":index-field is required") :type
                         (common-lisp:or index-field-status common-lisp:null)
                         :accessor
                         struct-shape-delete-index-field-response-index-field
                         :shape "IndexFieldStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-index-field-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-index-field-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-index-field-response
                    'make-delete-index-field-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-field-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-field-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field))
      (common-lisp:list
       (common-lisp:cons "IndexField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-index-field-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-suggester-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-suggester-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suggester-name :initarg :suggester-name :initform
                         (common-lisp:error ":suggester-name is required")
                         :type (common-lisp:or standard-name common-lisp:null)
                         :accessor
                         struct-shape-delete-suggester-request-suggester-name
                         :shape "StandardName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-suggester-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-suggester-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-suggester-request 'make-delete-suggester-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-suggester-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-suggester-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggester-name))
      (common-lisp:list
       (common-lisp:cons "SuggesterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-suggester-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-suggester-response common-lisp:nil
                       ((suggester :initarg :suggester :initform
                         (common-lisp:error ":suggester is required") :type
                         (common-lisp:or suggester-status common-lisp:null)
                         :accessor
                         struct-shape-delete-suggester-response-suggester
                         :shape "SuggesterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-suggester-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-suggester-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-suggester-response
                    'make-delete-suggester-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-suggester-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-suggester-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggester))
      (common-lisp:list
       (common-lisp:cons "Suggester"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-suggester-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-schemes-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-analysis-schemes-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-scheme-names :initarg :analysis-scheme-names
                         :initform common-lisp:nil :type
                         (common-lisp:or standard-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-analysis-schemes-request-analysis-scheme-names
                         :shape "StandardNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-analysis-schemes-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-analysis-schemes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-analysis-schemes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-schemes-request
                    'make-describe-analysis-schemes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-schemes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-schemes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-scheme-names))
      (common-lisp:list
       (common-lisp:cons "AnalysisSchemeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-schemes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-analysis-schemes-response common-lisp:nil
                       ((analysis-schemes :initarg :analysis-schemes :initform
                         (common-lisp:error ":analysis-schemes is required")
                         :type
                         (common-lisp:or analysis-scheme-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-analysis-schemes-response-analysis-schemes
                         :shape "AnalysisSchemeStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-analysis-schemes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-analysis-schemes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-analysis-schemes-response
                    'make-describe-analysis-schemes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-schemes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-schemes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-schemes))
      (common-lisp:list
       (common-lisp:cons "AnalysisSchemes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-analysis-schemes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-availability-options-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-availability-options-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-availability-options-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-availability-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-availability-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-availability-options-request
                    'make-describe-availability-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-availability-options-response common-lisp:nil
                       ((availability-options :initarg :availability-options
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-availability-options-response-availability-options
                         :shape "AvailabilityOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-availability-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-availability-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-availability-options-response
                    'make-describe-availability-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-options))
      (common-lisp:list
       (common-lisp:cons "AvailabilityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-endpoint-options-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-endpoint-options-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-endpoint-options-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-endpoint-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-endpoint-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-endpoint-options-request
                    'make-describe-domain-endpoint-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-endpoint-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-endpoint-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-endpoint-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-endpoint-options-response
                       common-lisp:nil
                       ((domain-endpoint-options :initarg
                         :domain-endpoint-options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-endpoint-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-endpoint-options-response-domain-endpoint-options
                         :shape "DomainEndpointOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-endpoint-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-endpoint-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-endpoint-options-response
                    'make-describe-domain-endpoint-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-endpoint-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-endpoint-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-endpoint-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domains-request common-lisp:nil
                       ((domain-names :initarg :domain-names :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-domains-request-domain-names
                         :shape "DomainNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domains-request 'make-describe-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domains-response common-lisp:nil
                       ((domain-status-list :initarg :domain-status-list
                         :initform
                         (common-lisp:error ":domain-status-list is required")
                         :type
                         (common-lisp:or domain-status-list common-lisp:null)
                         :accessor
                         struct-shape-describe-domains-response-domain-status-list
                         :shape "DomainStatusList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domains-response
                    'make-describe-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status-list))
      (common-lisp:list
       (common-lisp:cons "DomainStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-expressions-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-expressions-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression-names :initarg :expression-names :initform
                         common-lisp:nil :type
                         (common-lisp:or standard-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-expressions-request-expression-names
                         :shape "StandardNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-expressions-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-expressions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-expressions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-expressions-request
                    'make-describe-expressions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-expressions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-expressions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-expressions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-expressions-response common-lisp:nil
                       ((expressions :initarg :expressions :initform
                         (common-lisp:error ":expressions is required") :type
                         (common-lisp:or expression-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-expressions-response-expressions
                         :shape "ExpressionStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-expressions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-expressions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-expressions-response
                    'make-describe-expressions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-expressions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-expressions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expressions))
      (common-lisp:list
       (common-lisp:cons "Expressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-expressions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-index-fields-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-index-fields-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-names :initarg :field-names :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamic-field-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-index-fields-request-field-names
                         :shape "DynamicFieldNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-index-fields-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-index-fields-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-index-fields-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-index-fields-request
                    'make-describe-index-fields-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-fields-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-fields-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-names))
      (common-lisp:list
       (common-lisp:cons "FieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-fields-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-index-fields-response common-lisp:nil
                       ((index-fields :initarg :index-fields :initform
                         (common-lisp:error ":index-fields is required") :type
                         (common-lisp:or index-field-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-index-fields-response-index-fields
                         :shape "IndexFieldStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-index-fields-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-index-fields-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-index-fields-response
                    'make-describe-index-fields-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-fields-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-fields-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-fields))
      (common-lisp:list
       (common-lisp:cons "IndexFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-fields-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-parameters-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-parameters-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scaling-parameters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-parameters-request
                    'make-describe-scaling-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-parameters-response common-lisp:nil
                       ((scaling-parameters :initarg :scaling-parameters
                         :initform
                         (common-lisp:error ":scaling-parameters is required")
                         :type
                         (common-lisp:or scaling-parameters-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scaling-parameters-response-scaling-parameters
                         :shape "ScalingParametersStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scaling-parameters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-parameters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-parameters-response
                    'make-describe-scaling-parameters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-parameters))
      (common-lisp:list
       (common-lisp:cons "ScalingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-access-policies-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-service-access-policies-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-service-access-policies-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-service-access-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-access-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-service-access-policies-request
                    'make-describe-service-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-access-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-access-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-access-policies-response
                       common-lisp:nil
                       ((access-policies :initarg :access-policies :initform
                         (common-lisp:error ":access-policies is required")
                         :type
                         (common-lisp:or access-policies-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-service-access-policies-response-access-policies
                         :shape "AccessPoliciesStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-service-access-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-access-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-service-access-policies-response
                    'make-describe-service-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-access-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-suggesters-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-suggesters-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suggester-names :initarg :suggester-names :initform
                         common-lisp:nil :type
                         (common-lisp:or standard-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-suggesters-request-suggester-names
                         :shape "StandardNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployed :initarg :deployed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-suggesters-request-deployed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-suggesters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-suggesters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-suggesters-request
                    'make-describe-suggesters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-suggesters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-suggesters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggester-names))
      (common-lisp:list
       (common-lisp:cons "SuggesterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "Deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-suggesters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-suggesters-response common-lisp:nil
                       ((suggesters :initarg :suggesters :initform
                         (common-lisp:error ":suggesters is required") :type
                         (common-lisp:or suggester-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-suggesters-response-suggesters
                         :shape "SuggesterStatusList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-suggesters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-suggesters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-suggesters-response
                    'make-describe-suggesters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-suggesters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-suggesters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggesters))
      (common-lisp:list
       (common-lisp:cons "Suggesters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-suggesters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition disabled-operation-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'disabled-operation-exception)))
(common-lisp:progn
 (common-lisp:defclass document-suggester-options common-lisp:nil
                       ((source-field :initarg :source-field :initform
                         (common-lisp:error ":source-field is required") :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-document-suggester-options-source-field
                         :shape "FieldName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fuzzy-matching :initarg :fuzzy-matching :initform
                         common-lisp:nil :type
                         (common-lisp:or suggester-fuzzy-matching
                                         common-lisp:null)
                         :accessor
                         struct-shape-document-suggester-options-fuzzy-matching
                         :shape "SuggesterFuzzyMatching" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-expression :initarg :sort-expression :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-document-suggester-options-sort-expression
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-suggester-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-suggester-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-suggester-options
                    'make-document-suggester-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-suggester-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-suggester-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fuzzy-matching))
      (common-lisp:list
       (common-lisp:cons "FuzzyMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-expression))
      (common-lisp:list
       (common-lisp:cons "SortExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-suggester-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-endpoint-options common-lisp:nil
                       ((enforce-https :initarg :enforce-https :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-domain-endpoint-options-enforce-https
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tlssecurity-policy :initarg :tlssecurity-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or tlssecurity-policy common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-tlssecurity-policy
                         :shape "TLSSecurityPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-endpoint-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-endpoint-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-endpoint-options 'make-domain-endpoint-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-endpoint-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-status-options
                         :shape "DomainEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-endpoint-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'domain-endpoint-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-endpoint-options-status
                    'make-domain-endpoint-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   common-lisp:nil))
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun make-domain-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype domain-name-map () 'common-lisp:hash-table)
 (common-lisp:defun make-domain-name-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass domain-status common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domain-id is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-domain-status-domain-id :shape "DomainId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-status-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-domain-status-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-domain-status-created :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deleted :initarg :deleted :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-domain-status-deleted :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (doc-service :initarg :doc-service :initform
                         common-lisp:nil :type
                         (common-lisp:or service-endpoint common-lisp:null)
                         :accessor struct-shape-domain-status-doc-service
                         :shape "ServiceEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-service :initarg :search-service :initform
                         common-lisp:nil :type
                         (common-lisp:or service-endpoint common-lisp:null)
                         :accessor struct-shape-domain-status-search-service
                         :shape "ServiceEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requires-index-documents :initarg
                         :requires-index-documents :initform
                         (common-lisp:error
                          ":requires-index-documents is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-domain-status-requires-index-documents
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing :initarg :processing :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-domain-status-processing :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-instance-type :initarg :search-instance-type
                         :initform common-lisp:nil :type
                         (common-lisp:or search-instance-type common-lisp:null)
                         :accessor
                         struct-shape-domain-status-search-instance-type :shape
                         "SearchInstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-partition-count :initarg
                         :search-partition-count :initform common-lisp:nil
                         :type
                         (common-lisp:or partition-count common-lisp:null)
                         :accessor
                         struct-shape-domain-status-search-partition-count
                         :shape "PartitionCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-instance-count :initarg :search-instance-count
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor
                         struct-shape-domain-status-search-instance-count
                         :shape "InstanceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limits :initarg :limits :initform common-lisp:nil
                         :type (common-lisp:or limits common-lisp:null)
                         :accessor struct-shape-domain-status-limits :shape
                         "Limits" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-status 'make-domain-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'doc-service))
      (common-lisp:list
       (common-lisp:cons "DocService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-service))
      (common-lisp:list
       (common-lisp:cons "SearchService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-index-documents))
      (common-lisp:list
       (common-lisp:cons "RequiresIndexDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "Processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'search-instance-type))
      (common-lisp:list
       (common-lisp:cons "SearchInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'search-partition-count))
      (common-lisp:list
       (common-lisp:cons "SearchPartitionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'search-instance-count))
      (common-lisp:list
       (common-lisp:cons "SearchInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-status-list ()
   '(trivial-types:proper-list domain-status))
 (common-lisp:defun make-domain-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass double-array-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-double-array-options-default-value :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-fields :initarg :source-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-comma-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-double-array-options-source-fields :shape
                         "FieldNameCommaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-array-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-array-options-search-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-array-options-return-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-double-array-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'double-array-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'double-array-options 'make-double-array-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input double-array-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input double-array-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input double-array-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass double-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-double-options-default-value :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-field :initarg :source-field :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-double-options-source-field :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-enabled :initarg :sort-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-double-options-sort-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-double-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'double-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'double-options 'make-double-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input double-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input double-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-enabled))
      (common-lisp:list
       (common-lisp:cons "SortEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input double-options))
   common-lisp:nil))
(common-lisp:deftype dynamic-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dynamic-field-name-list ()
   '(trivial-types:proper-list dynamic-field-name))
 (common-lisp:defun make-dynamic-field-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dynamic-field-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass expression common-lisp:nil
                       ((expression-name :initarg :expression-name :initform
                         (common-lisp:error ":expression-name is required")
                         :type (common-lisp:or standard-name common-lisp:null)
                         :accessor struct-shape-expression-expression-name
                         :shape "StandardName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression-value :initarg :expression-value :initform
                         (common-lisp:error ":expression-value is required")
                         :type
                         (common-lisp:or expression-value common-lisp:null)
                         :accessor struct-shape-expression-expression-value
                         :shape "ExpressionValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-expression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'expression
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'expression 'make-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-name))
      (common-lisp:list
       (common-lisp:cons "ExpressionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-value))
      (common-lisp:list
       (common-lisp:cons "ExpressionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass expression-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-expression-status-options :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-expression-status-status :shape
                         "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-expression-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'expression-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'expression-status 'make-expression-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expression-status-list ()
   '(trivial-types:proper-list expression-status))
 (common-lisp:defun make-expression-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expression-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype expression-value () 'common-lisp:string)
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:deftype field-name-comma-list () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-name-list ()
   '(trivial-types:proper-list field-name))
 (common-lisp:defun make-field-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype field-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass index-documents-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-index-documents-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-documents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-documents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-documents-request 'make-index-documents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          index-documents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          index-documents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          index-documents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass index-documents-response common-lisp:nil
                       ((field-names :initarg :field-names :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-list common-lisp:null)
                         :accessor
                         struct-shape-index-documents-response-field-names
                         :shape "FieldNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-documents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-documents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-documents-response 'make-index-documents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          index-documents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          index-documents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-names))
      (common-lisp:list
       (common-lisp:cons "FieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          index-documents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass index-field common-lisp:nil
                       ((index-field-name :initarg :index-field-name :initform
                         (common-lisp:error ":index-field-name is required")
                         :type
                         (common-lisp:or dynamic-field-name common-lisp:null)
                         :accessor struct-shape-index-field-index-field-name
                         :shape "DynamicFieldName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-field-type :initarg :index-field-type :initform
                         (common-lisp:error ":index-field-type is required")
                         :type
                         (common-lisp:or index-field-type common-lisp:null)
                         :accessor struct-shape-index-field-index-field-type
                         :shape "IndexFieldType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (int-options :initarg :int-options :initform
                         common-lisp:nil :type
                         (common-lisp:or int-options common-lisp:null)
                         :accessor struct-shape-index-field-int-options :shape
                         "IntOptions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (double-options :initarg :double-options :initform
                         common-lisp:nil :type
                         (common-lisp:or double-options common-lisp:null)
                         :accessor struct-shape-index-field-double-options
                         :shape "DoubleOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (literal-options :initarg :literal-options :initform
                         common-lisp:nil :type
                         (common-lisp:or literal-options common-lisp:null)
                         :accessor struct-shape-index-field-literal-options
                         :shape "LiteralOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-options :initarg :text-options :initform
                         common-lisp:nil :type
                         (common-lisp:or text-options common-lisp:null)
                         :accessor struct-shape-index-field-text-options :shape
                         "TextOptions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-options :initarg :date-options :initform
                         common-lisp:nil :type
                         (common-lisp:or date-options common-lisp:null)
                         :accessor struct-shape-index-field-date-options :shape
                         "DateOptions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lat-lon-options :initarg :lat-lon-options :initform
                         common-lisp:nil :type
                         (common-lisp:or lat-lon-options common-lisp:null)
                         :accessor struct-shape-index-field-lat-lon-options
                         :shape "LatLonOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (int-array-options :initarg :int-array-options
                         :initform common-lisp:nil :type
                         (common-lisp:or int-array-options common-lisp:null)
                         :accessor struct-shape-index-field-int-array-options
                         :shape "IntArrayOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (double-array-options :initarg :double-array-options
                         :initform common-lisp:nil :type
                         (common-lisp:or double-array-options common-lisp:null)
                         :accessor
                         struct-shape-index-field-double-array-options :shape
                         "DoubleArrayOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (literal-array-options :initarg :literal-array-options
                         :initform common-lisp:nil :type
                         (common-lisp:or literal-array-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-index-field-literal-array-options :shape
                         "LiteralArrayOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (text-array-options :initarg :text-array-options
                         :initform common-lisp:nil :type
                         (common-lisp:or text-array-options common-lisp:null)
                         :accessor struct-shape-index-field-text-array-options
                         :shape "TextArrayOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-array-options :initarg :date-array-options
                         :initform common-lisp:nil :type
                         (common-lisp:or date-array-options common-lisp:null)
                         :accessor struct-shape-index-field-date-array-options
                         :shape "DateArrayOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'index-field 'make-index-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-name))
      (common-lisp:list
       (common-lisp:cons "IndexFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-field-type))
      (common-lisp:list
       (common-lisp:cons "IndexFieldType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'int-options))
      (common-lisp:list
       (common-lisp:cons "IntOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-options))
      (common-lisp:list
       (common-lisp:cons "DoubleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'literal-options))
      (common-lisp:list
       (common-lisp:cons "LiteralOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-options))
      (common-lisp:list
       (common-lisp:cons "TextOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-options))
      (common-lisp:list
       (common-lisp:cons "DateOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lat-lon-options))
      (common-lisp:list
       (common-lisp:cons "LatLonOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'int-array-options))
      (common-lisp:list
       (common-lisp:cons "IntArrayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'double-array-options))
      (common-lisp:list
       (common-lisp:cons "DoubleArrayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'literal-array-options))
      (common-lisp:list
       (common-lisp:cons "LiteralArrayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-array-options))
      (common-lisp:list
       (common-lisp:cons "TextArrayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-array-options))
      (common-lisp:list
       (common-lisp:cons "DateArrayOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass index-field-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or index-field common-lisp:null)
                         :accessor struct-shape-index-field-status-options
                         :shape "IndexField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-index-field-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-field-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-field-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'index-field-status 'make-index-field-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-field-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-field-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-field-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype index-field-status-list ()
   '(trivial-types:proper-list index-field-status))
 (common-lisp:defun make-index-field-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list index-field-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype index-field-type () 'common-lisp:string)
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass int-array-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-int-array-options-default-value :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-fields :initarg :source-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-comma-list
                                         common-lisp:null)
                         :accessor struct-shape-int-array-options-source-fields
                         :shape "FieldNameCommaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-array-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-array-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-array-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-int-array-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'int-array-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'int-array-options 'make-int-array-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input int-array-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input int-array-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input int-array-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass int-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-int-options-default-value :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-field :initarg :source-field :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-int-options-source-field :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-enabled :initarg :sort-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-int-options-sort-enabled :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-int-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'int-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'int-options 'make-int-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input int-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input int-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-enabled))
      (common-lisp:list
       (common-lisp:cons "SortEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input int-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-type-exception)))
(common-lisp:progn
 (common-lisp:defclass lat-lon-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-lat-lon-options-default-value
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-field :initarg :source-field :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-lat-lon-options-source-field :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-lat-lon-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-lat-lon-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-lat-lon-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-enabled :initarg :sort-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-lat-lon-options-sort-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lat-lon-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lat-lon-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lat-lon-options 'make-lat-lon-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lat-lon-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lat-lon-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-enabled))
      (common-lisp:list
       (common-lisp:cons "SortEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lat-lon-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass limits common-lisp:nil
                       ((maximum-replication-count :initarg
                         :maximum-replication-count :initform
                         (common-lisp:error
                          ":maximum-replication-count is required")
                         :type
                         (common-lisp:or maximum-replication-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-limits-maximum-replication-count :shape
                         "MaximumReplicationCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-partition-count :initarg
                         :maximum-partition-count :initform
                         (common-lisp:error
                          ":maximum-partition-count is required")
                         :type
                         (common-lisp:or maximum-partition-count
                                         common-lisp:null)
                         :accessor struct-shape-limits-maximum-partition-count
                         :shape "MaximumPartitionCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limits
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limits
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'limits 'make-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-replication-count))
      (common-lisp:list
       (common-lisp:cons "MaximumReplicationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-partition-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPartitionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-response common-lisp:nil
                       ((domain-names :initarg :domain-names :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name-map common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-response-domain-names
                         :shape "DomainNameMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-names-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-response
                    'make-list-domain-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass literal-array-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor
                         struct-shape-literal-array-options-default-value
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-fields :initarg :source-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-comma-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-literal-array-options-source-fields
                         :shape "FieldNameCommaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-array-options-facet-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-array-options-search-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-array-options-return-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-literal-array-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'literal-array-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'literal-array-options 'make-literal-array-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          literal-array-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          literal-array-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          literal-array-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass literal-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-literal-options-default-value
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-field :initarg :source-field :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-literal-options-source-field :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (facet-enabled :initarg :facet-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-options-facet-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (search-enabled :initarg :search-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-options-search-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-enabled :initarg :sort-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-literal-options-sort-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-literal-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'literal-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'literal-options 'make-literal-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input literal-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input literal-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-enabled))
      (common-lisp:list
       (common-lisp:cons "FacetEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-enabled))
      (common-lisp:list
       (common-lisp:cons "SearchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-enabled))
      (common-lisp:list
       (common-lisp:cons "SortEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input literal-options))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype maximum-partition-count () 'common-lisp:integer)
(common-lisp:deftype maximum-replication-count () 'common-lisp:integer)
(common-lisp:deftype multi-az () 'common-lisp:boolean)
(common-lisp:deftype option-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass option-status common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creation-date is required") :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor struct-shape-option-status-creation-date
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         (common-lisp:error ":update-date is required") :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor struct-shape-option-status-update-date
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-version :initarg :update-version :initform
                         common-lisp:nil :type
                         (common-lisp:or uint-value common-lisp:null) :accessor
                         struct-shape-option-status-update-version :shape
                         "UIntValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or option-state common-lisp:null)
                         :accessor struct-shape-option-status-state :shape
                         "OptionState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-deletion :initarg :pending-deletion :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-status-pending-deletion :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option-status 'make-option-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-deletion))
      (common-lisp:list
       (common-lisp:cons "PendingDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-status))
   common-lisp:nil))
(common-lisp:deftype partition-count () 'common-lisp:integer)
(common-lisp:deftype partition-instance-type () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass scaling-parameters common-lisp:nil
                       ((desired-instance-type :initarg :desired-instance-type
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-scaling-parameters-desired-instance-type
                         :shape "PartitionInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (desired-replication-count :initarg
                         :desired-replication-count :initform common-lisp:nil
                         :type (common-lisp:or uint-value common-lisp:null)
                         :accessor
                         struct-shape-scaling-parameters-desired-replication-count
                         :shape "UIntValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (desired-partition-count :initarg
                         :desired-partition-count :initform common-lisp:nil
                         :type (common-lisp:or uint-value common-lisp:null)
                         :accessor
                         struct-shape-scaling-parameters-desired-partition-count
                         :shape "UIntValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scaling-parameters 'make-scaling-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-instance-type))
      (common-lisp:list
       (common-lisp:cons "DesiredInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-replication-count))
      (common-lisp:list
       (common-lisp:cons "DesiredReplicationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-partition-count))
      (common-lisp:list
       (common-lisp:cons "DesiredPartitionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scaling-parameters-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or scaling-parameters common-lisp:null)
                         :accessor
                         struct-shape-scaling-parameters-status-options :shape
                         "ScalingParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-scaling-parameters-status-status :shape
                         "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-parameters-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-parameters-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scaling-parameters-status
                    'make-scaling-parameters-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-parameters-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-parameters-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-parameters-status))
   common-lisp:nil))
(common-lisp:deftype search-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-endpoint common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or service-url common-lisp:null)
                         :accessor struct-shape-service-endpoint-endpoint
                         :shape "ServiceUrl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-endpoint 'make-service-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-endpoint))
   common-lisp:nil))
(common-lisp:deftype service-url () 'common-lisp:string)
(common-lisp:deftype standard-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype standard-name-list ()
   '(trivial-types:proper-list standard-name))
 (common-lisp:defun make-standard-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standard-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass suggester common-lisp:nil
                       ((suggester-name :initarg :suggester-name :initform
                         (common-lisp:error ":suggester-name is required")
                         :type (common-lisp:or standard-name common-lisp:null)
                         :accessor struct-shape-suggester-suggester-name :shape
                         "StandardName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-suggester-options :initarg
                         :document-suggester-options :initform
                         (common-lisp:error
                          ":document-suggester-options is required")
                         :type
                         (common-lisp:or document-suggester-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-suggester-document-suggester-options
                         :shape "DocumentSuggesterOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggester
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggester
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'suggester 'make-suggester))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggester))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggester))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggester-name))
      (common-lisp:list
       (common-lisp:cons "SuggesterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-suggester-options))
      (common-lisp:list
       (common-lisp:cons "DocumentSuggesterOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggester))
   common-lisp:nil))
(common-lisp:deftype suggester-fuzzy-matching () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass suggester-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or suggester common-lisp:null) :accessor
                         struct-shape-suggester-status-options :shape
                         "Suggester" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-suggester-status-status :shape
                         "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suggester-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suggester-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'suggester-status 'make-suggester-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggester-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggester-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggester-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suggester-status-list ()
   '(trivial-types:proper-list suggester-status))
 (common-lisp:defun make-suggester-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suggester-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tlssecurity-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass text-array-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor
                         struct-shape-text-array-options-default-value :shape
                         "FieldValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-fields :initarg :source-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name-comma-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-text-array-options-source-fields :shape
                         "FieldNameCommaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-text-array-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (highlight-enabled :initarg :highlight-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-text-array-options-highlight-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analysis-scheme :initarg :analysis-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or word common-lisp:null) :accessor
                         struct-shape-text-array-options-analysis-scheme :shape
                         "Word" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-array-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-array-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-array-options 'make-text-array-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-array-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-array-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlight-enabled))
      (common-lisp:list
       (common-lisp:cons "HighlightEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-scheme))
      (common-lisp:list
       (common-lisp:cons "AnalysisScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-array-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-options common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or field-value common-lisp:null)
                         :accessor struct-shape-text-options-default-value
                         :shape "FieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-field :initarg :source-field :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-text-options-source-field :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-enabled :initarg :return-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-text-options-return-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-enabled :initarg :sort-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-text-options-sort-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (highlight-enabled :initarg :highlight-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-text-options-highlight-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analysis-scheme :initarg :analysis-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or word common-lisp:null) :accessor
                         struct-shape-text-options-analysis-scheme :shape
                         "Word" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'text-options 'make-text-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-field))
      (common-lisp:list
       (common-lisp:cons "SourceField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-enabled))
      (common-lisp:list
       (common-lisp:cons "ReturnEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-enabled))
      (common-lisp:list
       (common-lisp:cons "SortEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlight-enabled))
      (common-lisp:list
       (common-lisp:cons "HighlightEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-scheme))
      (common-lisp:list
       (common-lisp:cons "AnalysisScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-options))
   common-lisp:nil))
(common-lisp:deftype uint-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass update-availability-options-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-availability-options-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform
                         (common-lisp:error ":multi-az is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-availability-options-request-multi-az
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-availability-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-availability-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-availability-options-request
                    'make-update-availability-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-availability-options-response common-lisp:nil
                       ((availability-options :initarg :availability-options
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-availability-options-response-availability-options
                         :shape "AvailabilityOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-availability-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-availability-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-availability-options-response
                    'make-update-availability-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-options))
      (common-lisp:list
       (common-lisp:cons "AvailabilityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-endpoint-options-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-domain-endpoint-options-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :initform
                         (common-lisp:error
                          ":domain-endpoint-options is required")
                         :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-endpoint-options-request-domain-endpoint-options
                         :shape "DomainEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-endpoint-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-endpoint-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-endpoint-options-request
                    'make-update-domain-endpoint-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-endpoint-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-endpoint-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-endpoint-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-endpoint-options-response common-lisp:nil
                       ((domain-endpoint-options :initarg
                         :domain-endpoint-options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-endpoint-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-endpoint-options-response-domain-endpoint-options
                         :shape "DomainEndpointOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-endpoint-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-endpoint-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-endpoint-options-response
                    'make-update-domain-endpoint-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-endpoint-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-endpoint-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-endpoint-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scaling-parameters-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-scaling-parameters-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-parameters :initarg :scaling-parameters
                         :initform
                         (common-lisp:error ":scaling-parameters is required")
                         :type
                         (common-lisp:or scaling-parameters common-lisp:null)
                         :accessor
                         struct-shape-update-scaling-parameters-request-scaling-parameters
                         :shape "ScalingParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-scaling-parameters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scaling-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-scaling-parameters-request
                    'make-update-scaling-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-parameters))
      (common-lisp:list
       (common-lisp:cons "ScalingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scaling-parameters-response common-lisp:nil
                       ((scaling-parameters :initarg :scaling-parameters
                         :initform
                         (common-lisp:error ":scaling-parameters is required")
                         :type
                         (common-lisp:or scaling-parameters-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-scaling-parameters-response-scaling-parameters
                         :shape "ScalingParametersStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-scaling-parameters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scaling-parameters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-scaling-parameters-response
                    'make-update-scaling-parameters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-parameters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-parameters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-parameters))
      (common-lisp:list
       (common-lisp:cons "ScalingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-parameters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-access-policies-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-access-policies-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policies :initarg :access-policies :initform
                         (common-lisp:error ":access-policies is required")
                         :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-update-service-access-policies-request-access-policies
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-access-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-access-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-access-policies-request
                    'make-update-service-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-access-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-access-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-access-policies-response common-lisp:nil
                       ((access-policies :initarg :access-policies :initform
                         (common-lisp:error ":access-policies is required")
                         :type
                         (common-lisp:or access-policies-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-access-policies-response-access-policies
                         :shape "AccessPoliciesStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-access-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-access-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-access-policies-response
                    'make-update-service-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-access-policies-response))
   common-lisp:nil))
(common-lisp:deftype update-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (cloudsearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype word () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun build-suggesters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-build-suggesters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BuildSuggesters"))
      common-lisp:nil "BuildSuggestersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'build-suggesters))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDomain"))
      common-lisp:nil "CreateDomainResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun define-analysis-scheme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name analysis-scheme)
   (common-lisp:declare (common-lisp:ignorable domain-name analysis-scheme))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-define-analysis-scheme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DefineAnalysisScheme"))
      common-lisp:nil "DefineAnalysisSchemeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'define-analysis-scheme))
(common-lisp:progn
 (common-lisp:defun define-expression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name expression)
   (common-lisp:declare (common-lisp:ignorable domain-name expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-define-expression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DefineExpression"))
      common-lisp:nil "DefineExpressionResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'define-expression))
(common-lisp:progn
 (common-lisp:defun define-index-field
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name index-field)
   (common-lisp:declare (common-lisp:ignorable domain-name index-field))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-define-index-field-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DefineIndexField"))
      common-lisp:nil "DefineIndexFieldResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'define-index-field))
(common-lisp:progn
 (common-lisp:defun define-suggester
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name suggester)
   (common-lisp:declare (common-lisp:ignorable domain-name suggester))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-define-suggester-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DefineSuggester"))
      common-lisp:nil "DefineSuggesterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'define-suggester))
(common-lisp:progn
 (common-lisp:defun delete-analysis-scheme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name analysis-scheme-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-name analysis-scheme-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analysis-scheme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAnalysisScheme"))
      common-lisp:nil "DeleteAnalysisSchemeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-analysis-scheme))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDomain"))
      common-lisp:nil "DeleteDomainResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-expression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name expression-name)
   (common-lisp:declare (common-lisp:ignorable domain-name expression-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-expression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteExpression"))
      common-lisp:nil "DeleteExpressionResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-expression))
(common-lisp:progn
 (common-lisp:defun delete-index-field
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name index-field-name)
   (common-lisp:declare (common-lisp:ignorable domain-name index-field-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-index-field-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIndexField"))
      common-lisp:nil "DeleteIndexFieldResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-index-field))
(common-lisp:progn
 (common-lisp:defun delete-suggester
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name suggester-name)
   (common-lisp:declare (common-lisp:ignorable domain-name suggester-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-suggester-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSuggester"))
      common-lisp:nil "DeleteSuggesterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-suggester))
(common-lisp:progn
 (common-lisp:defun describe-analysis-schemes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name analysis-scheme-names
                     deployed)
   (common-lisp:declare
    (common-lisp:ignorable domain-name analysis-scheme-names deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-analysis-schemes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAnalysisSchemes"))
      common-lisp:nil "DescribeAnalysisSchemesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-analysis-schemes))
(common-lisp:progn
 (common-lisp:defun describe-availability-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name deployed)
   (common-lisp:declare (common-lisp:ignorable domain-name deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-availability-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAvailabilityOptions"))
      common-lisp:nil "DescribeAvailabilityOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-availability-options))
(common-lisp:progn
 (common-lisp:defun describe-domain-endpoint-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name deployed)
   (common-lisp:declare (common-lisp:ignorable domain-name deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-endpoint-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDomainEndpointOptions"))
      common-lisp:nil "DescribeDomainEndpointOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-domain-endpoint-options))
(common-lisp:progn
 (common-lisp:defun describe-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-names)
   (common-lisp:declare (common-lisp:ignorable domain-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDomains"))
      common-lisp:nil "DescribeDomainsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-domains))
(common-lisp:progn
 (common-lisp:defun describe-expressions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name expression-names deployed)
   (common-lisp:declare
    (common-lisp:ignorable domain-name expression-names deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-expressions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExpressions"))
      common-lisp:nil "DescribeExpressionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-expressions))
(common-lisp:progn
 (common-lisp:defun describe-index-fields
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name field-names deployed)
   (common-lisp:declare
    (common-lisp:ignorable domain-name field-names deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-index-fields-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIndexFields"))
      common-lisp:nil "DescribeIndexFieldsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-index-fields))
(common-lisp:progn
 (common-lisp:defun describe-scaling-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scaling-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeScalingParameters"))
      common-lisp:nil "DescribeScalingParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-scaling-parameters))
(common-lisp:progn
 (common-lisp:defun describe-service-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name deployed)
   (common-lisp:declare (common-lisp:ignorable domain-name deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-service-access-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServiceAccessPolicies"))
      common-lisp:nil "DescribeServiceAccessPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-service-access-policies))
(common-lisp:progn
 (common-lisp:defun describe-suggesters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name suggester-names deployed)
   (common-lisp:declare
    (common-lisp:ignorable domain-name suggester-names deployed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-suggesters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSuggesters"))
      common-lisp:nil "DescribeSuggestersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-suggesters))
(common-lisp:progn
 (common-lisp:defun index-documents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-index-documents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IndexDocuments"))
      common-lisp:nil "IndexDocumentsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'index-documents))
(common-lisp:progn
 (common-lisp:defun list-domain-names ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'cloudsearch-request :method "POST" :path "/"
                                :operation "ListDomainNames"))
    common-lisp:nil "ListDomainNamesResult" *error-map*))
 (common-lisp:export 'list-domain-names))
(common-lisp:progn
 (common-lisp:defun update-availability-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name multi-az)
   (common-lisp:declare (common-lisp:ignorable domain-name multi-az))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-availability-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAvailabilityOptions"))
      common-lisp:nil "UpdateAvailabilityOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-availability-options))
(common-lisp:progn
 (common-lisp:defun update-domain-endpoint-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-endpoint-options)
   (common-lisp:declare
    (common-lisp:ignorable domain-name domain-endpoint-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-domain-endpoint-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDomainEndpointOptions"))
      common-lisp:nil "UpdateDomainEndpointOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-domain-endpoint-options))
(common-lisp:progn
 (common-lisp:defun update-scaling-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name scaling-parameters)
   (common-lisp:declare (common-lisp:ignorable domain-name scaling-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-scaling-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateScalingParameters"))
      common-lisp:nil "UpdateScalingParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-scaling-parameters))
(common-lisp:progn
 (common-lisp:defun update-service-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name access-policies)
   (common-lisp:declare (common-lisp:ignorable domain-name access-policies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-access-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudsearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceAccessPolicies"))
      common-lisp:nil "UpdateServiceAccessPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-service-access-policies))
