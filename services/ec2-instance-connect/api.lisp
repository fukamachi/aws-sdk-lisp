;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/ec2-instance-connect/api (:use)
                             (:nicknames #:aws/ec2-instance-connect)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ec2-instance-connect/api)
(common-lisp:progn
 (common-lisp:define-condition ec2-instance-connect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ec2-instance-connect-error))
(common-lisp:progn
 (common-lisp:defclass ec2-instance-connect-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "ec2-instance-connect"
                        :api-version "2018-04-02" :host-prefix
                        "ec2-instance-connect" :signing-name common-lisp:nil
                        :global-host common-lisp:nil :target-prefix
                        "AWSEC2InstanceConnectService" :json-version "1.1"))
 (common-lisp:export 'ec2-instance-connect-request))
(common-lisp:defvar *error-map*
  '(("AuthException" . auth-exception)
    ("EC2InstanceNotFoundException" . ec2instance-not-found-exception)
    ("EC2InstanceStateInvalidException" . ec2instance-state-invalid-exception)
    ("EC2InstanceTypeInvalidException" . ec2instance-type-invalid-exception)
    ("EC2InstanceUnavailableException" . ec2instance-unavailable-exception)
    ("InvalidArgsException" . invalid-args-exception)
    ("SerialConsoleAccessDisabledException"
     . serial-console-access-disabled-exception)
    ("SerialConsoleSessionLimitExceededException"
     . serial-console-session-limit-exceeded-exception)
    ("SerialConsoleSessionUnavailableException"
     . serial-console-session-unavailable-exception)
    ("ServiceException" . service-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:progn
 (common-lisp:define-condition auth-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       auth-exception-message)))
 (common-lisp:export
  (common-lisp:list 'auth-exception 'auth-exception-message)))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition ec2instance-not-found-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ec2instance-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-not-found-exception
                    'ec2instance-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2instance-state-invalid-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ec2instance-state-invalid-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-state-invalid-exception
                    'ec2instance-state-invalid-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2instance-type-invalid-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ec2instance-type-invalid-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-type-invalid-exception
                    'ec2instance-type-invalid-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2instance-unavailable-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ec2instance-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-unavailable-exception
                    'ec2instance-unavailable-exception-message)))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-osuser () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-args-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-args-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-args-exception 'invalid-args-exception-message)))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:deftype sshpublic-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass send-sshpublic-key-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-send-sshpublic-key-request-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-osuser :initarg :instance-osuser :initform
                         (common-lisp:error ":instance-osuser is required")
                         :type
                         (common-lisp:or instance-osuser common-lisp:null)
                         :accessor
                         struct-shape-send-sshpublic-key-request-instance-osuser
                         :shape "InstanceOSUser" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key :initarg :sshpublic-key :initform
                         (common-lisp:error ":sshpublic-key is required") :type
                         (common-lisp:or sshpublic-key common-lisp:null)
                         :accessor
                         struct-shape-send-sshpublic-key-request-sshpublic-key
                         :shape "SSHPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor
                         struct-shape-send-sshpublic-key-request-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-sshpublic-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-sshpublic-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-sshpublic-key-request
                    'make-send-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-osuser))
      (common-lisp:list
       (common-lisp:cons "InstanceOSUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-sshpublic-key-response common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         struct-shape-send-sshpublic-key-response-request-id
                         :shape "RequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success :initarg :success :initform common-lisp:nil
                         :type (common-lisp:or success common-lisp:null)
                         :accessor
                         struct-shape-send-sshpublic-key-response-success
                         :shape "Success" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-sshpublic-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-sshpublic-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-sshpublic-key-response
                    'make-send-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-sshpublic-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-sshpublic-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-sshpublic-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-serial-console-sshpublic-key-request
                       common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-send-serial-console-sshpublic-key-request-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-port :initarg :serial-port :initform
                         common-lisp:nil :type
                         (common-lisp:or serial-port common-lisp:null)
                         :accessor
                         struct-shape-send-serial-console-sshpublic-key-request-serial-port
                         :shape "SerialPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key :initarg :sshpublic-key :initform
                         (common-lisp:error ":sshpublic-key is required") :type
                         (common-lisp:or sshpublic-key common-lisp:null)
                         :accessor
                         struct-shape-send-serial-console-sshpublic-key-request-sshpublic-key
                         :shape "SSHPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-serial-console-sshpublic-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-serial-console-sshpublic-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-serial-console-sshpublic-key-request
                    'make-send-serial-console-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-serial-console-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-serial-console-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-port))
      (common-lisp:list
       (common-lisp:cons "SerialPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-serial-console-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-serial-console-sshpublic-key-response
                       common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         struct-shape-send-serial-console-sshpublic-key-response-request-id
                         :shape "RequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success :initarg :success :initform common-lisp:nil
                         :type (common-lisp:or success common-lisp:null)
                         :accessor
                         struct-shape-send-serial-console-sshpublic-key-response-success
                         :shape "Success" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-serial-console-sshpublic-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-serial-console-sshpublic-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-serial-console-sshpublic-key-response
                    'make-send-serial-console-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-serial-console-sshpublic-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-serial-console-sshpublic-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-serial-console-sshpublic-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition serial-console-access-disabled-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       serial-console-access-disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'serial-console-access-disabled-exception
                    'serial-console-access-disabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition serial-console-session-limit-exceeded-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       serial-console-session-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'serial-console-session-limit-exceeded-exception
                    'serial-console-session-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition serial-console-session-unavailable-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       serial-console-session-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'serial-console-session-unavailable-exception
                    'serial-console-session-unavailable-exception-message)))
(common-lisp:deftype serial-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype success () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (ec2-instance-connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defun send-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id instance-osuser sshpublic-key
                     availability-zone)
   (common-lisp:declare
    (common-lisp:ignorable instance-id instance-osuser sshpublic-key
     availability-zone))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'ec2-instance-connect-request aws-sdk/generator/operation::input "POST"
        "/" "SendSSHPublicKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun send-serial-console-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id serial-port sshpublic-key)
   (common-lisp:declare
    (common-lisp:ignorable instance-id serial-port sshpublic-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-serial-console-sshpublic-key-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'ec2-instance-connect-request aws-sdk/generator/operation::input "POST"
        "/" "SendSerialConsoleSSHPublicKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-serial-console-sshpublic-key))
