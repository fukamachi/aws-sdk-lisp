;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/iotfleetwise/api (:use)
                             (:nicknames #:aws/iotfleetwise)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iotfleetwise/api)
(common-lisp:progn
 (common-lisp:define-condition iotfleetwise-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iotfleetwise-error))
(common-lisp:progn
 (common-lisp:defclass iotfleetwise-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "iotfleetwise" :api-version
                        "2021-06-17" :host-prefix "iotfleetwise" :signing-name
                        "iotfleetwise" :global-host common-lisp:nil
                        :target-prefix "IoTAutobahnControlPlane" :json-version
                        "1.0"))
 (common-lisp:export 'iotfleetwise-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DecoderManifestValidationException"
     . decoder-manifest-validation-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidNodeException" . invalid-node-exception)
    ("InvalidSignalsException" . invalid-signals-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass actuator common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-actuator-fully-qualified-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor struct-shape-actuator-data-type :shape
                         "NodeDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-actuator-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-actuator-unit :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor struct-shape-actuator-allowed-values :shape
                         "listOfStrings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min :initarg :min :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-actuator-min :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-actuator-max :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assigned-value :initarg :assigned-value :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-actuator-assigned-value :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecation-message :initarg :deprecation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-actuator-deprecation-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-actuator-comment :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (struct-fully-qualified-name :initarg
                         :struct-fully-qualified-name :initform common-lisp:nil
                         :type (common-lisp:or node-path common-lisp:null)
                         :accessor
                         struct-shape-actuator-struct-fully-qualified-name
                         :shape "NodePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-actuator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'actuator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'actuator 'make-actuator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input actuator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input actuator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-value))
      (common-lisp:list
       (common-lisp:cons "assignedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-message))
      (common-lisp:list
       (common-lisp:cons "deprecationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'struct-fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "structFullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input actuator))
   common-lisp:nil))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-vehicle-fleet-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-associate-vehicle-fleet-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-associate-vehicle-fleet-request-fleet-id
                         :shape "fleetId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-vehicle-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-vehicle-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-vehicle-fleet-request
                    'make-associate-vehicle-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-vehicle-fleet-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-vehicle-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-vehicle-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-vehicle-fleet-response
                    'make-associate-vehicle-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-attribute-fully-qualified-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor struct-shape-attribute-data-type :shape
                         "NodeDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-attribute-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-attribute-unit :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor struct-shape-attribute-allowed-values :shape
                         "listOfStrings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min :initarg :min :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-attribute-min :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-attribute-max :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assigned-value :initarg :assigned-value :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-attribute-assigned-value :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-attribute-default-value :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecation-message :initarg :deprecation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-attribute-deprecation-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-attribute-comment :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-value))
      (common-lisp:list
       (common-lisp:cons "assignedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-message))
      (common-lisp:list
       (common-lisp:cons "deprecationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-vehicle-request common-lisp:nil
                       ((vehicles :initarg :vehicles :initform
                         (common-lisp:error ":vehicles is required") :type
                         (common-lisp:or |createVehicleRequestItems|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-vehicle-request-vehicles
                         :shape "createVehicleRequestItems" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-create-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-vehicle-request
                    'make-batch-create-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-vehicle-response common-lisp:nil
                       ((vehicles :initarg :vehicles :initform common-lisp:nil
                         :type
                         (common-lisp:or |createVehicleResponses|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-vehicle-response-vehicles
                         :shape "createVehicleResponses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or |createVehicleErrors|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-vehicle-response-errors
                         :shape "createVehicleErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-vehicle-response
                    'make-batch-create-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-vehicle-request common-lisp:nil
                       ((vehicles :initarg :vehicles :initform
                         (common-lisp:error ":vehicles is required") :type
                         (common-lisp:or |updateVehicleRequestItems|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-vehicle-request-vehicles
                         :shape "updateVehicleRequestItems" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-update-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-vehicle-request
                    'make-batch-update-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-vehicle-response common-lisp:nil
                       ((vehicles :initarg :vehicles :initform common-lisp:nil
                         :type
                         (common-lisp:or |updateVehicleResponseItems|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-vehicle-response-vehicles
                         :shape "updateVehicleResponseItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or |updateVehicleErrors|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-vehicle-response-errors
                         :shape "updateVehicleErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-vehicle-response
                    'make-batch-update-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass branch common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-branch-fully-qualified-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-branch-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecation-message :initarg :deprecation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-branch-deprecation-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-branch-comment :shape "message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-branch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'branch
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'branch 'make-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-message))
      (common-lisp:list
       (common-lisp:cons "deprecationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input branch))
   common-lisp:nil))
(common-lisp:deftype campaign-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass campaign-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-campaign-summary-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-campaign-summary-name :shape
                         "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-campaign-summary-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-campaign-summary-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-campaign-summary-target-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or campaign-status common-lisp:null)
                         :accessor struct-shape-campaign-summary-status :shape
                         "CampaignStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-campaign-summary-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-campaign-summary-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-campaign-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'campaign-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'campaign-summary 'make-campaign-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass can-dbc-definition common-lisp:nil
                       ((network-interface :initarg :network-interface
                         :initform
                         (common-lisp:error ":networkinterface is required")
                         :type (common-lisp:or interface-id common-lisp:null)
                         :accessor
                         struct-shape-can-dbc-definition-network-interface
                         :shape "InterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (can-dbc-files :initarg :can-dbc-files :initform
                         (common-lisp:error ":candbcfiles is required") :type
                         (common-lisp:or network-files-list common-lisp:null)
                         :accessor
                         struct-shape-can-dbc-definition-can-dbc-files :shape
                         "NetworkFilesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signals-map :initarg :signals-map :initform
                         common-lisp:nil :type
                         (common-lisp:or model-signals-map common-lisp:null)
                         :accessor struct-shape-can-dbc-definition-signals-map
                         :shape "ModelSignalsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-can-dbc-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'can-dbc-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'can-dbc-definition 'make-can-dbc-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input can-dbc-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input can-dbc-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interface))
      (common-lisp:list
       (common-lisp:cons "networkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-dbc-files))
      (common-lisp:list
       (common-lisp:cons "canDbcFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signals-map))
      (common-lisp:list
       (common-lisp:cons "signalsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input can-dbc-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass can-interface common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or can-interface-name common-lisp:null)
                         :accessor struct-shape-can-interface-name :shape
                         "CanInterfaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol-name :initarg :protocol-name :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-name common-lisp:null)
                         :accessor struct-shape-can-interface-protocol-name
                         :shape "ProtocolName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol-version :initarg :protocol-version :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-version common-lisp:null)
                         :accessor struct-shape-can-interface-protocol-version
                         :shape "ProtocolVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-can-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'can-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'can-interface 'make-can-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input can-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input can-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-name))
      (common-lisp:list
       (common-lisp:cons "protocolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-version))
      (common-lisp:list
       (common-lisp:cons "protocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input can-interface))
   common-lisp:nil))
(common-lisp:deftype can-interface-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass can-signal common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         (common-lisp:error ":messageid is required") :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-can-signal-message-id :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-big-endian :initarg :is-big-endian :initform
                         (common-lisp:error ":isbigendian is required") :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor struct-shape-can-signal-is-big-endian :shape
                         "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-signed :initarg :is-signed :initform
                         (common-lisp:error ":issigned is required") :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor struct-shape-can-signal-is-signed :shape
                         "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-bit :initarg :start-bit :initform
                         (common-lisp:error ":startbit is required") :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-can-signal-start-bit :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offset :initarg :offset :initform
                         (common-lisp:error ":offset is required") :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-can-signal-offset :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (factor :initarg :factor :initform
                         (common-lisp:error ":factor is required") :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-can-signal-factor :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (length :initarg :length :initform
                         (common-lisp:error ":length is required") :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-can-signal-length :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or can-signal-name common-lisp:null)
                         :accessor struct-shape-can-signal-name :shape
                         "CanSignalName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-can-signal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'can-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'can-signal 'make-can-signal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input can-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input can-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-big-endian))
      (common-lisp:list
       (common-lisp:cons "isBigEndian"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-signed))
      (common-lisp:list
       (common-lisp:cons "isSigned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-bit))
      (common-lisp:list
       (common-lisp:cons "startBit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'factor))
      (common-lisp:list
       (common-lisp:cons "factor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input can-signal))
   common-lisp:nil))
(common-lisp:deftype can-signal-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-log-delivery-options common-lisp:nil
                       ((log-type :initarg :log-type :initform
                         (common-lisp:error ":logtype is required") :type
                         (common-lisp:or log-type common-lisp:null) :accessor
                         struct-shape-cloud-watch-log-delivery-options-log-type
                         :shape "LogType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-log-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-log-delivery-options-log-group-name
                         :shape "CloudWatchLogGroupName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-log-delivery-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-log-delivery-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-log-delivery-options
                    'make-cloud-watch-log-delivery-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-delivery-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-delivery-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-delivery-options))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collection-scheme common-lisp:nil
                       ((time-based-collection-scheme :initarg
                         :time-based-collection-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or time-based-collection-scheme
                                         common-lisp:null)
                         :accessor
                         struct-shape-collection-scheme-time-based-collection-scheme
                         :shape "TimeBasedCollectionScheme" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (condition-based-collection-scheme :initarg
                         :condition-based-collection-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or condition-based-collection-scheme
                                         common-lisp:null)
                         :accessor
                         struct-shape-collection-scheme-condition-based-collection-scheme
                         :shape "ConditionBasedCollectionScheme" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collection-scheme
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'collection-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collection-scheme 'make-collection-scheme))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collection-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collection-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-based-collection-scheme))
      (common-lisp:list
       (common-lisp:cons "timeBasedCollectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-based-collection-scheme))
      (common-lisp:list
       (common-lisp:cons "conditionBasedCollectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collection-scheme))
   common-lisp:nil))
(common-lisp:deftype compression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass condition-based-collection-scheme common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or |eventExpression| common-lisp:null)
                         :accessor
                         struct-shape-condition-based-collection-scheme-expression
                         :shape "eventExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-trigger-interval-ms :initarg
                         :minimum-trigger-interval-ms :initform common-lisp:nil
                         :type (common-lisp:or |uint32| common-lisp:null)
                         :accessor
                         struct-shape-condition-based-collection-scheme-minimum-trigger-interval-ms
                         :shape "uint32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger-mode :initarg :trigger-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-mode common-lisp:null)
                         :accessor
                         struct-shape-condition-based-collection-scheme-trigger-mode
                         :shape "TriggerMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition-language-version :initarg
                         :condition-language-version :initform common-lisp:nil
                         :type
                         (common-lisp:or |languageVersion| common-lisp:null)
                         :accessor
                         struct-shape-condition-based-collection-scheme-condition-language-version
                         :shape "languageVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-condition-based-collection-scheme
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'condition-based-collection-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'condition-based-collection-scheme
                    'make-condition-based-collection-scheme))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          condition-based-collection-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          condition-based-collection-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-trigger-interval-ms))
      (common-lisp:list
       (common-lisp:cons "minimumTriggerIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-mode))
      (common-lisp:list
       (common-lisp:cons "triggerMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-language-version))
      (common-lisp:list
       (common-lisp:cons "conditionLanguageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          condition-based-collection-scheme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource :initarg :resource :initform common-lisp:nil :reader
       conflict-exception-resource)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-campaign-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-create-campaign-request-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform
                         (common-lisp:error ":signalcatalogarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         (common-lisp:error ":targetarn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-campaign-request-target-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-start-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiry-time :initarg :expiry-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-expiry-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-trigger-collection-duration :initarg
                         :post-trigger-collection-duration :initform
                         common-lisp:nil :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         struct-shape-create-campaign-request-post-trigger-collection-duration
                         :shape "uint32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (diagnostics-mode :initarg :diagnostics-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or diagnostics-mode common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-diagnostics-mode
                         :shape "DiagnosticsMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spooling-mode :initarg :spooling-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or spooling-mode common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-spooling-mode
                         :shape "SpoolingMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compression :initarg :compression :initform
                         common-lisp:nil :type
                         (common-lisp:or compression common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-compression
                         :shape "Compression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or |priority| common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-priority :shape
                         "priority" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signals-to-collect :initarg :signals-to-collect
                         :initform common-lisp:nil :type
                         (common-lisp:or signal-information-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-signals-to-collect
                         :shape "SignalInformationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collection-scheme :initarg :collection-scheme
                         :initform
                         (common-lisp:error ":collectionscheme is required")
                         :type
                         (common-lisp:or collection-scheme common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-collection-scheme
                         :shape "CollectionScheme" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-extra-dimensions :initarg :data-extra-dimensions
                         :initform common-lisp:nil :type
                         (common-lisp:or data-extra-dimension-node-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-data-extra-dimensions
                         :shape "DataExtraDimensionNodePathList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-campaign-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-destination-configs :initarg
                         :data-destination-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or data-destination-configs
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-data-destination-configs
                         :shape "DataDestinationConfigs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-campaign-request 'make-create-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-trigger-collection-duration))
      (common-lisp:list
       (common-lisp:cons "postTriggerCollectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics-mode))
      (common-lisp:list
       (common-lisp:cons "diagnosticsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spooling-mode))
      (common-lisp:list
       (common-lisp:cons "spoolingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signals-to-collect))
      (common-lisp:list
       (common-lisp:cons "signalsToCollect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-scheme))
      (common-lisp:list
       (common-lisp:cons "collectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-extra-dimensions))
      (common-lisp:list
       (common-lisp:cons "dataExtraDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-destination-configs))
      (common-lisp:list
       (common-lisp:cons "dataDestinationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-campaign-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-create-campaign-response-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-campaign-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-campaign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-campaign-response 'make-create-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-decoder-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-create-decoder-manifest-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-create-decoder-manifest-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform
                         (common-lisp:error ":modelmanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-decoder-manifest-request-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signal-decoders :initarg :signal-decoders :initform
                         common-lisp:nil :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         struct-shape-create-decoder-manifest-request-signal-decoders
                         :shape "SignalDecoders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-interfaces :initarg :network-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         struct-shape-create-decoder-manifest-request-network-interfaces
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-decoder-manifest-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-decoder-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-decoder-manifest-request
                    'make-create-decoder-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-decoders))
      (common-lisp:list
       (common-lisp:cons "signalDecoders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-decoder-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-create-decoder-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-decoder-manifest-response-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-decoder-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-decoder-manifest-response
                    'make-create-decoder-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-request common-lisp:nil
                       ((fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-create-fleet-request-fleet-id :shape
                         "fleetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-request-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform
                         (common-lisp:error ":signalcatalogarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-request-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-fleet-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fleet-request 'make-create-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-response common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-create-fleet-response-id :shape "fleetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-fleet-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fleet-response 'make-create-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-create-model-manifest-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-create-model-manifest-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes :initarg :nodes :initform
                         (common-lisp:error ":nodes is required") :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor
                         struct-shape-create-model-manifest-request-nodes
                         :shape "listOfStrings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform
                         (common-lisp:error ":signalcatalogarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-model-manifest-request-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-model-manifest-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-model-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-model-manifest-request
                    'make-create-model-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-create-model-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-model-manifest-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-model-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-model-manifest-response
                    'make-create-model-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-signal-catalog-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-create-signal-catalog-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-create-signal-catalog-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes :initarg :nodes :initform common-lisp:nil :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         struct-shape-create-signal-catalog-request-nodes
                         :shape "Nodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-signal-catalog-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-signal-catalog-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-signal-catalog-request
                    'make-create-signal-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-signal-catalog-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-create-signal-catalog-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-signal-catalog-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-signal-catalog-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-signal-catalog-response
                    'make-create-signal-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-error common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-error-vehicle-name :shape
                         "vehicleName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-create-vehicle-error-code
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-create-vehicle-error-message
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vehicle-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-error 'make-create-vehicle-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-vehicle-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-vehicle-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-vehicle-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform
                         (common-lisp:error ":modelmanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :decoder-manifest-arn
                         :initform
                         (common-lisp:error ":decodermanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-decoder-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-attributes :shape
                         "attributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-behavior :initarg :association-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or vehicle-association-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-association-behavior
                         :shape "VehicleAssociationBehavior" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-vehicle-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-request 'make-create-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-behavior))
      (common-lisp:list
       (common-lisp:cons "associationBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-request-item common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-item-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform
                         (common-lisp:error ":modelmanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-item-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :decoder-manifest-arn
                         :initform
                         (common-lisp:error ":decodermanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-item-decoder-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-item-attributes
                         :shape "attributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-behavior :initarg :association-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or vehicle-association-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-request-item-association-behavior
                         :shape "VehicleAssociationBehavior" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-vehicle-request-item-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vehicle-request-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-request-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-request-item
                    'make-create-vehicle-request-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-behavior))
      (common-lisp:list
       (common-lisp:cons "associationBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-response common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-response-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-vehicle-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-vehicle-response-thing-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-response 'make-create-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-response-item common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-create-vehicle-response-item-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-vehicle-response-item-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-create-vehicle-response-item-thing-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vehicle-response-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-response-item
                    'make-create-vehicle-response-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-property common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-custom-property-fully-qualified-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor struct-shape-custom-property-data-type
                         :shape "NodeDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-encoding :initarg :data-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or node-data-encoding common-lisp:null)
                         :accessor struct-shape-custom-property-data-encoding
                         :shape "NodeDataEncoding" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-custom-property-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deprecation-message :initarg :deprecation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-custom-property-deprecation-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-custom-property-comment :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (struct-fully-qualified-name :initarg
                         :struct-fully-qualified-name :initform common-lisp:nil
                         :type (common-lisp:or node-path common-lisp:null)
                         :accessor
                         struct-shape-custom-property-struct-fully-qualified-name
                         :shape "NodePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'custom-property 'make-custom-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-encoding))
      (common-lisp:list
       (common-lisp:cons "dataEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-message))
      (common-lisp:list
       (common-lisp:cons "deprecationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'struct-fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "structFullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-struct common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-custom-struct-fully-qualified-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-custom-struct-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deprecation-message :initarg :deprecation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-custom-struct-deprecation-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-custom-struct-comment :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-struct
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-struct
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'custom-struct 'make-custom-struct))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-struct))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-struct))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-message))
      (common-lisp:list
       (common-lisp:cons "deprecationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-struct))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-destination-config common-lisp:nil
                       ((s3config :initarg :s3config :initform common-lisp:nil
                         :type (common-lisp:or s3config common-lisp:null)
                         :accessor
                         struct-shape-data-destination-config-s3config :shape
                         "S3Config" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestream-config :initarg :timestream-config
                         :initform common-lisp:nil :type
                         (common-lisp:or timestream-config common-lisp:null)
                         :accessor
                         struct-shape-data-destination-config-timestream-config
                         :shape "TimestreamConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-destination-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-destination-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-destination-config 'make-data-destination-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-destination-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-destination-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3config))
      (common-lisp:list
       (common-lisp:cons "s3Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestream-config))
      (common-lisp:list
       (common-lisp:cons "timestreamConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-destination-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-destination-configs ()
   '(trivial-types:proper-list data-destination-config))
 (common-lisp:defun make-data-destination-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-destination-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-extra-dimension-node-path-list ()
   '(trivial-types:proper-list node-path))
 (common-lisp:defun make-data-extra-dimension-node-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass decoder-manifest-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-decoder-manifest-summary-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-decoder-manifest-summary-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-decoder-manifest-summary-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-decoder-manifest-summary-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor struct-shape-decoder-manifest-summary-status
                         :shape "ManifestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-decoder-manifest-summary-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-decoder-manifest-summary-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor
                         struct-shape-decoder-manifest-summary-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decoder-manifest-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'decoder-manifest-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decoder-manifest-summary 'make-decoder-manifest-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decoder-manifest-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decoder-manifest-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decoder-manifest-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition decoder-manifest-validation-exception
     (iotfleetwise-error)
     ((invalid-signals :initarg :invalid-signals :initform common-lisp:nil
       :reader decoder-manifest-validation-exception-invalid-signals)
      (invalid-network-interfaces :initarg :invalid-network-interfaces
       :initform common-lisp:nil :reader
       decoder-manifest-validation-exception-invalid-network-interfaces)
      (message :initarg :message :initform common-lisp:nil :reader
       decoder-manifest-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'decoder-manifest-validation-exception
                    'decoder-manifest-validation-exception-invalid-signals
                    'decoder-manifest-validation-exception-invalid-network-interfaces
                    'decoder-manifest-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass delete-campaign-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-delete-campaign-request-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-request 'make-delete-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-campaign-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-delete-campaign-response-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-delete-campaign-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-campaign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-response 'make-delete-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-decoder-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-delete-decoder-manifest-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-decoder-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-decoder-manifest-request
                    'make-delete-decoder-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-decoder-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-delete-decoder-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-delete-decoder-manifest-response-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-decoder-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-decoder-manifest-response
                    'make-delete-decoder-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-request common-lisp:nil
                       ((fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-delete-fleet-request-fleet-id :shape
                         "fleetId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-request 'make-delete-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-delete-fleet-response-id :shape "fleetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-delete-fleet-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-response 'make-delete-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-delete-model-manifest-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-model-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-model-manifest-request
                    'make-delete-model-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-delete-model-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-delete-model-manifest-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-model-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-model-manifest-response
                    'make-delete-model-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-signal-catalog-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-delete-signal-catalog-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-signal-catalog-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-signal-catalog-request
                    'make-delete-signal-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-signal-catalog-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-delete-signal-catalog-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-delete-signal-catalog-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-signal-catalog-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-signal-catalog-response
                    'make-delete-signal-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-delete-vehicle-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vehicle-request 'make-delete-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vehicle-response common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-delete-vehicle-response-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-delete-vehicle-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vehicle-response 'make-delete-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-response))
   common-lisp:nil))
(common-lisp:deftype diagnostics-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-vehicle-fleet-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-disassociate-vehicle-fleet-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-disassociate-vehicle-fleet-request-fleet-id
                         :shape "fleetId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-vehicle-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-vehicle-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-vehicle-fleet-request
                    'make-disassociate-vehicle-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-vehicle-fleet-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-vehicle-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-vehicle-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-vehicle-fleet-response
                    'make-disassociate-vehicle-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-response))
   common-lisp:nil))
(common-lisp:deftype encryption-status () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fleet-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-fleet-summary-id :shape "fleetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-fleet-summary-arn :shape "arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-fleet-summary-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform
                         (common-lisp:error ":signalcatalogarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-fleet-summary-signal-catalog-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-fleet-summary-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-fleet-summary-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fleet-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'fleet-summary 'make-fleet-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass formatted-vss common-lisp:nil
                       ((vss-json :initarg :vss-json :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-formatted-vss-vss-json :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-formatted-vss
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'formatted-vss
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'formatted-vss 'make-formatted-vss))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input formatted-vss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input formatted-vss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vss-json))
      (common-lisp:list
       (common-lisp:cons "vssJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input formatted-vss))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fqns ()
   '(trivial-types:proper-list fully-qualified-name))
 (common-lisp:defun make-fqns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fully-qualified-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fully-qualified-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-campaign-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-get-campaign-request-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-campaign-request 'make-get-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-campaign-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-get-campaign-response-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-campaign-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-campaign-response-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-campaign-response-target-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or campaign-status common-lisp:null)
                         :accessor struct-shape-get-campaign-response-status
                         :shape "CampaignStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-start-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiry-time :initarg :expiry-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-expiry-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (post-trigger-collection-duration :initarg
                         :post-trigger-collection-duration :initform
                         common-lisp:nil :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         struct-shape-get-campaign-response-post-trigger-collection-duration
                         :shape "uint32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (diagnostics-mode :initarg :diagnostics-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or diagnostics-mode common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-diagnostics-mode
                         :shape "DiagnosticsMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spooling-mode :initarg :spooling-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or spooling-mode common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-spooling-mode
                         :shape "SpoolingMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compression :initarg :compression :initform
                         common-lisp:nil :type
                         (common-lisp:or compression common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-compression :shape
                         "Compression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or |priority| common-lisp:null)
                         :accessor struct-shape-get-campaign-response-priority
                         :shape "priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signals-to-collect :initarg :signals-to-collect
                         :initform common-lisp:nil :type
                         (common-lisp:or signal-information-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-signals-to-collect
                         :shape "SignalInformationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collection-scheme :initarg :collection-scheme
                         :initform common-lisp:nil :type
                         (common-lisp:or collection-scheme common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-collection-scheme
                         :shape "CollectionScheme" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-extra-dimensions :initarg :data-extra-dimensions
                         :initform common-lisp:nil :type
                         (common-lisp:or data-extra-dimension-node-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-data-extra-dimensions
                         :shape "DataExtraDimensionNodePathList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-destination-configs :initarg
                         :data-destination-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or data-destination-configs
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-response-data-destination-configs
                         :shape "DataDestinationConfigs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-campaign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-campaign-response 'make-get-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-trigger-collection-duration))
      (common-lisp:list
       (common-lisp:cons "postTriggerCollectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics-mode))
      (common-lisp:list
       (common-lisp:cons "diagnosticsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spooling-mode))
      (common-lisp:list
       (common-lisp:cons "spoolingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signals-to-collect))
      (common-lisp:list
       (common-lisp:cons "signalsToCollect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-scheme))
      (common-lisp:list
       (common-lisp:cons "collectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-extra-dimensions))
      (common-lisp:list
       (common-lisp:cons "dataExtraDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-destination-configs))
      (common-lisp:list
       (common-lisp:cons "dataDestinationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-decoder-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-decoder-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-decoder-manifest-request
                    'make-get-decoder-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-decoder-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-response-name :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-decoder-manifest-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-response-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-decoder-manifest-response-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-response-status
                         :shape "ManifestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor
                         struct-shape-get-decoder-manifest-response-message
                         :shape "message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-decoder-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-decoder-manifest-response
                    'make-get-decoder-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-encryption-configuration-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-encryption-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-encryption-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-encryption-configuration-request
                    'make-get-encryption-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-encryption-configuration-response common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-encryption-configuration-response-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-status :initarg :encryption-status
                         :initform
                         (common-lisp:error ":encryptionstatus is required")
                         :type
                         (common-lisp:or encryption-status common-lisp:null)
                         :accessor
                         struct-shape-get-encryption-configuration-response-encryption-status
                         :shape "EncryptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-get-encryption-configuration-response-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |errorMessage| common-lisp:null)
                         :accessor
                         struct-shape-get-encryption-configuration-response-error-message
                         :shape "errorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-encryption-configuration-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-encryption-configuration-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-encryption-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-encryption-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-encryption-configuration-response
                    'make-get-encryption-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-status))
      (common-lisp:list
       (common-lisp:cons "encryptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-fleet-request common-lisp:nil
                       ((fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-get-fleet-request-fleet-id :shape
                         "fleetId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-fleet-request 'make-get-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-fleet-response common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-get-fleet-response-id :shape "fleetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-fleet-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-get-fleet-response-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform
                         (common-lisp:error ":signalcatalogarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-get-fleet-response-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-fleet-response-creation-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-fleet-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-fleet-response 'make-get-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-logging-options-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-request
                    'make-get-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-logging-options-response common-lisp:nil
                       ((cloud-watch-log-delivery :initarg
                         :cloud-watch-log-delivery :initform
                         (common-lisp:error
                          ":cloudwatchlogdelivery is required")
                         :type
                         (common-lisp:or cloud-watch-log-delivery-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-logging-options-response-cloud-watch-log-delivery
                         :shape "CloudWatchLogDeliveryOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-response
                    'make-get-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-delivery))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-model-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor struct-shape-get-model-manifest-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-model-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-model-manifest-request
                    'make-get-model-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-model-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-get-model-manifest-response-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-model-manifest-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-get-model-manifest-response-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-model-manifest-response-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor
                         struct-shape-get-model-manifest-response-status :shape
                         "ManifestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-model-manifest-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-model-manifest-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-model-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-model-manifest-response
                    'make-get-model-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-register-account-status-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-register-account-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-register-account-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-register-account-status-request
                    'make-get-register-account-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-register-account-status-response common-lisp:nil
                       ((customer-account-id :initarg :customer-account-id
                         :initform
                         (common-lisp:error ":customeraccountid is required")
                         :type
                         (common-lisp:or |customerAccountId| common-lisp:null)
                         :accessor
                         struct-shape-get-register-account-status-response-customer-account-id
                         :shape "customerAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-status :initarg :account-status :initform
                         (common-lisp:error ":accountstatus is required") :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         struct-shape-get-register-account-status-response-account-status
                         :shape "RegistrationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream-registration-response :initarg
                         :timestream-registration-response :initform
                         common-lisp:nil :type
                         (common-lisp:or timestream-registration-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-register-account-status-response-timestream-registration-response
                         :shape "TimestreamRegistrationResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-registration-response :initarg
                         :iam-registration-response :initform
                         (common-lisp:error
                          ":iamregistrationresponse is required")
                         :type
                         (common-lisp:or iam-registration-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-register-account-status-response-iam-registration-response
                         :shape "IamRegistrationResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-register-account-status-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-register-account-status-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-register-account-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-register-account-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-register-account-status-response
                    'make-get-register-account-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-account-id))
      (common-lisp:list
       (common-lisp:cons "customerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-status))
      (common-lisp:list
       (common-lisp:cons "accountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-registration-response))
      (common-lisp:list
       (common-lisp:cons "timestreamRegistrationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-registration-response))
      (common-lisp:list
       (common-lisp:cons "iamRegistrationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-signal-catalog-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor struct-shape-get-signal-catalog-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-signal-catalog-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-signal-catalog-request
                    'make-get-signal-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-signal-catalog-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-get-signal-catalog-response-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-signal-catalog-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-get-signal-catalog-response-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-counts :initarg :node-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or node-counts common-lisp:null)
                         :accessor
                         struct-shape-get-signal-catalog-response-node-counts
                         :shape "NodeCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-signal-catalog-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-signal-catalog-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-signal-catalog-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-signal-catalog-response
                    'make-get-signal-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-counts))
      (common-lisp:list
       (common-lisp:cons "nodeCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-request-vehicle-name :shape
                         "vehicleName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-request 'make-get-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-response common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-response-vehicle-name :shape
                         "vehicleName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-vehicle-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-vehicle-response-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :decoder-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-get-vehicle-response-decoder-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor struct-shape-get-vehicle-response-attributes
                         :shape "attributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-response-creation-time :shape
                         "timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-response 'make-get-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-status-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-status-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-status-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-status-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vehicle-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-status-request
                    'make-get-vehicle-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-status-response common-lisp:nil
                       ((campaigns :initarg :campaigns :initform
                         common-lisp:nil :type
                         (common-lisp:or vehicle-status-list common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-status-response-campaigns
                         :shape "VehicleStatusList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-get-vehicle-status-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vehicle-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-status-response
                    'make-get-vehicle-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaigns))
      (common-lisp:list
       (common-lisp:cons "campaigns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-response))
   common-lisp:nil))
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iam-registration-response common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-iam-registration-response-role-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registration-status :initarg :registration-status
                         :initform
                         (common-lisp:error ":registrationstatus is required")
                         :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         struct-shape-iam-registration-response-registration-status
                         :shape "RegistrationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |errorMessage| common-lisp:null)
                         :accessor
                         struct-shape-iam-registration-response-error-message
                         :shape "errorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iam-registration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iam-registration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iam-registration-response
                    'make-iam-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iam-resources common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor struct-shape-iam-resources-role-arn :shape
                         "IAMRoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iam-resources
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iam-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iam-resources 'make-iam-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-decoder-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-import-decoder-manifest-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-file-definitions :initarg
                         :network-file-definitions :initform
                         (common-lisp:error
                          ":networkfiledefinitions is required")
                         :type
                         (common-lisp:or network-file-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-decoder-manifest-request-network-file-definitions
                         :shape "NetworkFileDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-decoder-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-decoder-manifest-request
                    'make-import-decoder-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-file-definitions))
      (common-lisp:list
       (common-lisp:cons "networkFileDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-decoder-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-import-decoder-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-import-decoder-manifest-response-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-decoder-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-decoder-manifest-response
                    'make-import-decoder-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-signal-catalog-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-import-signal-catalog-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-import-signal-catalog-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vss :initarg :vss :initform common-lisp:nil :type
                         (common-lisp:or formatted-vss common-lisp:null)
                         :accessor
                         struct-shape-import-signal-catalog-request-vss :shape
                         "FormattedVss" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-import-signal-catalog-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-signal-catalog-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-signal-catalog-request
                    'make-import-signal-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vss))
      (common-lisp:list
       (common-lisp:cons "vss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-signal-catalog-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-import-signal-catalog-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-import-signal-catalog-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-signal-catalog-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-signal-catalog-response
                    'make-import-signal-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-response))
   common-lisp:nil))
(common-lisp:deftype interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype interface-ids ()
   '(trivial-types:proper-list interface-id))
 (common-lisp:defun make-interface-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list interface-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass invalid-network-interface common-lisp:nil
                       ((interface-id :initarg :interface-id :initform
                         common-lisp:nil :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor
                         struct-shape-invalid-network-interface-interface-id
                         :shape "InterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or network-interface-failure-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-invalid-network-interface-reason :shape
                         "NetworkInterfaceFailureReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invalid-network-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invalid-network-interface
                    'make-invalid-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-id))
      (common-lisp:list
       (common-lisp:cons "interfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invalid-network-interfaces ()
   '(trivial-types:proper-list invalid-network-interface))
 (common-lisp:defun make-invalid-network-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            invalid-network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-node-exception
     (iotfleetwise-error)
     ((invalid-nodes :initarg :invalid-nodes :initform common-lisp:nil :reader
       invalid-node-exception-invalid-nodes)
      (reason :initarg :reason :initform common-lisp:nil :reader
       invalid-node-exception-reason)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-node-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-node-exception
                    'invalid-node-exception-invalid-nodes
                    'invalid-node-exception-reason
                    'invalid-node-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invalid-signal common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or fully-qualified-name common-lisp:null)
                         :accessor struct-shape-invalid-signal-name :shape
                         "FullyQualifiedName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-invalid-signal-reason :shape
                         "string" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invalid-signal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'invalid-signal 'make-invalid-signal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalid-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalid-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalid-signal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalid-signal-decoder common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or fully-qualified-name common-lisp:null)
                         :accessor struct-shape-invalid-signal-decoder-name
                         :shape "FullyQualifiedName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or signal-decoder-failure-reason
                                         common-lisp:null)
                         :accessor struct-shape-invalid-signal-decoder-reason
                         :shape "SignalDecoderFailureReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hint :initarg :hint :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-invalid-signal-decoder-hint :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invalid-signal-decoder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-signal-decoder
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invalid-signal-decoder 'make-invalid-signal-decoder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-signal-decoder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-signal-decoder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hint))
      (common-lisp:list
       (common-lisp:cons "hint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-signal-decoder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invalid-signal-decoders ()
   '(trivial-types:proper-list invalid-signal-decoder))
 (common-lisp:defun make-invalid-signal-decoders
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invalid-signal-decoder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype invalid-signals ()
   '(trivial-types:proper-list invalid-signal))
 (common-lisp:defun make-invalid-signals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invalid-signal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-signals-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-signals-exception-message)
      (invalid-signals :initarg :invalid-signals :initform common-lisp:nil
       :reader invalid-signals-exception-invalid-signals)))
 (common-lisp:export
  (common-lisp:list 'invalid-signals-exception
                    'invalid-signals-exception-message
                    'invalid-signals-exception-invalid-signals)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-id
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass list-campaigns-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-campaigns-request-next-token :shape
                         "nextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-campaigns-request-max-results :shape
                         "maxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |status| common-lisp:null)
                         :accessor struct-shape-list-campaigns-request-status
                         :shape "status" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-campaigns-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-campaigns-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-campaigns-request 'make-list-campaigns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-campaigns-response common-lisp:nil
                       ((campaign-summaries :initarg :campaign-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or |campaignSummaries| common-lisp:null)
                         :accessor
                         struct-shape-list-campaigns-response-campaign-summaries
                         :shape "campaignSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-campaigns-response-next-token :shape
                         "nextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-campaigns-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-campaigns-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-campaigns-response 'make-list-campaigns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-summaries))
      (common-lisp:list
       (common-lisp:cons "campaignSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-network-interfaces-request
                       common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-network-interfaces-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-network-interfaces-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-network-interfaces-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-decoder-manifest-network-interfaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-network-interfaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-network-interfaces-request
                    'make-list-decoder-manifest-network-interfaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-network-interfaces-response
                       common-lisp:nil
                       ((network-interfaces :initarg :network-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-network-interfaces-response-network-interfaces
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-network-interfaces-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-decoder-manifest-network-interfaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-network-interfaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-network-interfaces-response
                    'make-list-decoder-manifest-network-interfaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-signals-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-signals-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-signals-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-signals-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-decoder-manifest-signals-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-signals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-signals-request
                    'make-list-decoder-manifest-signals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-signals-response common-lisp:nil
                       ((signal-decoders :initarg :signal-decoders :initform
                         common-lisp:nil :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-signals-response-signal-decoders
                         :shape "SignalDecoders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifest-signals-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-decoder-manifest-signals-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-signals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-signals-response
                    'make-list-decoder-manifest-signals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-decoders))
      (common-lisp:list
       (common-lisp:cons "signalDecoders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifests-request common-lisp:nil
                       ((model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-list-decoder-manifests-request-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifests-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifests-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-decoder-manifests-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifests-request
                    'make-list-decoder-manifests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifests-response common-lisp:nil
                       ((summaries :initarg :summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or |decoderManifestSummaries|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifests-response-summaries
                         :shape "decoderManifestSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-decoder-manifests-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-decoder-manifests-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifests-response
                    'make-list-decoder-manifests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-for-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-list-fleets-for-vehicle-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-fleets-for-vehicle-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-fleets-for-vehicle-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fleets-for-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fleets-for-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fleets-for-vehicle-request
                    'make-list-fleets-for-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-for-vehicle-response common-lisp:nil
                       ((fleets :initarg :fleets :initform common-lisp:nil
                         :type (common-lisp:or |fleets| common-lisp:null)
                         :accessor
                         struct-shape-list-fleets-for-vehicle-response-fleets
                         :shape "fleets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-fleets-for-vehicle-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fleets-for-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fleets-for-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fleets-for-vehicle-response
                    'make-list-fleets-for-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleets))
      (common-lisp:list
       (common-lisp:cons "fleets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor struct-shape-list-fleets-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor struct-shape-list-fleets-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fleets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fleets-request 'make-list-fleets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-response common-lisp:nil
                       ((fleet-summaries :initarg :fleet-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or |fleetSummaries| common-lisp:null)
                         :accessor
                         struct-shape-list-fleets-response-fleet-summaries
                         :shape "fleetSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor struct-shape-list-fleets-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fleets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fleets-response 'make-list-fleets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-summaries))
      (common-lisp:list
       (common-lisp:cons "fleetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifest-nodes-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifest-nodes-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifest-nodes-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifest-nodes-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-model-manifest-nodes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-manifest-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-model-manifest-nodes-request
                    'make-list-model-manifest-nodes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifest-nodes-response common-lisp:nil
                       ((nodes :initarg :nodes :initform common-lisp:nil :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         struct-shape-list-model-manifest-nodes-response-nodes
                         :shape "Nodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifest-nodes-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-model-manifest-nodes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-manifest-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-model-manifest-nodes-response
                    'make-list-model-manifest-nodes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifests-request common-lisp:nil
                       ((signal-catalog-arn :initarg :signal-catalog-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-list-model-manifests-request-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifests-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifests-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-model-manifests-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-model-manifests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-model-manifests-request
                    'make-list-model-manifests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifests-response common-lisp:nil
                       ((summaries :initarg :summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or |modelManifestSummaries|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifests-response-summaries
                         :shape "modelManifestSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-model-manifests-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-model-manifests-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-manifests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-model-manifests-response
                    'make-list-model-manifests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalog-nodes-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalog-nodes-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalog-nodes-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalog-nodes-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-node-type :initarg :signal-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or signal-node-type common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalog-nodes-request-signal-node-type
                         :shape "SignalNodeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-signal-catalog-nodes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signal-catalog-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalog-nodes-request
                    'make-list-signal-catalog-nodes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-node-type))
      (common-lisp:list
       (common-lisp:cons "signalNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalog-nodes-response common-lisp:nil
                       ((nodes :initarg :nodes :initform common-lisp:nil :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         struct-shape-list-signal-catalog-nodes-response-nodes
                         :shape "Nodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalog-nodes-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-signal-catalog-nodes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signal-catalog-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalog-nodes-response
                    'make-list-signal-catalog-nodes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalogs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalogs-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalogs-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-signal-catalogs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-signal-catalogs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalogs-request
                    'make-list-signal-catalogs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalogs-response common-lisp:nil
                       ((summaries :initarg :summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or |signalCatalogSummaries|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalogs-response-summaries
                         :shape "signalCatalogSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-signal-catalogs-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-signal-catalogs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signal-catalogs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalogs-response
                    'make-list-signal-catalogs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-in-fleet-request common-lisp:nil
                       ((fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-list-vehicles-in-fleet-request-fleet-id
                         :shape "fleetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-in-fleet-request-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-in-fleet-request-max-results
                         :shape "maxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vehicles-in-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vehicles-in-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-in-fleet-request
                    'make-list-vehicles-in-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-in-fleet-response common-lisp:nil
                       ((vehicles :initarg :vehicles :initform common-lisp:nil
                         :type (common-lisp:or |vehicles| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-in-fleet-response-vehicles
                         :shape "vehicles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-in-fleet-response-next-token
                         :shape "nextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vehicles-in-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vehicles-in-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-in-fleet-response
                    'make-list-vehicles-in-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-request common-lisp:nil
                       ((model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-list-vehicles-request-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-request-next-token :shape
                         "nextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |listVehiclesMaxResults|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-request-max-results :shape
                         "listVehiclesMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vehicles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vehicles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-request 'make-list-vehicles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-response common-lisp:nil
                       ((vehicle-summaries :initarg :vehicle-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or |vehicleSummaries| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-response-vehicle-summaries
                         :shape "vehicleSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         struct-shape-list-vehicles-response-next-token :shape
                         "nextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vehicles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vehicles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-response 'make-list-vehicles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-summaries))
      (common-lisp:list
       (common-lisp:cons "vehicleSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-response))
   common-lisp:nil))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:deftype manifest-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-signal common-lisp:nil
                       ((topic-name :initarg :topic-name :initform
                         (common-lisp:error ":topicname is required") :type
                         (common-lisp:or topic-name common-lisp:null) :accessor
                         struct-shape-message-signal-topic-name :shape
                         "TopicName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (structured-message :initarg :structured-message
                         :initform
                         (common-lisp:error ":structuredmessage is required")
                         :type
                         (common-lisp:or structured-message common-lisp:null)
                         :accessor
                         struct-shape-message-signal-structured-message :shape
                         "StructuredMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-signal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message-signal 'make-message-signal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "topicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'structured-message))
      (common-lisp:list
       (common-lisp:cons "structuredMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-signal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model-manifest-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-model-manifest-summary-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-model-manifest-summary-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signal-catalog-arn :initarg :signal-catalog-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-model-manifest-summary-signal-catalog-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-model-manifest-summary-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor struct-shape-model-manifest-summary-status
                         :shape "ManifestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-model-manifest-summary-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-model-manifest-summary-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-model-manifest-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'model-manifest-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'model-manifest-summary 'make-model-manifest-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-manifest-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-manifest-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-manifest-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-signals-map () 'common-lisp:hash-table)
 (common-lisp:defun make-model-signals-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype network-file-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass network-file-definition common-lisp:nil
                       ((can-dbc :initarg :can-dbc :initform common-lisp:nil
                         :type
                         (common-lisp:or can-dbc-definition common-lisp:null)
                         :accessor struct-shape-network-file-definition-can-dbc
                         :shape "CanDbcDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-file-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-file-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-file-definition 'make-network-file-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-file-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-file-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-dbc))
      (common-lisp:list
       (common-lisp:cons "canDbc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-file-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-file-definitions ()
   '(trivial-types:proper-list network-file-definition))
 (common-lisp:defun make-network-file-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-file-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-files-list ()
   '(trivial-types:proper-list network-file-blob))
 (common-lisp:defun make-network-files-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-file-blob))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((interface-id :initarg :interface-id :initform
                         (common-lisp:error ":interfaceid is required") :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor struct-shape-network-interface-interface-id
                         :shape "InterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or network-interface-type
                                         common-lisp:null)
                         :accessor struct-shape-network-interface-type :shape
                         "NetworkInterfaceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (can-interface :initarg :can-interface :initform
                         common-lisp:nil :type
                         (common-lisp:or can-interface common-lisp:null)
                         :accessor struct-shape-network-interface-can-interface
                         :shape "CanInterface" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (obd-interface :initarg :obd-interface :initform
                         common-lisp:nil :type
                         (common-lisp:or obd-interface common-lisp:null)
                         :accessor struct-shape-network-interface-obd-interface
                         :shape "ObdInterface" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vehicle-middleware :initarg :vehicle-middleware
                         :initform common-lisp:nil :type
                         (common-lisp:or vehicle-middleware common-lisp:null)
                         :accessor
                         struct-shape-network-interface-vehicle-middleware
                         :shape "VehicleMiddleware" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-id))
      (common-lisp:list
       (common-lisp:cons "interfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-interface))
      (common-lisp:list
       (common-lisp:cons "canInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obd-interface))
      (common-lisp:list
       (common-lisp:cons "obdInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-middleware))
      (common-lisp:list
       (common-lisp:cons "vehicleMiddleware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:deftype network-interface-failure-reason () 'common-lisp:string)
(common-lisp:deftype network-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((branch :initarg :branch :initform common-lisp:nil
                         :type (common-lisp:or branch common-lisp:null)
                         :accessor struct-shape-node-branch :shape "Branch"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sensor :initarg :sensor :initform common-lisp:nil
                         :type (common-lisp:or sensor common-lisp:null)
                         :accessor struct-shape-node-sensor :shape "Sensor"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actuator :initarg :actuator :initform common-lisp:nil
                         :type (common-lisp:or actuator common-lisp:null)
                         :accessor struct-shape-node-actuator :shape "Actuator"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attribute :initarg :attribute :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         struct-shape-node-attribute :shape "Attribute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (struct :initarg :struct :initform common-lisp:nil
                         :type (common-lisp:or custom-struct common-lisp:null)
                         :accessor struct-shape-node-struct :shape
                         "CustomStruct" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property :initarg :property :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-property common-lisp:null)
                         :accessor struct-shape-node-property :shape
                         "CustomProperty" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensor))
      (common-lisp:list
       (common-lisp:cons "sensor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actuator))
      (common-lisp:list
       (common-lisp:cons "actuator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'struct))
      (common-lisp:list
       (common-lisp:cons "struct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-counts common-lisp:nil
                       ((total-nodes :initarg :total-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-nodes :shape "number"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-branches :initarg :total-branches :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-branches :shape
                         "number" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-sensors :initarg :total-sensors :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-sensors :shape "number"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-attributes :initarg :total-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-attributes :shape
                         "number" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-actuators :initarg :total-actuators :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-actuators :shape
                         "number" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-structs :initarg :total-structs :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-structs :shape "number"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-properties :initarg :total-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-node-counts-total-properties :shape
                         "number" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-counts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node-counts 'make-node-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-nodes))
      (common-lisp:list
       (common-lisp:cons "totalNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-branches))
      (common-lisp:list
       (common-lisp:cons "totalBranches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-sensors))
      (common-lisp:list
       (common-lisp:cons "totalSensors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-attributes))
      (common-lisp:list
       (common-lisp:cons "totalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actuators))
      (common-lisp:list
       (common-lisp:cons "totalActuators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-structs))
      (common-lisp:list
       (common-lisp:cons "totalStructs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-properties))
      (common-lisp:list
       (common-lisp:cons "totalProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-counts))
   common-lisp:nil))
(common-lisp:deftype node-data-encoding () 'common-lisp:string)
(common-lisp:deftype node-data-type () 'common-lisp:string)
(common-lisp:deftype node-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype node-paths () '(trivial-types:proper-list node-path))
 (common-lisp:defun make-node-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype nodes () '(trivial-types:proper-list node))
 (common-lisp:defun make-nodes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:deftype obd-bitmask-length () 'common-lisp:integer)
(common-lisp:deftype obd-byte-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass obd-interface common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or obd-interface-name common-lisp:null)
                         :accessor struct-shape-obd-interface-name :shape
                         "ObdInterfaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-message-id :initarg :request-message-id
                         :initform
                         (common-lisp:error ":requestmessageid is required")
                         :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor
                         struct-shape-obd-interface-request-message-id :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (obd-standard :initarg :obd-standard :initform
                         common-lisp:nil :type
                         (common-lisp:or obd-standard common-lisp:null)
                         :accessor struct-shape-obd-interface-obd-standard
                         :shape "ObdStandard" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pid-request-interval-seconds :initarg
                         :pid-request-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor
                         struct-shape-obd-interface-pid-request-interval-seconds
                         :shape "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dtc-request-interval-seconds :initarg
                         :dtc-request-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor
                         struct-shape-obd-interface-dtc-request-interval-seconds
                         :shape "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-extended-ids :initarg :use-extended-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor struct-shape-obd-interface-use-extended-ids
                         :shape "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-transmission-ecu :initarg :has-transmission-ecu
                         :initform common-lisp:nil :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         struct-shape-obd-interface-has-transmission-ecu :shape
                         "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-obd-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'obd-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'obd-interface 'make-obd-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input obd-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input obd-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-message-id))
      (common-lisp:list
       (common-lisp:cons "requestMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obd-standard))
      (common-lisp:list
       (common-lisp:cons "obdStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pid-request-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "pidRequestIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dtc-request-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "dtcRequestIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-extended-ids))
      (common-lisp:list
       (common-lisp:cons "useExtendedIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-transmission-ecu))
      (common-lisp:list
       (common-lisp:cons "hasTransmissionEcu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input obd-interface))
   common-lisp:nil))
(common-lisp:deftype obd-interface-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass obd-signal common-lisp:nil
                       ((pid-response-length :initarg :pid-response-length
                         :initform
                         (common-lisp:error ":pidresponselength is required")
                         :type
                         (common-lisp:or |positiveInteger| common-lisp:null)
                         :accessor struct-shape-obd-signal-pid-response-length
                         :shape "positiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-mode :initarg :service-mode :initform
                         (common-lisp:error ":servicemode is required") :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-obd-signal-service-mode :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pid :initarg :pid :initform
                         (common-lisp:error ":pid is required") :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-obd-signal-pid :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling :initarg :scaling :initform
                         (common-lisp:error ":scaling is required") :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-obd-signal-scaling :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (offset :initarg :offset :initform
                         (common-lisp:error ":offset is required") :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-obd-signal-offset :shape
                         "double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-byte :initarg :start-byte :initform
                         (common-lisp:error ":startbyte is required") :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-obd-signal-start-byte :shape
                         "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (byte-length :initarg :byte-length :initform
                         (common-lisp:error ":bytelength is required") :type
                         (common-lisp:or obd-byte-length common-lisp:null)
                         :accessor struct-shape-obd-signal-byte-length :shape
                         "ObdByteLength" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bit-right-shift :initarg :bit-right-shift :initform
                         common-lisp:nil :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor struct-shape-obd-signal-bit-right-shift
                         :shape "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bit-mask-length :initarg :bit-mask-length :initform
                         common-lisp:nil :type
                         (common-lisp:or obd-bitmask-length common-lisp:null)
                         :accessor struct-shape-obd-signal-bit-mask-length
                         :shape "ObdBitmaskLength" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-obd-signal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'obd-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'obd-signal 'make-obd-signal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input obd-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input obd-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-response-length))
      (common-lisp:list
       (common-lisp:cons "pidResponseLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-mode))
      (common-lisp:list
       (common-lisp:cons "serviceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling))
      (common-lisp:list
       (common-lisp:cons "scaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-byte))
      (common-lisp:list
       (common-lisp:cons "startByte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-length))
      (common-lisp:list
       (common-lisp:cons "byteLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-right-shift))
      (common-lisp:list
       (common-lisp:cons "bitRightShift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-mask-length))
      (common-lisp:list
       (common-lisp:cons "bitMaskLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input obd-signal))
   common-lisp:nil))
(common-lisp:deftype obd-standard () 'common-lisp:string)
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass primitive-message-definition common-lisp:nil
                       ((ros2primitive-message-definition :initarg
                         :ros2primitive-message-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or ros2primitive-message-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-primitive-message-definition-ros2primitive-message-definition
                         :shape "ROS2PrimitiveMessageDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-primitive-message-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'primitive-message-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'primitive-message-definition
                    'make-primitive-message-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          primitive-message-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          primitive-message-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ros2primitive-message-definition))
      (common-lisp:list
       (common-lisp:cons "ros2PrimitiveMessageDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          primitive-message-definition))
   common-lisp:nil))
(common-lisp:deftype protocol-name () 'common-lisp:string)
(common-lisp:deftype protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-encryption-configuration-request common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          put-encryption-configuration-request-kms-key-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-configuration-request-kms-key-id
                         :shape
                         "PutEncryptionConfigurationRequestKmsKeyIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-configuration-request-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-encryption-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-encryption-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-encryption-configuration-request
                    'make-put-encryption-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-configuration-request))
   common-lisp:nil))
(common-lisp:deftype put-encryption-configuration-request-kms-key-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-encryption-configuration-response common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-encryption-configuration-response-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-status :initarg :encryption-status
                         :initform
                         (common-lisp:error ":encryptionstatus is required")
                         :type
                         (common-lisp:or encryption-status common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-configuration-response-encryption-status
                         :shape "EncryptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-configuration-response-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-encryption-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-encryption-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-encryption-configuration-response
                    'make-put-encryption-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-status))
      (common-lisp:list
       (common-lisp:cons "encryptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-logging-options-request common-lisp:nil
                       ((cloud-watch-log-delivery :initarg
                         :cloud-watch-log-delivery :initform
                         (common-lisp:error
                          ":cloudwatchlogdelivery is required")
                         :type
                         (common-lisp:or cloud-watch-log-delivery-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-logging-options-request-cloud-watch-log-delivery
                         :shape "CloudWatchLogDeliveryOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-request
                    'make-put-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-delivery))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-logging-options-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-response
                    'make-put-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ros2primitive-message-definition common-lisp:nil
                       ((primitive-type :initarg :primitive-type :initform
                         (common-lisp:error ":primitivetype is required") :type
                         (common-lisp:or ros2primitive-type common-lisp:null)
                         :accessor
                         struct-shape-ros2primitive-message-definition-primitive-type
                         :shape "ROS2PrimitiveType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offset :initarg :offset :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-ros2primitive-message-definition-offset
                         :shape "double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling :initarg :scaling :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor
                         struct-shape-ros2primitive-message-definition-scaling
                         :shape "double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          ros2primitive-message-definition-upper-bound-long
                          common-lisp:null)
                         :accessor
                         struct-shape-ros2primitive-message-definition-upper-bound
                         :shape "ROS2PrimitiveMessageDefinitionUpperBoundLong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ros2primitive-message-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ros2primitive-message-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ros2primitive-message-definition
                    'make-ros2primitive-message-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ros2primitive-message-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ros2primitive-message-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primitive-type))
      (common-lisp:list
       (common-lisp:cons "primitiveType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling))
      (common-lisp:list
       (common-lisp:cons "scaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "upperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ros2primitive-message-definition))
   common-lisp:nil))
(common-lisp:deftype ros2primitive-message-definition-upper-bound-long ()
  'common-lisp:integer)
(common-lisp:deftype ros2primitive-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-account-request common-lisp:nil
                       ((timestream-resources :initarg :timestream-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or timestream-resources common-lisp:null)
                         :accessor
                         struct-shape-register-account-request-timestream-resources
                         :shape "TimestreamResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-resources :initarg :iam-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-resources common-lisp:null)
                         :accessor
                         struct-shape-register-account-request-iam-resources
                         :shape "IamResources" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-account-request 'make-register-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-resources))
      (common-lisp:list
       (common-lisp:cons "timestreamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-resources))
      (common-lisp:list
       (common-lisp:cons "iamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-account-response common-lisp:nil
                       ((register-account-status :initarg
                         :register-account-status :initform
                         (common-lisp:error
                          ":registeraccountstatus is required")
                         :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         struct-shape-register-account-response-register-account-status
                         :shape "RegistrationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream-resources :initarg :timestream-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or timestream-resources common-lisp:null)
                         :accessor
                         struct-shape-register-account-response-timestream-resources
                         :shape "TimestreamResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-resources :initarg :iam-resources :initform
                         (common-lisp:error ":iamresources is required") :type
                         (common-lisp:or iam-resources common-lisp:null)
                         :accessor
                         struct-shape-register-account-response-iam-resources
                         :shape "IamResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-register-account-response-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-register-account-response-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-account-response
                    'make-register-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'register-account-status))
      (common-lisp:list
       (common-lisp:cons "registerAccountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-resources))
      (common-lisp:list
       (common-lisp:cons "timestreamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-resources))
      (common-lisp:list
       (common-lisp:cons "iamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3config common-lisp:nil
                       ((bucket-arn :initarg :bucket-arn :initform
                         (common-lisp:error ":bucketarn is required") :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor struct-shape-s3config-bucket-arn :shape
                         "S3BucketArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         common-lisp:nil :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor struct-shape-s3config-data-format :shape
                         "DataFormat" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-compression-format :initarg
                         :storage-compression-format :initform common-lisp:nil
                         :type
                         (common-lisp:or storage-compression-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3config-storage-compression-format
                         :shape "StorageCompressionFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-s3config-prefix :shape "Prefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3config 'make-s3config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "dataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-compression-format))
      (common-lisp:list
       (common-lisp:cons "storageCompressionFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sensor common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-sensor-fully-qualified-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor struct-shape-sensor-data-type :shape
                         "NodeDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor struct-shape-sensor-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-sensor-unit :shape "string"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor struct-shape-sensor-allowed-values :shape
                         "listOfStrings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min :initarg :min :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-sensor-min :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor struct-shape-sensor-max :shape "double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecation-message :initarg :deprecation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or |message| common-lisp:null) :accessor
                         struct-shape-sensor-deprecation-message :shape
                         "message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or |message| common-lisp:null)
                         :accessor struct-shape-sensor-comment :shape "message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (struct-fully-qualified-name :initarg
                         :struct-fully-qualified-name :initform common-lisp:nil
                         :type (common-lisp:or node-path common-lisp:null)
                         :accessor
                         struct-shape-sensor-struct-fully-qualified-name :shape
                         "NodePath" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sensor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sensor
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sensor 'make-sensor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sensor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sensor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-message))
      (common-lisp:list
       (common-lisp:cons "deprecationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'struct-fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "structFullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sensor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signal-catalog-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-signal-catalog-summary-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-signal-catalog-summary-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-signal-catalog-summary-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-signal-catalog-summary-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-signal-catalog-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'signal-catalog-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'signal-catalog-summary 'make-signal-catalog-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-catalog-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-catalog-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-catalog-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signal-decoder common-lisp:nil
                       ((fully-qualified-name :initarg :fully-qualified-name
                         :initform
                         (common-lisp:error ":fullyqualifiedname is required")
                         :type
                         (common-lisp:or fully-qualified-name common-lisp:null)
                         :accessor
                         struct-shape-signal-decoder-fully-qualified-name
                         :shape "FullyQualifiedName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or signal-decoder-type common-lisp:null)
                         :accessor struct-shape-signal-decoder-type :shape
                         "SignalDecoderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interface-id :initarg :interface-id :initform
                         (common-lisp:error ":interfaceid is required") :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor struct-shape-signal-decoder-interface-id
                         :shape "InterfaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (can-signal :initarg :can-signal :initform
                         common-lisp:nil :type
                         (common-lisp:or can-signal common-lisp:null) :accessor
                         struct-shape-signal-decoder-can-signal :shape
                         "CanSignal" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (obd-signal :initarg :obd-signal :initform
                         common-lisp:nil :type
                         (common-lisp:or obd-signal common-lisp:null) :accessor
                         struct-shape-signal-decoder-obd-signal :shape
                         "ObdSignal" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-signal :initarg :message-signal :initform
                         common-lisp:nil :type
                         (common-lisp:or message-signal common-lisp:null)
                         :accessor struct-shape-signal-decoder-message-signal
                         :shape "MessageSignal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-signal-decoder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'signal-decoder
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'signal-decoder 'make-signal-decoder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signal-decoder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signal-decoder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-id))
      (common-lisp:list
       (common-lisp:cons "interfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-signal))
      (common-lisp:list
       (common-lisp:cons "canSignal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obd-signal))
      (common-lisp:list
       (common-lisp:cons "obdSignal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-signal))
      (common-lisp:list
       (common-lisp:cons "messageSignal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signal-decoder))
   common-lisp:nil))
(common-lisp:deftype signal-decoder-failure-reason () 'common-lisp:string)
(common-lisp:deftype signal-decoder-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype signal-decoders ()
   '(trivial-types:proper-list signal-decoder))
 (common-lisp:defun make-signal-decoders
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signal-decoder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass signal-information common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |wildcardSignalName| common-lisp:null)
                         :accessor struct-shape-signal-information-name :shape
                         "wildcardSignalName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-sample-count :initarg :max-sample-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxSampleCount| common-lisp:null)
                         :accessor
                         struct-shape-signal-information-max-sample-count
                         :shape "maxSampleCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-sampling-interval-ms :initarg
                         :minimum-sampling-interval-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         struct-shape-signal-information-minimum-sampling-interval-ms
                         :shape "uint32" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-signal-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'signal-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'signal-information 'make-signal-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signal-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signal-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sample-count))
      (common-lisp:list
       (common-lisp:cons "maxSampleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-sampling-interval-ms))
      (common-lisp:list
       (common-lisp:cons "minimumSamplingIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signal-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype signal-information-list ()
   '(trivial-types:proper-list signal-information))
 (common-lisp:defun make-signal-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signal-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype signal-node-type () 'common-lisp:string)
(common-lisp:deftype spooling-mode () 'common-lisp:string)
(common-lisp:deftype storage-compression-format () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype structure-message-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass structured-message common-lisp:nil
                       ((primitive-message-definition :initarg
                         :primitive-message-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or primitive-message-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-structured-message-primitive-message-definition
                         :shape "PrimitiveMessageDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (structured-message-list-definition :initarg
                         :structured-message-list-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or structured-message-list-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-structured-message-structured-message-list-definition
                         :shape "StructuredMessageListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (structured-message-definition :initarg
                         :structured-message-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or structured-message-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-structured-message-structured-message-definition
                         :shape "StructuredMessageDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-structured-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'structured-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'structured-message 'make-structured-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input structured-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input structured-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primitive-message-definition))
      (common-lisp:list
       (common-lisp:cons "primitiveMessageDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'structured-message-list-definition))
      (common-lisp:list
       (common-lisp:cons "structuredMessageListDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'structured-message-definition))
      (common-lisp:list
       (common-lisp:cons "structuredMessageDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input structured-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype structured-message-definition ()
   '(trivial-types:proper-list
     structured-message-field-name-and-data-type-pair))
 (common-lisp:defun make-structured-message-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            structured-message-field-name-and-data-type-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass structured-message-field-name-and-data-type-pair
                       common-lisp:nil
                       ((field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or structure-message-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-structured-message-field-name-and-data-type-pair-field-name
                         :shape "StructureMessageName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or structured-message common-lisp:null)
                         :accessor
                         struct-shape-structured-message-field-name-and-data-type-pair-data-type
                         :shape "StructuredMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-structured-message-field-name-and-data-type-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'structured-message-field-name-and-data-type-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'structured-message-field-name-and-data-type-pair
                    'make-structured-message-field-name-and-data-type-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          structured-message-field-name-and-data-type-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          structured-message-field-name-and-data-type-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          structured-message-field-name-and-data-type-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass structured-message-list-definition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or structure-message-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-structured-message-list-definition-name
                         :shape "StructureMessageName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (member-type :initarg :member-type :initform
                         (common-lisp:error ":membertype is required") :type
                         (common-lisp:or structured-message common-lisp:null)
                         :accessor
                         struct-shape-structured-message-list-definition-member-type
                         :shape "StructuredMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (list-type :initarg :list-type :initform
                         (common-lisp:error ":listtype is required") :type
                         (common-lisp:or structured-message-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-structured-message-list-definition-list-type
                         :shape "StructuredMessageListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity :initarg :capacity :initform common-lisp:nil
                         :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor
                         struct-shape-structured-message-list-definition-capacity
                         :shape "nonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-structured-message-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'structured-message-list-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'structured-message-list-definition
                    'make-structured-message-list-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          structured-message-list-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          structured-message-list-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-type))
      (common-lisp:list
       (common-lisp:cons "memberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-type))
      (common-lisp:list
       (common-lisp:cons "listType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          structured-message-list-definition))
   common-lisp:nil))
(common-lisp:deftype structured-message-list-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass time-based-collection-scheme common-lisp:nil
                       ((period-ms :initarg :period-ms :initform
                         (common-lisp:error ":periodms is required") :type
                         (common-lisp:or |collectionPeriodMs| common-lisp:null)
                         :accessor
                         struct-shape-time-based-collection-scheme-period-ms
                         :shape "collectionPeriodMs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-based-collection-scheme
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-based-collection-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-based-collection-scheme
                    'make-time-based-collection-scheme))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-based-collection-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-based-collection-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-ms))
      (common-lisp:list
       (common-lisp:cons "periodMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-based-collection-scheme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timestream-config common-lisp:nil
                       ((timestream-table-arn :initarg :timestream-table-arn
                         :initform
                         (common-lisp:error ":timestreamtablearn is required")
                         :type
                         (common-lisp:or timestream-table-arn common-lisp:null)
                         :accessor
                         struct-shape-timestream-config-timestream-table-arn
                         :shape "TimestreamTableArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":executionrolearn is required")
                         :type (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor
                         struct-shape-timestream-config-execution-role-arn
                         :shape "IAMRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-config 'make-timestream-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-arn))
      (common-lisp:list
       (common-lisp:cons "timestreamTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-config))
   common-lisp:nil))
(common-lisp:deftype timestream-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestream-registration-response common-lisp:nil
                       ((timestream-database-name :initarg
                         :timestream-database-name :initform
                         (common-lisp:error
                          ":timestreamdatabasename is required")
                         :type
                         (common-lisp:or timestream-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-timestream-registration-response-timestream-database-name
                         :shape "TimestreamDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timestream-table-name :initarg :timestream-table-name
                         :initform
                         (common-lisp:error ":timestreamtablename is required")
                         :type
                         (common-lisp:or timestream-table-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-timestream-registration-response-timestream-table-name
                         :shape "TimestreamTableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream-database-arn :initarg
                         :timestream-database-arn :initform common-lisp:nil
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-timestream-registration-response-timestream-database-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestream-table-arn :initarg :timestream-table-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-timestream-registration-response-timestream-table-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registration-status :initarg :registration-status
                         :initform
                         (common-lisp:error ":registrationstatus is required")
                         :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         struct-shape-timestream-registration-response-registration-status
                         :shape "RegistrationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |errorMessage| common-lisp:null)
                         :accessor
                         struct-shape-timestream-registration-response-error-message
                         :shape "errorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-registration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'timestream-registration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-registration-response
                    'make-timestream-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timestream-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timestream-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-database-name))
      (common-lisp:list
       (common-lisp:cons "timestreamDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-name))
      (common-lisp:list
       (common-lisp:cons "timestreamTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-database-arn))
      (common-lisp:list
       (common-lisp:cons "timestreamDatabaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-arn))
      (common-lisp:list
       (common-lisp:cons "timestreamTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timestream-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timestream-resources common-lisp:nil
                       ((timestream-database-name :initarg
                         :timestream-database-name :initform
                         (common-lisp:error
                          ":timestreamdatabasename is required")
                         :type
                         (common-lisp:or timestream-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-timestream-resources-timestream-database-name
                         :shape "TimestreamDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timestream-table-name :initarg :timestream-table-name
                         :initform
                         (common-lisp:error ":timestreamtablename is required")
                         :type
                         (common-lisp:or timestream-table-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-timestream-resources-timestream-table-name
                         :shape "TimestreamTableName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-resources
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-resources 'make-timestream-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-database-name))
      (common-lisp:list
       (common-lisp:cons "timestreamDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-name))
      (common-lisp:list
       (common-lisp:cons "timestreamTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-resources))
   common-lisp:nil))
(common-lisp:deftype timestream-table-arn () 'common-lisp:string)
(common-lisp:deftype timestream-table-name () 'common-lisp:string)
(common-lisp:deftype topic-name () 'common-lisp:string)
(common-lisp:deftype trigger-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-campaign-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-campaign-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-update-campaign-request-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-extra-dimensions :initarg :data-extra-dimensions
                         :initform common-lisp:nil :type
                         (common-lisp:or data-extra-dimension-node-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-request-data-extra-dimensions
                         :shape "DataExtraDimensionNodePathList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or update-campaign-action
                                         common-lisp:null)
                         :accessor struct-shape-update-campaign-request-action
                         :shape "UpdateCampaignAction" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-campaign-request 'make-update-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-extra-dimensions))
      (common-lisp:list
       (common-lisp:cons "dataExtraDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-campaign-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-campaign-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor struct-shape-update-campaign-response-name
                         :shape "campaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or campaign-status common-lisp:null)
                         :accessor struct-shape-update-campaign-response-status
                         :shape "CampaignStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-campaign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-campaign-response 'make-update-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-decoder-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-decoders-to-add :initarg
                         :signal-decoders-to-add :initform common-lisp:nil
                         :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-signal-decoders-to-add
                         :shape "SignalDecoders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-decoders-to-update :initarg
                         :signal-decoders-to-update :initform common-lisp:nil
                         :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-signal-decoders-to-update
                         :shape "SignalDecoders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signal-decoders-to-remove :initarg
                         :signal-decoders-to-remove :initform common-lisp:nil
                         :type (common-lisp:or fqns common-lisp:null) :accessor
                         struct-shape-update-decoder-manifest-request-signal-decoders-to-remove
                         :shape "Fqns" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-interfaces-to-add :initarg
                         :network-interfaces-to-add :initform common-lisp:nil
                         :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-network-interfaces-to-add
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-interfaces-to-update :initarg
                         :network-interfaces-to-update :initform
                         common-lisp:nil :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-network-interfaces-to-update
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-interfaces-to-remove :initarg
                         :network-interfaces-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or interface-ids common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-network-interfaces-to-remove
                         :shape "InterfaceIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-request-status
                         :shape "ManifestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-decoder-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-decoder-manifest-request
                    'make-update-decoder-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-decoders-to-add))
      (common-lisp:list
       (common-lisp:cons "signalDecodersToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-decoders-to-update))
      (common-lisp:list
       (common-lisp:cons "signalDecodersToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-decoders-to-remove))
      (common-lisp:list
       (common-lisp:cons "signalDecodersToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interfaces-to-add))
      (common-lisp:list
       (common-lisp:cons "networkInterfacesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interfaces-to-update))
      (common-lisp:list
       (common-lisp:cons "networkInterfacesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interfaces-to-remove))
      (common-lisp:list
       (common-lisp:cons "networkInterfacesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-decoder-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-update-decoder-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-decoder-manifest-response-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-decoder-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-decoder-manifest-response
                    'make-update-decoder-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-request common-lisp:nil
                       ((fleet-id :initarg :fleet-id :initform
                         (common-lisp:error ":fleetid is required") :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-update-fleet-request-fleet-id :shape
                         "fleetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-request-description :shape
                         "description" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-fleet-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-fleet-request 'make-update-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         struct-shape-update-fleet-response-id :shape "fleetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-fleet-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-fleet-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-fleet-response 'make-update-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-response))
   common-lisp:nil))
(common-lisp:deftype update-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-model-manifest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-update-model-manifest-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-update-model-manifest-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes-to-add :initarg :nodes-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or node-paths common-lisp:null) :accessor
                         struct-shape-update-model-manifest-request-nodes-to-add
                         :shape "NodePaths" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes-to-remove :initarg :nodes-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or node-paths common-lisp:null) :accessor
                         struct-shape-update-model-manifest-request-nodes-to-remove
                         :shape "NodePaths" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor
                         struct-shape-update-model-manifest-request-status
                         :shape "ManifestStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-model-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-model-manifest-request
                    'make-update-model-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-add))
      (common-lisp:list
       (common-lisp:cons "nodesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-remove))
      (common-lisp:list
       (common-lisp:cons "nodesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-manifest-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-update-model-manifest-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-model-manifest-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-model-manifest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-model-manifest-response
                    'make-update-model-manifest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-signal-catalog-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-update-signal-catalog-request-name :shape
                         "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor
                         struct-shape-update-signal-catalog-request-description
                         :shape "description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes-to-add :initarg :nodes-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         struct-shape-update-signal-catalog-request-nodes-to-add
                         :shape "Nodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes-to-update :initarg :nodes-to-update :initform
                         common-lisp:nil :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         struct-shape-update-signal-catalog-request-nodes-to-update
                         :shape "Nodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nodes-to-remove :initarg :nodes-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or node-paths common-lisp:null) :accessor
                         struct-shape-update-signal-catalog-request-nodes-to-remove
                         :shape "NodePaths" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-signal-catalog-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-signal-catalog-request
                    'make-update-signal-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-add))
      (common-lisp:list
       (common-lisp:cons "nodesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-update))
      (common-lisp:list
       (common-lisp:cons "nodesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-remove))
      (common-lisp:list
       (common-lisp:cons "nodesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-signal-catalog-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         struct-shape-update-signal-catalog-response-name
                         :shape "resourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-signal-catalog-response-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-signal-catalog-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-signal-catalog-response
                    'make-update-signal-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-error common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-error-vehicle-name :shape
                         "vehicleName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         struct-shape-update-vehicle-error-code :shape "number"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-update-vehicle-error-message
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vehicle-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-error 'make-update-vehicle-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-vehicle-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-vehicle-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-vehicle-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-request-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-vehicle-request-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :decoder-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-vehicle-request-decoder-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-request-attributes :shape
                         "attributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-update-mode :initarg :attribute-update-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or update-mode common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-request-attribute-update-mode
                         :shape "UpdateMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vehicle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-request 'make-update-vehicle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-update-mode))
      (common-lisp:list
       (common-lisp:cons "attributeUpdateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-request-item common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-request-item-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-vehicle-request-item-model-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :decoder-manifest-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-vehicle-request-item-decoder-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-request-item-attributes
                         :shape "attributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-update-mode :initarg :attribute-update-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or update-mode common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-request-item-attribute-update-mode
                         :shape "UpdateMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vehicle-request-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-request-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-request-item
                    'make-update-vehicle-request-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-update-mode))
      (common-lisp:list
       (common-lisp:cons "attributeUpdateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-response common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-response-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-vehicle-response-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vehicle-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-response 'make-update-vehicle-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-response-item common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         struct-shape-update-vehicle-response-item-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-update-vehicle-response-item-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vehicle-response-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-response-item
                    'make-update-vehicle-response-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iotfleetwise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vehicle-association-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vehicle-middleware common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or vehicle-middleware-name
                                         common-lisp:null)
                         :accessor struct-shape-vehicle-middleware-name :shape
                         "VehicleMiddlewareName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol-name :initarg :protocol-name :initform
                         (common-lisp:error ":protocolname is required") :type
                         (common-lisp:or vehicle-middleware-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-vehicle-middleware-protocol-name :shape
                         "VehicleMiddlewareProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vehicle-middleware
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vehicle-middleware
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vehicle-middleware 'make-vehicle-middleware))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vehicle-middleware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vehicle-middleware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-name))
      (common-lisp:list
       (common-lisp:cons "protocolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vehicle-middleware))
   common-lisp:nil))
(common-lisp:deftype vehicle-middleware-name () 'common-lisp:string)
(common-lisp:deftype vehicle-middleware-protocol () 'common-lisp:string)
(common-lisp:deftype vehicle-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vehicle-status common-lisp:nil
                       ((campaign-name :initarg :campaign-name :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-vehicle-status-campaign-name
                         :shape "string" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vehicle-name :initarg :vehicle-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor struct-shape-vehicle-status-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or vehicle-state common-lisp:null)
                         :accessor struct-shape-vehicle-status-status :shape
                         "VehicleState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vehicle-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vehicle-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vehicle-status 'make-vehicle-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vehicle-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vehicle-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-name))
      (common-lisp:list
       (common-lisp:cons "campaignName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vehicle-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vehicle-status-list ()
   '(trivial-types:proper-list vehicle-status))
 (common-lisp:defun make-vehicle-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vehicle-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vehicle-summary common-lisp:nil
                       ((vehicle-name :initarg :vehicle-name :initform
                         (common-lisp:error ":vehiclename is required") :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor struct-shape-vehicle-summary-vehicle-name
                         :shape "vehicleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         struct-shape-vehicle-summary-arn :shape "arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model-manifest-arn :initarg :model-manifest-arn
                         :initform
                         (common-lisp:error ":modelmanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-vehicle-summary-model-manifest-arn :shape
                         "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :decoder-manifest-arn
                         :initform
                         (common-lisp:error ":decodermanifestarn is required")
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         struct-shape-vehicle-summary-decoder-manifest-arn
                         :shape "arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor struct-shape-vehicle-summary-creation-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform
                         (common-lisp:error
                          ":lastmodificationtime is required")
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-vehicle-summary-last-modification-time
                         :shape "timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor struct-shape-vehicle-summary-attributes
                         :shape "attributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vehicle-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vehicle-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vehicle-summary 'make-vehicle-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vehicle-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vehicle-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vehicle-summary))
   common-lisp:nil))
(common-lisp:deftype |arn| () 'common-lisp:string)
(common-lisp:deftype |attributeName| () 'common-lisp:string)
(common-lisp:deftype |attributeValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |attributesMap| () 'common-lisp:hash-table)
 (common-lisp:defun make-attributesmap (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |campaignName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |campaignSummaries| ()
   '(trivial-types:proper-list campaign-summary))
 (common-lisp:defun make-campaignsummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list campaign-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |collectionPeriodMs| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |createVehicleErrors| ()
   '(trivial-types:proper-list create-vehicle-error))
 (common-lisp:defun make-createvehicleerrors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-vehicle-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |createVehicleRequestItems| ()
   '(trivial-types:proper-list create-vehicle-request-item))
 (common-lisp:defun make-createvehiclerequestitems
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-vehicle-request-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |createVehicleResponses| ()
   '(trivial-types:proper-list create-vehicle-response-item))
 (common-lisp:defun make-createvehicleresponses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-vehicle-response-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |customerAccountId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |decoderManifestSummaries| ()
   '(trivial-types:proper-list decoder-manifest-summary))
 (common-lisp:defun make-decodermanifestsummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            decoder-manifest-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |description| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |eventExpression| () 'common-lisp:string)
(common-lisp:deftype |fleetId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |fleetSummaries| ()
   '(trivial-types:proper-list fleet-summary))
 (common-lisp:defun make-fleetsummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |fleets| () '(trivial-types:proper-list |fleetId|))
 (common-lisp:defun make-fleets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |fleetId|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |languageVersion| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |listOfStrings| ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun make-listofstrings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |listVehiclesMaxResults| () 'common-lisp:integer)
(common-lisp:deftype |maxResults| () 'common-lisp:integer)
(common-lisp:deftype |maxSampleCount| () 'common-lisp:integer)
(common-lisp:deftype |message| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |modelManifestSummaries| ()
   '(trivial-types:proper-list model-manifest-summary))
 (common-lisp:defun make-modelmanifestsummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-manifest-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |nextToken| () 'common-lisp:string)
(common-lisp:deftype |nonNegativeInteger| () 'common-lisp:integer)
(common-lisp:deftype |number| () 'common-lisp:integer)
(common-lisp:deftype |positiveInteger| () 'common-lisp:integer)
(common-lisp:deftype |priority| () 'common-lisp:integer)
(common-lisp:deftype |resourceName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |signalCatalogSummaries| ()
   '(trivial-types:proper-list signal-catalog-summary))
 (common-lisp:defun make-signalcatalogsummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signal-catalog-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |status| () 'common-lisp:string)
common-lisp:nil
common-lisp:nil
(common-lisp:deftype |uint32| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |updateVehicleErrors| ()
   '(trivial-types:proper-list update-vehicle-error))
 (common-lisp:defun make-updatevehicleerrors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-vehicle-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |updateVehicleRequestItems| ()
   '(trivial-types:proper-list update-vehicle-request-item))
 (common-lisp:defun make-updatevehiclerequestitems
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-vehicle-request-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |updateVehicleResponseItems| ()
   '(trivial-types:proper-list update-vehicle-response-item))
 (common-lisp:defun make-updatevehicleresponseitems
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-vehicle-response-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |vehicleName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |vehicleSummaries| ()
   '(trivial-types:proper-list vehicle-summary))
 (common-lisp:defun make-vehiclesummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vehicle-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |vehicles| () '(trivial-types:proper-list |vehicleName|))
 (common-lisp:defun make-vehicles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |vehicleName|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |wildcardSignalName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-vehicle-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name fleet-id)
   (common-lisp:declare (common-lisp:ignorable vehicle-name fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-vehicle-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateVehicleFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-vehicle-fleet))
(common-lisp:progn
 (common-lisp:defun batch-create-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicles)
   (common-lisp:declare (common-lisp:ignorable vehicles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchCreateVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-create-vehicle))
(common-lisp:progn
 (common-lisp:defun batch-update-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicles)
   (common-lisp:declare (common-lisp:ignorable vehicles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchUpdateVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-update-vehicle))
(common-lisp:progn
 (common-lisp:defun create-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description signal-catalog-arn
                     target-arn start-time expiry-time
                     post-trigger-collection-duration diagnostics-mode
                     spooling-mode compression priority signals-to-collect
                     collection-scheme data-extra-dimensions tags
                     data-destination-configs)
   (common-lisp:declare
    (common-lisp:ignorable name description signal-catalog-arn target-arn
     start-time expiry-time post-trigger-collection-duration diagnostics-mode
     spooling-mode compression priority signals-to-collect collection-scheme
     data-extra-dimensions tags data-destination-configs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-campaign))
(common-lisp:progn
 (common-lisp:defun create-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description model-manifest-arn
                     signal-decoders network-interfaces tags)
   (common-lisp:declare
    (common-lisp:ignorable name description model-manifest-arn signal-decoders
     network-interfaces tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDecoderManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun create-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id description signal-catalog-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id description signal-catalog-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-fleet))
(common-lisp:progn
 (common-lisp:defun create-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes signal-catalog-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description nodes signal-catalog-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-model-manifest))
(common-lisp:progn
 (common-lisp:defun create-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes tags)
   (common-lisp:declare (common-lisp:ignorable name description nodes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSignalCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-signal-catalog))
(common-lisp:progn
 (common-lisp:defun create-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name model-manifest-arn
                     decoder-manifest-arn attributes association-behavior tags)
   (common-lisp:declare
    (common-lisp:ignorable vehicle-name model-manifest-arn decoder-manifest-arn
     attributes association-behavior tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vehicle))
(common-lisp:progn
 (common-lisp:defun delete-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-campaign))
(common-lisp:progn
 (common-lisp:defun delete-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDecoderManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun delete-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-fleet))
(common-lisp:progn
 (common-lisp:defun delete-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-model-manifest))
(common-lisp:progn
 (common-lisp:defun delete-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSignalCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-signal-catalog))
(common-lisp:progn
 (common-lisp:defun delete-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name)
   (common-lisp:declare (common-lisp:ignorable vehicle-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vehicle))
(common-lisp:progn
 (common-lisp:defun disassociate-vehicle-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name fleet-id)
   (common-lisp:declare (common-lisp:ignorable vehicle-name fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-vehicle-fleet-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateVehicleFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-vehicle-fleet))
(common-lisp:progn
 (common-lisp:defun get-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-campaign))
(common-lisp:progn
 (common-lisp:defun get-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDecoderManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun get-encryption-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotfleetwise-request :method "POST" :path "/"
                                :operation "GetEncryptionConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-encryption-configuration))
(common-lisp:progn
 (common-lisp:defun get-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-fleet))
(common-lisp:progn
 (common-lisp:defun get-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotfleetwise-request :method "POST" :path "/"
                                :operation "GetLoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-logging-options))
(common-lisp:progn
 (common-lisp:defun get-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetModelManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-model-manifest))
(common-lisp:progn
 (common-lisp:defun get-register-account-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotfleetwise-request :method "POST" :path "/"
                                :operation "GetRegisterAccountStatus"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-register-account-status))
(common-lisp:progn
 (common-lisp:defun get-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSignalCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-signal-catalog))
(common-lisp:progn
 (common-lisp:defun get-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name)
   (common-lisp:declare (common-lisp:ignorable vehicle-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vehicle))
(common-lisp:progn
 (common-lisp:defun get-vehicle-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results vehicle-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results vehicle-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vehicle-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVehicleStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vehicle-status))
(common-lisp:progn
 (common-lisp:defun import-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name network-file-definitions)
   (common-lisp:declare (common-lisp:ignorable name network-file-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportDecoderManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun import-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description vss tags)
   (common-lisp:declare (common-lisp:ignorable name description vss tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportSignalCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-signal-catalog))
(common-lisp:progn
 (common-lisp:defun list-campaigns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-campaigns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCampaigns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-campaigns))
(common-lisp:progn
 (common-lisp:defun list-decoder-manifest-network-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-decoder-manifest-network-interfaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDecoderManifestNetworkInterfaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-decoder-manifest-network-interfaces))
(common-lisp:progn
 (common-lisp:defun list-decoder-manifest-signals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-decoder-manifest-signals-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDecoderManifestSignals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-decoder-manifest-signals))
(common-lisp:progn
 (common-lisp:defun list-decoder-manifests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-manifest-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-manifest-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-decoder-manifests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDecoderManifests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-decoder-manifests))
(common-lisp:progn
 (common-lisp:defun list-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListFleets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-fleets))
(common-lisp:progn
 (common-lisp:defun list-fleets-for-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable vehicle-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleets-for-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListFleetsForVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-fleets-for-vehicle))
(common-lisp:progn
 (common-lisp:defun list-model-manifest-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-manifest-nodes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelManifestNodes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-model-manifest-nodes))
(common-lisp:progn
 (common-lisp:defun list-model-manifests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key signal-catalog-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable signal-catalog-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-manifests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelManifests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-model-manifests))
(common-lisp:progn
 (common-lisp:defun list-signal-catalog-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results
                     signal-node-type)
   (common-lisp:declare
    (common-lisp:ignorable name next-token max-results signal-node-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-signal-catalog-nodes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSignalCatalogNodes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-signal-catalog-nodes))
(common-lisp:progn
 (common-lisp:defun list-signal-catalogs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-signal-catalogs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSignalCatalogs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-signal-catalogs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-vehicles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-manifest-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-manifest-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vehicles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVehicles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vehicles))
(common-lisp:progn
 (common-lisp:defun list-vehicles-in-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vehicles-in-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVehiclesInFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vehicles-in-fleet))
(common-lisp:progn
 (common-lisp:defun put-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kms-key-id encryption-type)
   (common-lisp:declare (common-lisp:ignorable kms-key-id encryption-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-encryption-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEncryptionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-encryption-configuration))
(common-lisp:progn
 (common-lisp:defun put-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cloud-watch-log-delivery)
   (common-lisp:declare (common-lisp:ignorable cloud-watch-log-delivery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-logging-options))
(common-lisp:progn
 (common-lisp:defun register-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key timestream-resources iam-resources)
   (common-lisp:declare
    (common-lisp:ignorable timestream-resources iam-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-account))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description data-extra-dimensions
                     action)
   (common-lisp:declare
    (common-lisp:ignorable name description data-extra-dimensions action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-campaign))
(common-lisp:progn
 (common-lisp:defun update-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description signal-decoders-to-add
                     signal-decoders-to-update signal-decoders-to-remove
                     network-interfaces-to-add network-interfaces-to-update
                     network-interfaces-to-remove status)
   (common-lisp:declare
    (common-lisp:ignorable name description signal-decoders-to-add
     signal-decoders-to-update signal-decoders-to-remove
     network-interfaces-to-add network-interfaces-to-update
     network-interfaces-to-remove status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDecoderManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun update-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id description)
   (common-lisp:declare (common-lisp:ignorable fleet-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateFleet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-fleet))
(common-lisp:progn
 (common-lisp:defun update-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes-to-add
                     nodes-to-remove status)
   (common-lisp:declare
    (common-lisp:ignorable name description nodes-to-add nodes-to-remove
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateModelManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-model-manifest))
(common-lisp:progn
 (common-lisp:defun update-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes-to-add
                     nodes-to-update nodes-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable name description nodes-to-add nodes-to-update
     nodes-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSignalCatalog"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-signal-catalog))
(common-lisp:progn
 (common-lisp:defun update-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name model-manifest-arn
                     decoder-manifest-arn attributes attribute-update-mode)
   (common-lisp:declare
    (common-lisp:ignorable vehicle-name model-manifest-arn decoder-manifest-arn
     attributes attribute-update-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVehicle"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-vehicle))
