;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/account/api
  (:use)
  (:nicknames #:aws/account)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/account/api)
(common-lisp:progn
 (common-lisp:define-condition account-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'account-error))
(common-lisp:progn
 (common-lisp:defclass account-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "account" :api-version
                        "2021-02-01" :host-prefix "account" :signing-name
                        "account" :global-host common-lisp:nil))
 (common-lisp:export 'account-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (account-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype address-line () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alternate-contact common-lisp:nil
                       ((alternate-contact-type :initarg
                         :alternate-contact-type :initform common-lisp:nil
                         :type
                         (common-lisp:or alternate-contact-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-alternate-contact-alternate-contact-type
                         :shape "AlternateContactType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-alternate-contact-email-address
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-alternate-contact-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor struct-shape-alternate-contact-phone-number
                         :shape "PhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or title common-lisp:null) :accessor
                         struct-shape-alternate-contact-title :shape "Title"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alternate-contact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alternate-contact
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'alternate-contact 'make-alternate-contact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alternate-contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alternate-contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-contact-type))
      (common-lisp:list
       (common-lisp:cons "AlternateContactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alternate-contact))
   common-lisp:nil))
(common-lisp:deftype alternate-contact-type () 'common-lisp:string)
(common-lisp:deftype city () 'common-lisp:string)
(common-lisp:deftype company-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (account-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass contact-information common-lisp:nil
                       ((address-line1 :initarg :address-line1 :initform
                         (common-lisp:error ":address-line1 is required") :type
                         (common-lisp:or address-line common-lisp:null)
                         :accessor
                         struct-shape-contact-information-address-line1 :shape
                         "AddressLine" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-line2 :initarg :address-line2 :initform
                         common-lisp:nil :type
                         (common-lisp:or address-line common-lisp:null)
                         :accessor
                         struct-shape-contact-information-address-line2 :shape
                         "AddressLine" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-line3 :initarg :address-line3 :initform
                         common-lisp:nil :type
                         (common-lisp:or address-line common-lisp:null)
                         :accessor
                         struct-shape-contact-information-address-line3 :shape
                         "AddressLine" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (city :initarg :city :initform
                         (common-lisp:error ":city is required") :type
                         (common-lisp:or city common-lisp:null) :accessor
                         struct-shape-contact-information-city :shape "City"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (company-name :initarg :company-name :initform
                         common-lisp:nil :type
                         (common-lisp:or company-name common-lisp:null)
                         :accessor
                         struct-shape-contact-information-company-name :shape
                         "CompanyName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (country-code :initarg :country-code :initform
                         (common-lisp:error ":country-code is required") :type
                         (common-lisp:or country-code common-lisp:null)
                         :accessor
                         struct-shape-contact-information-country-code :shape
                         "CountryCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (district-or-county :initarg :district-or-county
                         :initform common-lisp:nil :type
                         (common-lisp:or district-or-county common-lisp:null)
                         :accessor
                         struct-shape-contact-information-district-or-county
                         :shape "DistrictOrCounty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-name :initarg :full-name :initform
                         (common-lisp:error ":full-name is required") :type
                         (common-lisp:or full-name common-lisp:null) :accessor
                         struct-shape-contact-information-full-name :shape
                         "FullName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         (common-lisp:error ":phone-number is required") :type
                         (common-lisp:or contact-information-phone-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-contact-information-phone-number :shape
                         "ContactInformationPhoneNumber" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (postal-code :initarg :postal-code :initform
                         (common-lisp:error ":postal-code is required") :type
                         (common-lisp:or postal-code common-lisp:null)
                         :accessor struct-shape-contact-information-postal-code
                         :shape "PostalCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-or-region :initarg :state-or-region :initform
                         common-lisp:nil :type
                         (common-lisp:or state-or-region common-lisp:null)
                         :accessor
                         struct-shape-contact-information-state-or-region
                         :shape "StateOrRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (website-url :initarg :website-url :initform
                         common-lisp:nil :type
                         (common-lisp:or website-url common-lisp:null)
                         :accessor struct-shape-contact-information-website-url
                         :shape "WebsiteUrl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'contact-information 'make-contact-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line1))
      (common-lisp:list
       (common-lisp:cons "AddressLine1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line2))
      (common-lisp:list
       (common-lisp:cons "AddressLine2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line3))
      (common-lisp:list
       (common-lisp:cons "AddressLine3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'district-or-county))
      (common-lisp:list
       (common-lisp:cons "DistrictOrCounty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-name))
      (common-lisp:list
       (common-lisp:cons "FullName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-region))
      (common-lisp:list
       (common-lisp:cons "StateOrRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'website-url))
      (common-lisp:list
       (common-lisp:cons "WebsiteUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-information))
   common-lisp:nil))
(common-lisp:deftype contact-information-phone-number () 'common-lisp:string)
(common-lisp:deftype country-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-alternate-contact-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-alternate-contact-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alternate-contact-type :initarg
                         :alternate-contact-type :initform
                         (common-lisp:error
                          ":alternate-contact-type is required")
                         :type
                         (common-lisp:or alternate-contact-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-alternate-contact-request-alternate-contact-type
                         :shape "AlternateContactType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alternate-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-alternate-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alternate-contact-request
                    'make-delete-alternate-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-alternate-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-alternate-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-contact-type))
      (common-lisp:list
       (common-lisp:cons "AlternateContactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-alternate-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-region-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-disable-region-request-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region-name :initarg :region-name :initform
                         (common-lisp:error ":region-name is required") :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         struct-shape-disable-region-request-region-name :shape
                         "RegionName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-region-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-region-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-region-request 'make-disable-region-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-region-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-region-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-region-request))
   common-lisp:nil))
(common-lisp:deftype district-or-county () 'common-lisp:string)
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-region-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-enable-region-request-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region-name :initarg :region-name :initform
                         (common-lisp:error ":region-name is required") :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         struct-shape-enable-region-request-region-name :shape
                         "RegionName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-region-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-region-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-region-request 'make-enable-region-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-region-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-region-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-region-request))
   common-lisp:nil))
(common-lisp:deftype full-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-alternate-contact-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-alternate-contact-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alternate-contact-type :initarg
                         :alternate-contact-type :initform
                         (common-lisp:error
                          ":alternate-contact-type is required")
                         :type
                         (common-lisp:or alternate-contact-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-alternate-contact-request-alternate-contact-type
                         :shape "AlternateContactType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-alternate-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-alternate-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-alternate-contact-request
                    'make-get-alternate-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-alternate-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-alternate-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-contact-type))
      (common-lisp:list
       (common-lisp:cons "AlternateContactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-alternate-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-alternate-contact-response common-lisp:nil
                       ((alternate-contact :initarg :alternate-contact
                         :initform common-lisp:nil :type
                         (common-lisp:or alternate-contact common-lisp:null)
                         :accessor
                         struct-shape-get-alternate-contact-response-alternate-contact
                         :shape "AlternateContact" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-alternate-contact-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-alternate-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-alternate-contact-response
                    'make-get-alternate-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-alternate-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-alternate-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternate-contact))
      (common-lisp:list
       (common-lisp:cons "AlternateContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-alternate-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-information-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-contact-information-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-contact-information-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-contact-information-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-contact-information-request
                    'make-get-contact-information-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-information-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-information-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-information-response common-lisp:nil
                       ((contact-information :initarg :contact-information
                         :initform common-lisp:nil :type
                         (common-lisp:or contact-information common-lisp:null)
                         :accessor
                         struct-shape-get-contact-information-response-contact-information
                         :shape "ContactInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-contact-information-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-contact-information-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-contact-information-response
                    'make-get-contact-information-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-information-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-information-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-information))
      (common-lisp:list
       (common-lisp:cons "ContactInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-information-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-region-opt-status-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-region-opt-status-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region-name :initarg :region-name :initform
                         (common-lisp:error ":region-name is required") :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         struct-shape-get-region-opt-status-request-region-name
                         :shape "RegionName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-region-opt-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-region-opt-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-region-opt-status-request
                    'make-get-region-opt-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-region-opt-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-region-opt-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-region-opt-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-region-opt-status-response common-lisp:nil
                       ((region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         struct-shape-get-region-opt-status-response-region-name
                         :shape "RegionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region-opt-status :initarg :region-opt-status
                         :initform common-lisp:nil :type
                         (common-lisp:or region-opt-status common-lisp:null)
                         :accessor
                         struct-shape-get-region-opt-status-response-region-opt-status
                         :shape "RegionOptStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-region-opt-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-region-opt-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-region-opt-status-response
                    'make-get-region-opt-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-region-opt-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-region-opt-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-opt-status))
      (common-lisp:list
       (common-lisp:cons "RegionOptStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-region-opt-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (account-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-regions-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-regions-request-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-regions-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-regions-request-max-results :shape
                         "ListRegionsRequestMaxResultsInteger" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-regions-request-next-token-string
                                         common-lisp:null)
                         :accessor struct-shape-list-regions-request-next-token
                         :shape "ListRegionsRequestNextTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (region-opt-status-contains :initarg
                         :region-opt-status-contains :initform common-lisp:nil
                         :type
                         (common-lisp:or region-opt-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-regions-request-region-opt-status-contains
                         :shape "RegionOptStatusList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-regions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-regions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-regions-request 'make-list-regions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-regions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-regions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'region-opt-status-contains))
      (common-lisp:list
       (common-lisp:cons "RegionOptStatusContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-regions-request))
   common-lisp:nil))
(common-lisp:deftype list-regions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:deftype list-regions-request-next-token-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-regions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-regions-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (regions :initarg :regions :initform common-lisp:nil
                         :type
                         (common-lisp:or region-opt-list common-lisp:null)
                         :accessor struct-shape-list-regions-response-regions
                         :shape "RegionOptList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-regions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-regions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-regions-response 'make-list-regions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regions-response))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:deftype postal-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-alternate-contact-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-alternate-contact-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alternate-contact-type :initarg
                         :alternate-contact-type :initform
                         (common-lisp:error
                          ":alternate-contact-type is required")
                         :type
                         (common-lisp:or alternate-contact-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-alternate-contact-request-alternate-contact-type
                         :shape "AlternateContactType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         (common-lisp:error ":email-address is required") :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor
                         struct-shape-put-alternate-contact-request-email-address
                         :shape "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-put-alternate-contact-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         (common-lisp:error ":phone-number is required") :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor
                         struct-shape-put-alternate-contact-request-phone-number
                         :shape "PhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or title common-lisp:null) :accessor
                         struct-shape-put-alternate-contact-request-title
                         :shape "Title" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-alternate-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-alternate-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-alternate-contact-request
                    'make-put-alternate-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-alternate-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-alternate-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-contact-type))
      (common-lisp:list
       (common-lisp:cons "AlternateContactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-alternate-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-contact-information-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-contact-information-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact-information :initarg :contact-information
                         :initform
                         (common-lisp:error ":contact-information is required")
                         :type
                         (common-lisp:or contact-information common-lisp:null)
                         :accessor
                         struct-shape-put-contact-information-request-contact-information
                         :shape "ContactInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-contact-information-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-contact-information-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-contact-information-request
                    'make-put-contact-information-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-information-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-information))
      (common-lisp:list
       (common-lisp:cons "ContactInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-information-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass region common-lisp:nil
                       ((region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-region-region-name :shape
                         "RegionName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region-opt-status :initarg :region-opt-status
                         :initform common-lisp:nil :type
                         (common-lisp:or region-opt-status common-lisp:null)
                         :accessor struct-shape-region-region-opt-status :shape
                         "RegionOptStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-region
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'region
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-opt-status))
      (common-lisp:list
       (common-lisp:cons "RegionOptStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-opt-list () '(trivial-types:proper-list region))
 (common-lisp:defun make-region-opt-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-opt-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-opt-status-list ()
   '(trivial-types:proper-list region-opt-status))
 (common-lisp:defun make-region-opt-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-opt-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (account-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:deftype state-or-region () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (account-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (account-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-validation-exception-field-message :shape
                         "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype website-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun delete-alternate-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id alternate-contact-type)
   (common-lisp:declare
    (common-lisp:ignorable account-id alternate-contact-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alternate-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteAlternateContact"
                                                        "DeleteAlternateContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-alternate-contact))
(common-lisp:progn
 (common-lisp:defun disable-region
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id region-name)
   (common-lisp:declare (common-lisp:ignorable account-id region-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-region-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/disableRegion"
                                                        "DisableRegion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-region))
(common-lisp:progn
 (common-lisp:defun enable-region
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id region-name)
   (common-lisp:declare (common-lisp:ignorable account-id region-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-region-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/enableRegion"
                                                        "EnableRegion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-region))
(common-lisp:progn
 (common-lisp:defun get-alternate-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id alternate-contact-type)
   (common-lisp:declare
    (common-lisp:ignorable account-id alternate-contact-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-alternate-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/getAlternateContact"
                                                        "GetAlternateContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-alternate-contact))
(common-lisp:progn
 (common-lisp:defun get-contact-information
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-information-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/getContactInformation"
                                                        "GetContactInformation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-contact-information))
(common-lisp:progn
 (common-lisp:defun get-region-opt-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id region-name)
   (common-lisp:declare (common-lisp:ignorable account-id region-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-region-opt-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/getRegionOptStatus"
                                                        "GetRegionOptStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-region-opt-status))
(common-lisp:progn
 (common-lisp:defun list-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id max-results next-token
                     region-opt-status-contains)
   (common-lisp:declare
    (common-lisp:ignorable account-id max-results next-token
     region-opt-status-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-regions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/listRegions"
                                                        "ListRegions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-regions))
(common-lisp:progn
 (common-lisp:defun put-alternate-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id alternate-contact-type
                     email-address name phone-number title)
   (common-lisp:declare
    (common-lisp:ignorable account-id alternate-contact-type email-address name
     phone-number title))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-alternate-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/putAlternateContact"
                                                        "PutAlternateContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-alternate-contact))
(common-lisp:progn
 (common-lisp:defun put-contact-information
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id contact-information)
   (common-lisp:declare (common-lisp:ignorable account-id contact-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-contact-information-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'account-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/putContactInformation"
                                                        "PutContactInformation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-contact-information))
