;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/devicefarm/api
  (:use)
  (:nicknames #:aws/devicefarm)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/devicefarm/api)
(common-lisp:progn
 (common-lisp:define-condition devicefarm-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'devicefarm-error))
(common-lisp:progn
 (common-lisp:defclass devicefarm-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "devicefarm" :api-version
                        "2015-06-23" :host-prefix "devicefarm" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "DeviceFarm_20150623" :json-version
                        "1.1"))
 (common-lisp:export 'devicefarm-request))
(common-lisp:defvar *error-map*
  '(("ArgumentException" . argument-exception)
    ("CannotDeleteException" . cannot-delete-exception)
    ("IdempotencyException" . idempotency-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotEligibleException" . not-eligible-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceAccountException" . service-account-exception)
    ("TagOperationException" . tag-operation-exception)
    ("TagPolicyException" . tag-policy-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:deftype awsaccount-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-settings common-lisp:nil
                       ((aws-account-number :initarg :aws-account-number
                         :initform common-lisp:nil :type
                         (common-lisp:or awsaccount-number common-lisp:null)
                         :accessor
                         struct-shape-account-settings-aws-account-number
                         :shape "AWSAccountNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unmetered-devices :initarg :unmetered-devices
                         :initform common-lisp:nil :type
                         (common-lisp:or purchased-devices-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-settings-unmetered-devices :shape
                         "PurchasedDevicesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unmetered-remote-access-devices :initarg
                         :unmetered-remote-access-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or purchased-devices-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-settings-unmetered-remote-access-devices
                         :shape "PurchasedDevicesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-job-timeout-minutes :initarg
                         :max-job-timeout-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor
                         struct-shape-account-settings-max-job-timeout-minutes
                         :shape "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trial-minutes :initarg :trial-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or trial-minutes common-lisp:null)
                         :accessor struct-shape-account-settings-trial-minutes
                         :shape "TrialMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-slots :initarg :max-slots :initform
                         common-lisp:nil :type
                         (common-lisp:or max-slot-map common-lisp:null)
                         :accessor struct-shape-account-settings-max-slots
                         :shape "MaxSlotMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-job-timeout-minutes :initarg
                         :default-job-timeout-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor
                         struct-shape-account-settings-default-job-timeout-minutes
                         :shape "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-app-resign :initarg :skip-app-resign :initform
                         common-lisp:nil :type
                         (common-lisp:or skip-app-resign common-lisp:null)
                         :accessor
                         struct-shape-account-settings-skip-app-resign :shape
                         "SkipAppResign" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-settings 'make-account-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-number))
      (common-lisp:list
       (common-lisp:cons "awsAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmetered-devices))
      (common-lisp:list
       (common-lisp:cons "unmeteredDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unmetered-remote-access-devices))
      (common-lisp:list
       (common-lisp:cons "unmeteredRemoteAccessDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "maxJobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-minutes))
      (common-lisp:list
       (common-lisp:cons "trialMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-slots))
      (common-lisp:list
       (common-lisp:cons "maxSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "defaultJobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-app-resign))
      (common-lisp:list
       (common-lisp:cons "skipAppResign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-settings))
   common-lisp:nil))
(common-lisp:deftype accounts-cleanup () 'common-lisp:boolean)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype amazon-resource-names ()
   '(trivial-types:proper-list amazon-resource-name))
 (common-lisp:defun make-amazon-resource-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list amazon-resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype android-paths () '(trivial-types:proper-list string))
 (common-lisp:defun make-android-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-packages-cleanup () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition argument-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'argument-exception 'argument-exception-message)))
(common-lisp:progn
 (common-lisp:defclass artifact common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-artifact-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-artifact-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or artifact-type common-lisp:null)
                         :accessor struct-shape-artifact-type :shape
                         "ArtifactType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extension :initarg :extension :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-artifact-extension :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-artifact-url :shape "URL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-artifact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'artifact 'make-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact))
   common-lisp:nil))
(common-lisp:deftype artifact-category () 'common-lisp:string)
(common-lisp:deftype artifact-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype artifacts () '(trivial-types:proper-list artifact))
 (common-lisp:defun make-artifacts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype billing-method () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cpu common-lisp:nil
                       ((frequency :initarg :frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cpu-frequency :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cpu-architecture :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (clock :initarg :clock :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-cpu-clock :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cpu (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cpu
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cpu 'make-cpu))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cpu))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cpu))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock))
      (common-lisp:list
       (common-lisp:cons "clock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cpu))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cannot-delete-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cannot-delete-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cannot-delete-exception 'cannot-delete-exception-message)))
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass counters common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-counters-total :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (passed :initarg :passed :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-counters-passed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failed :initarg :failed :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-counters-failed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (warned :initarg :warned :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-counters-warned :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (errored :initarg :errored :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-counters-errored :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-counters-stopped :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skipped :initarg :skipped :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-counters-skipped :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-counters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'counters
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'counters 'make-counters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input counters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input counters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passed))
      (common-lisp:list
       (common-lisp:cons "passed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warned))
      (common-lisp:list
       (common-lisp:cons "warned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errored))
      (common-lisp:list
       (common-lisp:cons "errored"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped))
      (common-lisp:list
       (common-lisp:cons "skipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input counters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-device-pool-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-device-pool-request-project-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-device-pool-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-create-device-pool-request-description
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-create-device-pool-request-rules :shape
                         "Rules" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-devices :initarg :max-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-device-pool-request-max-devices
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-device-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-device-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-device-pool-request
                    'make-create-device-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-devices))
      (common-lisp:list
       (common-lisp:cons "maxDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-device-pool-result common-lisp:nil
                       ((device-pool :initarg :device-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or device-pool common-lisp:null)
                         :accessor
                         struct-shape-create-device-pool-result-device-pool
                         :shape "DevicePool" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-device-pool-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-device-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-device-pool-result
                    'make-create-device-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pool))
      (common-lisp:list
       (common-lisp:cons "devicePool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-profile-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-instance-profile-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-create-instance-profile-request-description
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-cleanup :initarg :package-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-instance-profile-request-package-cleanup
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclude-app-packages-from-cleanup :initarg
                         :exclude-app-packages-from-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or package-ids common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-request-exclude-app-packages-from-cleanup
                         :shape "PackageIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reboot-after-use :initarg :reboot-after-use :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-instance-profile-request-reboot-after-use
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-request
                    'make-create-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-cleanup))
      (common-lisp:list
       (common-lisp:cons "packageCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-app-packages-from-cleanup))
      (common-lisp:list
       (common-lisp:cons "excludeAppPackagesFromCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot-after-use))
      (common-lisp:list
       (common-lisp:cons "rebootAfterUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-profile-result common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-result-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-result
                    'make-create-instance-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "instanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-profile-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-project-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-description
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or network-profile-type common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-type
                         :shape "NetworkProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-bandwidth-bits :initarg :uplink-bandwidth-bits
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-uplink-bandwidth-bits
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-bandwidth-bits :initarg
                         :downlink-bandwidth-bits :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-downlink-bandwidth-bits
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-delay-ms :initarg :uplink-delay-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-uplink-delay-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-delay-ms :initarg :downlink-delay-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-downlink-delay-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-jitter-ms :initarg :uplink-jitter-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-uplink-jitter-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-jitter-ms :initarg :downlink-jitter-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-downlink-jitter-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-loss-percent :initarg :uplink-loss-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percent-integer common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-uplink-loss-percent
                         :shape "PercentInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (downlink-loss-percent :initarg :downlink-loss-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percent-integer common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-downlink-loss-percent
                         :shape "PercentInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-profile-request
                    'make-create-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'uplink-bandwidth-bits))
      (common-lisp:list
       (common-lisp:cons "uplinkBandwidthBits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-bandwidth-bits))
      (common-lisp:list
       (common-lisp:cons "downlinkBandwidthBits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-delay-ms))
      (common-lisp:list
       (common-lisp:cons "uplinkDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-delay-ms))
      (common-lisp:list
       (common-lisp:cons "downlinkDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-jitter-ms))
      (common-lisp:list
       (common-lisp:cons "uplinkJitterMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-jitter-ms))
      (common-lisp:list
       (common-lisp:cons "downlinkJitterMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-loss-percent))
      (common-lisp:list
       (common-lisp:cons "uplinkLossPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-loss-percent))
      (common-lisp:list
       (common-lisp:cons "downlinkLossPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-profile-result common-lisp:nil
                       ((network-profile :initarg :network-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-result-network-profile
                         :shape "NetworkProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-profile-result
                    'make-create-network-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile))
      (common-lisp:list
       (common-lisp:cons "networkProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-project-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-job-timeout-minutes :initarg
                         :default-job-timeout-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-default-job-timeout-minutes
                         :shape "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-create-project-request-vpc-config :shape
                         "VpcConfig" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "defaultJobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-result common-lisp:nil
                       ((project :initarg :project :initform common-lisp:nil
                         :type (common-lisp:or project common-lisp:null)
                         :accessor struct-shape-create-project-result-project
                         :shape "Project" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-result 'make-create-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-remote-access-session-configuration
                       common-lisp:nil
                       ((billing-method :initarg :billing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-method common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-configuration-billing-method
                         :shape "BillingMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-arns :initarg
                         :vpce-configuration-arns :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-resource-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-configuration-vpce-configuration-arns
                         :shape "AmazonResourceNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-remote-access-session-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-remote-access-session-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-remote-access-session-configuration
                    'make-create-remote-access-session-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-method))
      (common-lisp:list
       (common-lisp:cons "billingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-remote-access-session-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-project-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         (common-lisp:error ":devicearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-device-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-arn :initarg :instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-instance-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-debug-enabled :initarg :remote-debug-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-remote-access-session-request-remote-debug-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-record-enabled :initarg :remote-record-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-remote-access-session-request-remote-record-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-record-app-arn :initarg :remote-record-app-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-remote-record-app-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-remote-access-session-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-create-remote-access-session-request-client-id
                         :shape "ClientId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          create-remote-access-session-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-configuration
                         :shape "CreateRemoteAccessSessionConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interaction-mode :initarg :interaction-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or interaction-mode common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-request-interaction-mode
                         :shape "InteractionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-app-resign :initarg :skip-app-resign :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-remote-access-session-request-skip-app-resign
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-remote-access-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-remote-access-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-remote-access-session-request
                    'make-create-remote-access-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "instanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-debug-enabled))
      (common-lisp:list
       (common-lisp:cons "remoteDebugEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-record-enabled))
      (common-lisp:list
       (common-lisp:cons "remoteRecordEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-record-app-arn))
      (common-lisp:list
       (common-lisp:cons "remoteRecordAppArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interaction-mode))
      (common-lisp:list
       (common-lisp:cons "interactionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-app-resign))
      (common-lisp:list
       (common-lisp:cons "skipAppResign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-remote-access-session-result common-lisp:nil
                       ((remote-access-session :initarg :remote-access-session
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-session
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-remote-access-session-result-remote-access-session
                         :shape "RemoteAccessSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-remote-access-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-remote-access-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-remote-access-session-result
                    'make-create-remote-access-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-session))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-remote-access-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-test-grid-project-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-project-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-project-request-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or test-grid-vpc-config common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-project-request-vpc-config
                         :shape "TestGridVpcConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-test-grid-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-test-grid-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-test-grid-project-request
                    'make-create-test-grid-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-test-grid-project-result common-lisp:nil
                       ((test-grid-project :initarg :test-grid-project
                         :initform common-lisp:nil :type
                         (common-lisp:or test-grid-project common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-project-result-test-grid-project
                         :shape "TestGridProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-test-grid-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-test-grid-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-test-grid-project-result
                    'make-create-test-grid-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-grid-project))
      (common-lisp:list
       (common-lisp:cons "testGridProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-test-grid-url-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-url-request-project-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-in-seconds :initarg :expires-in-seconds
                         :initform
                         (common-lisp:error ":expiresinseconds is required")
                         :type
                         (common-lisp:or test-grid-url-expires-in-seconds-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-url-request-expires-in-seconds
                         :shape "TestGridUrlExpiresInSecondsInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-test-grid-url-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-test-grid-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-test-grid-url-request
                    'make-create-test-grid-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-url-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-seconds))
      (common-lisp:list
       (common-lisp:cons "expiresInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-test-grid-url-result common-lisp:nil
                       ((url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-create-test-grid-url-result-url
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-create-test-grid-url-result-expires
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-test-grid-url-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-test-grid-url-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-test-grid-url-result
                    'make-create-test-grid-url-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-url-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-url-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-test-grid-url-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-upload-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-upload-request-project-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-upload-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or upload-type common-lisp:null)
                         :accessor struct-shape-create-upload-request-type
                         :shape "UploadType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-create-upload-request-content-type :shape
                         "ContentType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-upload-request 'make-create-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-upload-result common-lisp:nil
                       ((upload :initarg :upload :initform common-lisp:nil
                         :type (common-lisp:or upload common-lisp:null)
                         :accessor struct-shape-create-upload-result-upload
                         :shape "Upload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-upload-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-upload-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-upload-result 'make-create-upload-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-upload-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-upload-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload))
      (common-lisp:list
       (common-lisp:cons "upload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-upload-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpceconfiguration-request common-lisp:nil
                       ((vpce-configuration-name :initarg
                         :vpce-configuration-name :initform
                         (common-lisp:error
                          ":vpceconfigurationname is required")
                         :type
                         (common-lisp:or vpceconfiguration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-vpceconfiguration-request-vpce-configuration-name
                         :shape "VPCEConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpce-service-name :initarg :vpce-service-name
                         :initform
                         (common-lisp:error ":vpceservicename is required")
                         :type
                         (common-lisp:or vpceservice-name common-lisp:null)
                         :accessor
                         struct-shape-create-vpceconfiguration-request-vpce-service-name
                         :shape "VPCEServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-dns-name :initarg :service-dns-name :initform
                         (common-lisp:error ":servicednsname is required")
                         :type
                         (common-lisp:or service-dns-name common-lisp:null)
                         :accessor
                         struct-shape-create-vpceconfiguration-request-service-dns-name
                         :shape "ServiceDnsName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-description :initarg
                         :vpce-configuration-description :initform
                         common-lisp:nil :type
                         (common-lisp:or vpceconfiguration-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-vpceconfiguration-request-vpce-configuration-description
                         :shape "VPCEConfigurationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpceconfiguration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpceconfiguration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpceconfiguration-request
                    'make-create-vpceconfiguration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpceconfiguration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpceconfiguration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-name))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-service-name))
      (common-lisp:list
       (common-lisp:cons "vpceServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-dns-name))
      (common-lisp:list
       (common-lisp:cons "serviceDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-description))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpceconfiguration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpceconfiguration-result common-lisp:nil
                       ((vpce-configuration :initarg :vpce-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpceconfiguration common-lisp:null)
                         :accessor
                         struct-shape-create-vpceconfiguration-result-vpce-configuration
                         :shape "VPCEConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpceconfiguration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpceconfiguration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpceconfiguration-result
                    'make-create-vpceconfiguration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpceconfiguration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpceconfiguration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-configuration))
      (common-lisp:list
       (common-lisp:cons "vpceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpceconfiguration-result))
   common-lisp:nil))
(common-lisp:deftype currency-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass customer-artifact-paths common-lisp:nil
                       ((ios-paths :initarg :ios-paths :initform
                         common-lisp:nil :type
                         (common-lisp:or ios-paths common-lisp:null) :accessor
                         struct-shape-customer-artifact-paths-ios-paths :shape
                         "IosPaths" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (android-paths :initarg :android-paths :initform
                         common-lisp:nil :type
                         (common-lisp:or android-paths common-lisp:null)
                         :accessor
                         struct-shape-customer-artifact-paths-android-paths
                         :shape "AndroidPaths" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-host-paths :initarg :device-host-paths
                         :initform common-lisp:nil :type
                         (common-lisp:or device-host-paths common-lisp:null)
                         :accessor
                         struct-shape-customer-artifact-paths-device-host-paths
                         :shape "DeviceHostPaths" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-artifact-paths
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-artifact-paths
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-artifact-paths 'make-customer-artifact-paths))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-artifact-paths))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-artifact-paths))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ios-paths))
      (common-lisp:list
       (common-lisp:cons "iosPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'android-paths))
      (common-lisp:list
       (common-lisp:cons "androidPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-host-paths))
      (common-lisp:list
       (common-lisp:cons "deviceHostPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-artifact-paths))
   common-lisp:nil))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-device-pool-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-delete-device-pool-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-pool-request
                    'make-delete-device-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-pool-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-pool-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-pool-result
                    'make-delete-device-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-profile-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-profile-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-request
                    'make-delete-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-profile-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-result
                    'make-delete-instance-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-profile-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-network-profile-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-network-profile-request
                    'make-delete-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-profile-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-network-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-network-profile-result
                    'make-delete-network-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-delete-project-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-result 'make-delete-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-remote-access-session-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-remote-access-session-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-remote-access-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-remote-access-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-remote-access-session-request
                    'make-delete-remote-access-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-remote-access-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-remote-access-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-remote-access-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-remote-access-session-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-remote-access-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-remote-access-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-remote-access-session-result
                    'make-delete-remote-access-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-remote-access-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-remote-access-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-remote-access-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-run-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-delete-run-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-run-request 'make-delete-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-run-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-run-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-run-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-run-result 'make-delete-run-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-run-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-run-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-run-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-test-grid-project-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-test-grid-project-request-project-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-test-grid-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-test-grid-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-test-grid-project-request
                    'make-delete-test-grid-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-grid-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-grid-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-grid-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-test-grid-project-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-test-grid-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-test-grid-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-test-grid-project-result
                    'make-delete-test-grid-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-grid-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-grid-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-grid-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-upload-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-delete-upload-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-upload-request 'make-delete-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-upload-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-upload-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-upload-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-upload-result 'make-delete-upload-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-upload-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-upload-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-upload-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpceconfiguration-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-vpceconfiguration-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vpceconfiguration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpceconfiguration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vpceconfiguration-request
                    'make-delete-vpceconfiguration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpceconfiguration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpceconfiguration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpceconfiguration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpceconfiguration-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vpceconfiguration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpceconfiguration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vpceconfiguration-result
                    'make-delete-vpceconfiguration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpceconfiguration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpceconfiguration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpceconfiguration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-device-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-device-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manufacturer :initarg :manufacturer :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-manufacturer :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (model :initarg :model :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-model :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-id :initarg :model-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-device-model-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (form-factor :initarg :form-factor :initform
                         common-lisp:nil :type
                         (common-lisp:or device-form-factor common-lisp:null)
                         :accessor struct-shape-device-form-factor :shape
                         "DeviceFormFactor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or device-platform common-lisp:null)
                         :accessor struct-shape-device-platform :shape
                         "DevicePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (os :initarg :os :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-os :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or cpu common-lisp:null) :accessor
                         struct-shape-device-cpu :shape "CPU" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resolution :initarg :resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or resolution common-lisp:null) :accessor
                         struct-shape-device-resolution :shape "Resolution"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (heap-size :initarg :heap-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-device-heap-size :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-device-memory :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-image :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (carrier :initarg :carrier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-device-carrier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (radio :initarg :radio :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-radio :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remote-access-enabled :initarg :remote-access-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-device-remote-access-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-debug-enabled :initarg :remote-debug-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-device-remote-debug-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fleet-type :initarg :fleet-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-fleet-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fleet-name :initarg :fleet-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-fleet-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instances :initarg :instances :initform
                         common-lisp:nil :type
                         (common-lisp:or device-instances common-lisp:null)
                         :accessor struct-shape-device-instances :shape
                         "DeviceInstances" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability :initarg :availability :initform
                         common-lisp:nil :type
                         (common-lisp:or device-availability common-lisp:null)
                         :accessor struct-shape-device-availability :shape
                         "DeviceAvailability" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manufacturer))
      (common-lisp:list
       (common-lisp:cons "manufacturer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-factor))
      (common-lisp:list
       (common-lisp:cons "formFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heap-size))
      (common-lisp:list
       (common-lisp:cons "heapSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'carrier))
      (common-lisp:list
       (common-lisp:cons "carrier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radio))
      (common-lisp:list
       (common-lisp:cons "radio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-enabled))
      (common-lisp:list
       (common-lisp:cons "remoteAccessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-debug-enabled))
      (common-lisp:list
       (common-lisp:cons "remoteDebugEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-type))
      (common-lisp:list
       (common-lisp:cons "fleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "fleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability))
      (common-lisp:list
       (common-lisp:cons "availability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-attribute () 'common-lisp:string)
(common-lisp:deftype device-availability () 'common-lisp:string)
(common-lisp:deftype device-farm-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-filter common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or device-filter-attribute
                                         common-lisp:null)
                         :accessor struct-shape-device-filter-attribute :shape
                         "DeviceFilterAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or rule-operator common-lisp:null)
                         :accessor struct-shape-device-filter-operator :shape
                         "RuleOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or device-filter-values common-lisp:null)
                         :accessor struct-shape-device-filter-values :shape
                         "DeviceFilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-filter 'make-device-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-filter))
   common-lisp:nil))
(common-lisp:deftype device-filter-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-filter-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-device-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype device-filters ()
   '(trivial-types:proper-list device-filter))
 (common-lisp:defun make-device-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-form-factor () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-host-paths () '(trivial-types:proper-list string))
 (common-lisp:defun make-device-host-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass device-instance common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-device-instance-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-device-instance-device-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-labels common-lisp:null)
                         :accessor struct-shape-device-instance-labels :shape
                         "InstanceLabels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-status common-lisp:null)
                         :accessor struct-shape-device-instance-status :shape
                         "InstanceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (udid :initarg :udid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-instance-udid :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-device-instance-instance-profile :shape
                         "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-instance 'make-device-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udid))
      (common-lisp:list
       (common-lisp:cons "udid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "instanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-instances ()
   '(trivial-types:proper-list device-instance))
 (common-lisp:defun make-device-instances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass device-minutes common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-device-minutes-total :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metered :initarg :metered :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-device-minutes-metered :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unmetered :initarg :unmetered :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-device-minutes-unmetered :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-minutes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-minutes
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-minutes 'make-device-minutes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-minutes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-minutes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metered))
      (common-lisp:list
       (common-lisp:cons "metered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmetered))
      (common-lisp:list
       (common-lisp:cons "unmetered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-minutes))
   common-lisp:nil))
(common-lisp:deftype device-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-pool common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-device-pool-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-device-pool-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-device-pool-description :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or device-pool-type common-lisp:null)
                         :accessor struct-shape-device-pool-type :shape
                         "DevicePoolType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-device-pool-rules :shape "Rules"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-devices :initarg :max-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-device-pool-max-devices :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-pool 'make-device-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-devices))
      (common-lisp:list
       (common-lisp:cons "maxDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-pool-compatibility-result common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor
                         struct-shape-device-pool-compatibility-result-device
                         :shape "Device" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible :initarg :compatible :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-device-pool-compatibility-result-compatible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incompatibility-messages :initarg
                         :incompatibility-messages :initform common-lisp:nil
                         :type
                         (common-lisp:or incompatibility-messages
                                         common-lisp:null)
                         :accessor
                         struct-shape-device-pool-compatibility-result-incompatibility-messages
                         :shape "IncompatibilityMessages" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-pool-compatibility-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-pool-compatibility-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-pool-compatibility-result
                    'make-device-pool-compatibility-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-pool-compatibility-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-pool-compatibility-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible))
      (common-lisp:list
       (common-lisp:cons "compatible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incompatibility-messages))
      (common-lisp:list
       (common-lisp:cons "incompatibilityMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-pool-compatibility-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-pool-compatibility-results ()
   '(trivial-types:proper-list device-pool-compatibility-result))
 (common-lisp:defun make-device-pool-compatibility-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            device-pool-compatibility-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-pool-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-pools () '(trivial-types:proper-list device-pool))
 (common-lisp:defun make-device-pools
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-pool))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass device-selection-configuration common-lisp:nil
                       ((filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or device-filters common-lisp:null)
                         :accessor
                         struct-shape-device-selection-configuration-filters
                         :shape "DeviceFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-devices :initarg :max-devices :initform
                         (common-lisp:error ":maxdevices is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-device-selection-configuration-max-devices
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-selection-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-selection-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-selection-configuration
                    'make-device-selection-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-devices))
      (common-lisp:list
       (common-lisp:cons "maxDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-selection-result common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or device-filters common-lisp:null)
                         :accessor struct-shape-device-selection-result-filters
                         :shape "DeviceFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matched-devices-count :initarg :matched-devices-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-device-selection-result-matched-devices-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-devices :initarg :max-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-device-selection-result-max-devices
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-selection-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-selection-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-selection-result 'make-device-selection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matched-devices-count))
      (common-lisp:list
       (common-lisp:cons "matchedDevicesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-devices))
      (common-lisp:list
       (common-lisp:cons "maxDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype devices () '(trivial-types:proper-list device))
 (common-lisp:defun make-devices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-configuration common-lisp:nil
                       ((job-timeout-minutes :initarg :job-timeout-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor
                         struct-shape-execution-configuration-job-timeout-minutes
                         :shape "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (accounts-cleanup :initarg :accounts-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or accounts-cleanup common-lisp:null)
                         :accessor
                         struct-shape-execution-configuration-accounts-cleanup
                         :shape "AccountsCleanup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-packages-cleanup :initarg :app-packages-cleanup
                         :initform common-lisp:nil :type
                         (common-lisp:or app-packages-cleanup common-lisp:null)
                         :accessor
                         struct-shape-execution-configuration-app-packages-cleanup
                         :shape "AppPackagesCleanup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-capture :initarg :video-capture :initform
                         common-lisp:nil :type
                         (common-lisp:or video-capture common-lisp:null)
                         :accessor
                         struct-shape-execution-configuration-video-capture
                         :shape "VideoCapture" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-app-resign :initarg :skip-app-resign :initform
                         common-lisp:nil :type
                         (common-lisp:or skip-app-resign common-lisp:null)
                         :accessor
                         struct-shape-execution-configuration-skip-app-resign
                         :shape "SkipAppResign" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-configuration 'make-execution-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "jobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts-cleanup))
      (common-lisp:list
       (common-lisp:cons "accountsCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-packages-cleanup))
      (common-lisp:list
       (common-lisp:cons "appPackagesCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-capture))
      (common-lisp:list
       (common-lisp:cons "videoCapture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-app-resign))
      (common-lisp:list
       (common-lisp:cons "skipAppResign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-configuration))
   common-lisp:nil))
(common-lisp:deftype execution-result () 'common-lisp:string)
(common-lisp:deftype execution-result-code () 'common-lisp:string)
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:deftype filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-account-settings-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-request
                    'make-get-account-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-settings-result common-lisp:nil
                       ((account-settings :initarg :account-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or account-settings common-lisp:null)
                         :accessor
                         struct-shape-get-account-settings-result-account-settings
                         :shape "AccountSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-settings-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-settings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-result
                    'make-get-account-settings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "accountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-instance-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-device-instance-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-instance-request
                    'make-get-device-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-instance-result common-lisp:nil
                       ((device-instance :initarg :device-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or device-instance common-lisp:null)
                         :accessor
                         struct-shape-get-device-instance-result-device-instance
                         :shape "DeviceInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-instance-result
                    'make-get-device-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-instance))
      (common-lisp:list
       (common-lisp:cons "deviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-pool-compatibility-request common-lisp:nil
                       ((device-pool-arn :initarg :device-pool-arn :initform
                         (common-lisp:error ":devicepoolarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-compatibility-request-device-pool-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-arn :initarg :app-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-compatibility-request-app-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-type :initarg :test-type :initform
                         common-lisp:nil :type
                         (common-lisp:or test-type common-lisp:null) :accessor
                         struct-shape-get-device-pool-compatibility-request-test-type
                         :shape "TestType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or schedule-run-test common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-compatibility-request-test
                         :shape "ScheduleRunTest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-run-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-compatibility-request-configuration
                         :shape "ScheduleRunConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-pool-compatibility-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-device-pool-compatibility-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-pool-compatibility-request
                    'make-get-device-pool-compatibility-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-compatibility-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-compatibility-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pool-arn))
      (common-lisp:list
       (common-lisp:cons "devicePoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-type))
      (common-lisp:list
       (common-lisp:cons "testType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-compatibility-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-pool-compatibility-result common-lisp:nil
                       ((compatible-devices :initarg :compatible-devices
                         :initform common-lisp:nil :type
                         (common-lisp:or device-pool-compatibility-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-compatibility-result-compatible-devices
                         :shape "DevicePoolCompatibilityResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (incompatible-devices :initarg :incompatible-devices
                         :initform common-lisp:nil :type
                         (common-lisp:or device-pool-compatibility-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-compatibility-result-incompatible-devices
                         :shape "DevicePoolCompatibilityResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-pool-compatibility-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-device-pool-compatibility-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-pool-compatibility-result
                    'make-get-device-pool-compatibility-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-compatibility-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-compatibility-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-devices))
      (common-lisp:list
       (common-lisp:cons "compatibleDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incompatible-devices))
      (common-lisp:list
       (common-lisp:cons "incompatibleDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-compatibility-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-pool-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-device-pool-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-pool-request 'make-get-device-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-pool-result common-lisp:nil
                       ((device-pool :initarg :device-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or device-pool common-lisp:null)
                         :accessor
                         struct-shape-get-device-pool-result-device-pool :shape
                         "DevicePool" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-pool-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-pool-result 'make-get-device-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pool))
      (common-lisp:list
       (common-lisp:cons "devicePool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-device-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-request 'make-get-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-result common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-get-device-result-device :shape
                         "Device" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-result 'make-get-device-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-profile-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-instance-profile-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-request
                    'make-get-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-profile-result common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-get-instance-profile-result-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-result
                    'make-get-instance-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "instanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-job-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-result common-lisp:nil
                       ((job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-get-job-result-job :shape "Job" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-job-result 'make-get-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-profile-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-network-profile-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-profile-request
                    'make-get-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-profile-result common-lisp:nil
                       ((network-profile :initarg :network-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile common-lisp:null)
                         :accessor
                         struct-shape-get-network-profile-result-network-profile
                         :shape "NetworkProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-profile-result
                    'make-get-network-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile))
      (common-lisp:list
       (common-lisp:cons "networkProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-offering-status-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-offering-status-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-offering-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-offering-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-offering-status-request
                    'make-get-offering-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-offering-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-offering-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-offering-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-offering-status-result common-lisp:nil
                       ((current :initarg :current :initform common-lisp:nil
                         :type
                         (common-lisp:or offering-status-map common-lisp:null)
                         :accessor
                         struct-shape-get-offering-status-result-current :shape
                         "OfferingStatusMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-period :initarg :next-period :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-status-map common-lisp:null)
                         :accessor
                         struct-shape-get-offering-status-result-next-period
                         :shape "OfferingStatusMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-offering-status-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-offering-status-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-offering-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-offering-status-result
                    'make-get-offering-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-offering-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-offering-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current))
      (common-lisp:list
       (common-lisp:cons "current"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-period))
      (common-lisp:list
       (common-lisp:cons "nextPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-offering-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-project-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-project-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-project-request 'make-get-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-project-result common-lisp:nil
                       ((project :initarg :project :initform common-lisp:nil
                         :type (common-lisp:or project common-lisp:null)
                         :accessor struct-shape-get-project-result-project
                         :shape "Project" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-project-result 'make-get-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-remote-access-session-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-remote-access-session-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-remote-access-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-remote-access-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-remote-access-session-request
                    'make-get-remote-access-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-remote-access-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-remote-access-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-remote-access-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-remote-access-session-result common-lisp:nil
                       ((remote-access-session :initarg :remote-access-session
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-session
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-remote-access-session-result-remote-access-session
                         :shape "RemoteAccessSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-remote-access-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-remote-access-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-remote-access-session-result
                    'make-get-remote-access-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-remote-access-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-remote-access-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-session))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-remote-access-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-run-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-run-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-run-request 'make-get-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-run-result common-lisp:nil
                       ((run :initarg :run :initform common-lisp:nil :type
                         (common-lisp:or run common-lisp:null) :accessor
                         struct-shape-get-run-result-run :shape "Run" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-run-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-run-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-run-result 'make-get-run-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-run-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-run-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-run-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-suite-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-suite-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-suite-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-suite-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-suite-request 'make-get-suite-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-suite-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-suite-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-suite-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-suite-result common-lisp:nil
                       ((suite :initarg :suite :initform common-lisp:nil :type
                         (common-lisp:or suite common-lisp:null) :accessor
                         struct-shape-get-suite-result-suite :shape "Suite"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-suite-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-suite-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-suite-result 'make-get-suite-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-suite-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-suite-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suite))
      (common-lisp:list
       (common-lisp:cons "suite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-suite-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-grid-project-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-get-test-grid-project-request-project-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-grid-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-test-grid-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-grid-project-request
                    'make-get-test-grid-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-grid-project-result common-lisp:nil
                       ((test-grid-project :initarg :test-grid-project
                         :initform common-lisp:nil :type
                         (common-lisp:or test-grid-project common-lisp:null)
                         :accessor
                         struct-shape-get-test-grid-project-result-test-grid-project
                         :shape "TestGridProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-grid-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-test-grid-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-grid-project-result
                    'make-get-test-grid-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-grid-project))
      (common-lisp:list
       (common-lisp:cons "testGridProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-grid-session-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-get-test-grid-session-request-project-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-test-grid-session-request-session-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-arn :initarg :session-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-get-test-grid-session-request-session-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-grid-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-test-grid-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-grid-session-request
                    'make-get-test-grid-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-grid-session-result common-lisp:nil
                       ((test-grid-session :initarg :test-grid-session
                         :initform common-lisp:nil :type
                         (common-lisp:or test-grid-session common-lisp:null)
                         :accessor
                         struct-shape-get-test-grid-session-result-test-grid-session
                         :shape "TestGridSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-grid-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-test-grid-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-grid-session-result
                    'make-get-test-grid-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-grid-session))
      (common-lisp:list
       (common-lisp:cons "testGridSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-test-grid-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-test-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-test-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-request 'make-get-test-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-test-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-test-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-test-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-result common-lisp:nil
                       ((test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or test common-lisp:null) :accessor
                         struct-shape-get-test-result-test :shape "Test"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-test-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-test-result 'make-get-test-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-test-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-test-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-test-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upload-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-get-upload-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-upload-request 'make-get-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upload-result common-lisp:nil
                       ((upload :initarg :upload :initform common-lisp:nil
                         :type (common-lisp:or upload common-lisp:null)
                         :accessor struct-shape-get-upload-result-upload :shape
                         "Upload" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-upload-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-upload-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-upload-result 'make-get-upload-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-upload-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-upload-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload))
      (common-lisp:list
       (common-lisp:cons "upload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-upload-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vpceconfiguration-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-vpceconfiguration-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vpceconfiguration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-vpceconfiguration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vpceconfiguration-request
                    'make-get-vpceconfiguration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vpceconfiguration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vpceconfiguration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vpceconfiguration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vpceconfiguration-result common-lisp:nil
                       ((vpce-configuration :initarg :vpce-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpceconfiguration common-lisp:null)
                         :accessor
                         struct-shape-get-vpceconfiguration-result-vpce-configuration
                         :shape "VPCEConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vpceconfiguration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vpceconfiguration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vpceconfiguration-result
                    'make-get-vpceconfiguration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vpceconfiguration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vpceconfiguration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-configuration))
      (common-lisp:list
       (common-lisp:cons "vpceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vpceconfiguration-result))
   common-lisp:nil))
(common-lisp:deftype host-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotency-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotency-exception 'idempotency-exception-message)))
(common-lisp:progn
 (common-lisp:defclass incompatibility-message common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-incompatibility-message-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or device-attribute common-lisp:null)
                         :accessor struct-shape-incompatibility-message-type
                         :shape "DeviceAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-incompatibility-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'incompatibility-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'incompatibility-message 'make-incompatibility-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incompatibility-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incompatibility-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incompatibility-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype incompatibility-messages ()
   '(trivial-types:proper-list incompatibility-message))
 (common-lisp:defun make-incompatibility-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list incompatibility-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass install-to-remote-access-session-request common-lisp:nil
                       ((remote-access-session-arn :initarg
                         :remote-access-session-arn :initform
                         (common-lisp:error
                          ":remoteaccesssessionarn is required")
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-install-to-remote-access-session-request-remote-access-session-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-arn :initarg :app-arn :initform
                         (common-lisp:error ":apparn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-install-to-remote-access-session-request-app-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-install-to-remote-access-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'install-to-remote-access-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'install-to-remote-access-session-request
                    'make-install-to-remote-access-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          install-to-remote-access-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          install-to-remote-access-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-session-arn))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          install-to-remote-access-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass install-to-remote-access-session-result common-lisp:nil
                       ((app-upload :initarg :app-upload :initform
                         common-lisp:nil :type
                         (common-lisp:or upload common-lisp:null) :accessor
                         struct-shape-install-to-remote-access-session-result-app-upload
                         :shape "Upload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-install-to-remote-access-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'install-to-remote-access-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'install-to-remote-access-session-result
                    'make-install-to-remote-access-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          install-to-remote-access-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          install-to-remote-access-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-upload))
      (common-lisp:list
       (common-lisp:cons "appUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          install-to-remote-access-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-labels () '(trivial-types:proper-list string))
 (common-lisp:defun make-instance-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-profile common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-instance-profile-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-cleanup :initarg :package-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-instance-profile-package-cleanup :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exclude-app-packages-from-cleanup :initarg
                         :exclude-app-packages-from-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or package-ids common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-exclude-app-packages-from-cleanup
                         :shape "PackageIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reboot-after-use :initarg :reboot-after-use :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-instance-profile-reboot-after-use :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-instance-profile-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-instance-profile-description :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-profile 'make-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-cleanup))
      (common-lisp:list
       (common-lisp:cons "packageCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-app-packages-from-cleanup))
      (common-lisp:list
       (common-lisp:cons "excludeAppPackagesFromCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot-after-use))
      (common-lisp:list
       (common-lisp:cons "rebootAfterUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-profiles ()
   '(trivial-types:proper-list instance-profile))
 (common-lisp:defun make-instance-profiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-status () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype interaction-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-operation-exception
                    'invalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:deftype ios-paths () '(trivial-types:proper-list string))
 (common-lisp:defun make-ios-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-job-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-job-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or test-type common-lisp:null) :accessor
                         struct-shape-job-type :shape "TestType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-job-created :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor struct-shape-job-status :shape
                         "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-result common-lisp:null)
                         :accessor struct-shape-job-result :shape
                         "ExecutionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started :initarg :started :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-job-started :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-job-stopped :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (counters :initarg :counters :initform common-lisp:nil
                         :type (common-lisp:or counters common-lisp:null)
                         :accessor struct-shape-job-counters :shape "Counters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-job-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-job-device :shape "Device"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-arn :initarg :instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-job-instance-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-minutes :initarg :device-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or device-minutes common-lisp:null)
                         :accessor struct-shape-job-device-minutes :shape
                         "DeviceMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video-endpoint :initarg :video-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-video-endpoint :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (video-capture :initarg :video-capture :initform
                         common-lisp:nil :type
                         (common-lisp:or video-capture common-lisp:null)
                         :accessor struct-shape-job-video-capture :shape
                         "VideoCapture" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started))
      (common-lisp:list
       (common-lisp:cons "started"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counters))
      (common-lisp:list
       (common-lisp:cons "counters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "instanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-minutes))
      (common-lisp:list
       (common-lisp:cons "deviceMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-endpoint))
      (common-lisp:list
       (common-lisp:cons "videoEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-capture))
      (common-lisp:list
       (common-lisp:cons "videoCapture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-timeout-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype jobs () '(trivial-types:proper-list job))
 (common-lisp:defun make-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-artifacts-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-artifacts-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or artifact-category common-lisp:null)
                         :accessor struct-shape-list-artifacts-request-type
                         :shape "ArtifactCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-artifacts-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-artifacts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-artifacts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-artifacts-request 'make-list-artifacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-artifacts-result common-lisp:nil
                       ((artifacts :initarg :artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or artifacts common-lisp:null) :accessor
                         struct-shape-list-artifacts-result-artifacts :shape
                         "Artifacts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-artifacts-result-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-artifacts-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-artifacts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-artifacts-result 'make-list-artifacts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-instances-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-device-instances-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-device-instances-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-device-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-device-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-device-instances-request
                    'make-list-device-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-instances-result common-lisp:nil
                       ((device-instances :initarg :device-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or device-instances common-lisp:null)
                         :accessor
                         struct-shape-list-device-instances-result-device-instances
                         :shape "DeviceInstances" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-device-instances-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-device-instances-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-device-instances-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-device-instances-result
                    'make-list-device-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-instances))
      (common-lisp:list
       (common-lisp:cons "deviceInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-pools-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-device-pools-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or device-pool-type common-lisp:null)
                         :accessor struct-shape-list-device-pools-request-type
                         :shape "DevicePoolType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-device-pools-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-device-pools-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-device-pools-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-device-pools-request
                    'make-list-device-pools-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-pools-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-pools-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-pools-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-pools-result common-lisp:nil
                       ((device-pools :initarg :device-pools :initform
                         common-lisp:nil :type
                         (common-lisp:or device-pools common-lisp:null)
                         :accessor
                         struct-shape-list-device-pools-result-device-pools
                         :shape "DevicePools" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-device-pools-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-device-pools-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-device-pools-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-device-pools-result 'make-list-device-pools-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-pools-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-pools-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pools))
      (common-lisp:list
       (common-lisp:cons "devicePools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-pools-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-request common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-devices-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-devices-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or device-filters common-lisp:null)
                         :accessor struct-shape-list-devices-request-filters
                         :shape "DeviceFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-devices-request 'make-list-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-result common-lisp:nil
                       ((devices :initarg :devices :initform common-lisp:nil
                         :type (common-lisp:or devices common-lisp:null)
                         :accessor struct-shape-list-devices-result-devices
                         :shape "Devices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-devices-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-devices-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-devices-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-devices-result 'make-list-devices-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profiles-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-instance-profiles-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-request
                    'make-list-instance-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profiles-result common-lisp:nil
                       ((instance-profiles :initarg :instance-profiles
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-profiles common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-result-instance-profiles
                         :shape "InstanceProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profiles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profiles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-result
                    'make-list-instance-profiles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profiles))
      (common-lisp:list
       (common-lisp:cons "instanceProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-jobs-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-jobs-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-result common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or jobs common-lisp:null) :accessor
                         struct-shape-list-jobs-result-jobs :shape "Jobs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-jobs-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-profiles-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-network-profiles-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or network-profile-type common-lisp:null)
                         :accessor
                         struct-shape-list-network-profiles-request-type :shape
                         "NetworkProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-network-profiles-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-network-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-network-profiles-request
                    'make-list-network-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-profiles-result common-lisp:nil
                       ((network-profiles :initarg :network-profiles :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profiles common-lisp:null)
                         :accessor
                         struct-shape-list-network-profiles-result-network-profiles
                         :shape "NetworkProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-network-profiles-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-network-profiles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-network-profiles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-network-profiles-result
                    'make-list-network-profiles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-profiles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-profiles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profiles))
      (common-lisp:list
       (common-lisp:cons "networkProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-profiles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offering-promotions-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-offering-promotions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offering-promotions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-offering-promotions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offering-promotions-request
                    'make-list-offering-promotions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-promotions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-promotions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-promotions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offering-promotions-result common-lisp:nil
                       ((offering-promotions :initarg :offering-promotions
                         :initform common-lisp:nil :type
                         (common-lisp:or offering-promotions common-lisp:null)
                         :accessor
                         struct-shape-list-offering-promotions-result-offering-promotions
                         :shape "OfferingPromotions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-offering-promotions-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offering-promotions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-offering-promotions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offering-promotions-result
                    'make-list-offering-promotions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-promotions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-promotions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-promotions))
      (common-lisp:list
       (common-lisp:cons "offeringPromotions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-promotions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offering-transactions-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-offering-transactions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offering-transactions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-offering-transactions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offering-transactions-request
                    'make-list-offering-transactions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-transactions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-transactions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-transactions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offering-transactions-result common-lisp:nil
                       ((offering-transactions :initarg :offering-transactions
                         :initform common-lisp:nil :type
                         (common-lisp:or offering-transactions
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-offering-transactions-result-offering-transactions
                         :shape "OfferingTransactions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-offering-transactions-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offering-transactions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-offering-transactions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offering-transactions-result
                    'make-list-offering-transactions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-transactions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-transactions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-transactions))
      (common-lisp:list
       (common-lisp:cons "offeringTransactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offering-transactions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-request 'make-list-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-result common-lisp:nil
                       ((offerings :initarg :offerings :initform
                         common-lisp:nil :type
                         (common-lisp:or offerings common-lisp:null) :accessor
                         struct-shape-list-offerings-result-offerings :shape
                         "Offerings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-result-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-result 'make-list-offerings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-projects-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-projects-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-result common-lisp:nil
                       ((projects :initarg :projects :initform common-lisp:nil
                         :type (common-lisp:or projects common-lisp:null)
                         :accessor struct-shape-list-projects-result-projects
                         :shape "Projects" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-projects-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-result 'make-list-projects-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projects))
      (common-lisp:list
       (common-lisp:cons "projects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-remote-access-sessions-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-remote-access-sessions-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-remote-access-sessions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-remote-access-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-remote-access-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-remote-access-sessions-request
                    'make-list-remote-access-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-remote-access-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-remote-access-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-remote-access-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-remote-access-sessions-result common-lisp:nil
                       ((remote-access-sessions :initarg
                         :remote-access-sessions :initform common-lisp:nil
                         :type
                         (common-lisp:or remote-access-sessions
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-remote-access-sessions-result-remote-access-sessions
                         :shape "RemoteAccessSessions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-remote-access-sessions-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-remote-access-sessions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-remote-access-sessions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-remote-access-sessions-result
                    'make-list-remote-access-sessions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-remote-access-sessions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-remote-access-sessions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-sessions))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-remote-access-sessions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-runs-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-runs-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-runs-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-runs-request 'make-list-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-runs-result common-lisp:nil
                       ((runs :initarg :runs :initform common-lisp:nil :type
                         (common-lisp:or runs common-lisp:null) :accessor
                         struct-shape-list-runs-result-runs :shape "Runs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-runs-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-runs-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-runs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-runs-result 'make-list-runs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-runs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-runs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-runs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-samples-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-samples-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-samples-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-samples-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-samples-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-samples-request 'make-list-samples-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-samples-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-samples-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-samples-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-samples-result common-lisp:nil
                       ((samples :initarg :samples :initform common-lisp:nil
                         :type (common-lisp:or samples common-lisp:null)
                         :accessor struct-shape-list-samples-result-samples
                         :shape "Samples" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-samples-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-samples-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-samples-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-samples-result 'make-list-samples-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-samples-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-samples-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samples))
      (common-lisp:list
       (common-lisp:cons "samples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-samples-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-suites-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-suites-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-suites-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-suites-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-suites-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-suites-request 'make-list-suites-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-suites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-suites-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-suites-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-suites-result common-lisp:nil
                       ((suites :initarg :suites :initform common-lisp:nil
                         :type (common-lisp:or suites common-lisp:null)
                         :accessor struct-shape-list-suites-result-suites
                         :shape "Suites" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-suites-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-suites-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-suites-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-suites-result 'make-list-suites-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-suites-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-suites-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suites))
      (common-lisp:list
       (common-lisp:cons "suites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-suites-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-projects-request common-lisp:nil
                       ((max-result :initarg :max-result :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-size common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-projects-request-max-result
                         :shape "MaxPageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-projects-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-projects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-projects-request
                    'make-list-test-grid-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-projects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-result))
      (common-lisp:list
       (common-lisp:cons "maxResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-projects-result common-lisp:nil
                       ((test-grid-projects :initarg :test-grid-projects
                         :initform common-lisp:nil :type
                         (common-lisp:or test-grid-projects common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-projects-result-test-grid-projects
                         :shape "TestGridProjects" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-projects-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-projects-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-projects-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-projects-result
                    'make-list-test-grid-projects-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-projects-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-projects-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-grid-projects))
      (common-lisp:list
       (common-lisp:cons "testGridProjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-projects-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-session-actions-request common-lisp:nil
                       ((session-arn :initarg :session-arn :initform
                         (common-lisp:error ":sessionarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-actions-request-session-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-result :initarg :max-result :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-size common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-actions-request-max-result
                         :shape "MaxPageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-actions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-session-actions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-session-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-session-actions-request
                    'make-list-test-grid-session-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-result))
      (common-lisp:list
       (common-lisp:cons "maxResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-session-actions-result common-lisp:nil
                       ((actions :initarg :actions :initform common-lisp:nil
                         :type
                         (common-lisp:or test-grid-session-actions
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-actions-result-actions
                         :shape "TestGridSessionActions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-actions-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-session-actions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-session-actions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-session-actions-result
                    'make-list-test-grid-session-actions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-actions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-actions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-actions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-session-artifacts-request common-lisp:nil
                       ((session-arn :initarg :session-arn :initform
                         (common-lisp:error ":sessionarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-artifacts-request-session-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or test-grid-session-artifact-category
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-artifacts-request-type
                         :shape "TestGridSessionArtifactCategory" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-result :initarg :max-result :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-size common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-artifacts-request-max-result
                         :shape "MaxPageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-artifacts-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-session-artifacts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-session-artifacts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-session-artifacts-request
                    'make-list-test-grid-session-artifacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-artifacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-result))
      (common-lisp:list
       (common-lisp:cons "maxResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-artifacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-session-artifacts-result common-lisp:nil
                       ((artifacts :initarg :artifacts :initform
                         common-lisp:nil :type
                         (common-lisp:or test-grid-session-artifacts
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-artifacts-result-artifacts
                         :shape "TestGridSessionArtifacts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-session-artifacts-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-session-artifacts-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-session-artifacts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-session-artifacts-result
                    'make-list-test-grid-session-artifacts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-artifacts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-artifacts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-session-artifacts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-sessions-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-sessions-request-project-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-grid-session-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-sessions-request-status
                         :shape "TestGridSessionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time-after :initarg :creation-time-after
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-list-test-grid-sessions-request-creation-time-after
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time-before :initarg :creation-time-before
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-list-test-grid-sessions-request-creation-time-before
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time-after :initarg :end-time-after :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-list-test-grid-sessions-request-end-time-after
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time-before :initarg :end-time-before :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-list-test-grid-sessions-request-end-time-before
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-result :initarg :max-result :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-size common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-sessions-request-max-result
                         :shape "MaxPageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-sessions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-sessions-request
                    'make-list-test-grid-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "creationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "creationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time-after))
      (common-lisp:list
       (common-lisp:cons "endTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time-before))
      (common-lisp:list
       (common-lisp:cons "endTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-result))
      (common-lisp:list
       (common-lisp:cons "maxResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-grid-sessions-result common-lisp:nil
                       ((test-grid-sessions :initarg :test-grid-sessions
                         :initform common-lisp:nil :type
                         (common-lisp:or test-grid-sessions common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-sessions-result-test-grid-sessions
                         :shape "TestGridSessions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-test-grid-sessions-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-grid-sessions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-grid-sessions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-grid-sessions-result
                    'make-list-test-grid-sessions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-sessions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-sessions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-grid-sessions))
      (common-lisp:list
       (common-lisp:cons "testGridSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-grid-sessions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tests-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-tests-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-tests-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tests-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tests-request 'make-list-tests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tests-result common-lisp:nil
                       ((tests :initarg :tests :initform common-lisp:nil :type
                         (common-lisp:or tests common-lisp:null) :accessor
                         struct-shape-list-tests-result-tests :shape "Tests"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-tests-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tests-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tests-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tests-result 'make-list-tests-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tests-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tests-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tests))
      (common-lisp:list
       (common-lisp:cons "tests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tests-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-unique-problems-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-unique-problems-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-unique-problems-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-unique-problems-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-unique-problems-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-unique-problems-request
                    'make-list-unique-problems-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-unique-problems-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-unique-problems-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-unique-problems-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-unique-problems-result common-lisp:nil
                       ((unique-problems :initarg :unique-problems :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          unique-problems-by-execution-result-map
                          common-lisp:null)
                         :accessor
                         struct-shape-list-unique-problems-result-unique-problems
                         :shape "UniqueProblemsByExecutionResultMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-unique-problems-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-unique-problems-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-unique-problems-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-unique-problems-result
                    'make-list-unique-problems-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-unique-problems-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-unique-problems-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-problems))
      (common-lisp:list
       (common-lisp:cons "uniqueProblems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-unique-problems-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-uploads-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-list-uploads-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or upload-type common-lisp:null)
                         :accessor struct-shape-list-uploads-request-type
                         :shape "UploadType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-uploads-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-uploads-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-uploads-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-uploads-request 'make-list-uploads-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-uploads-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-uploads-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-uploads-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-uploads-result common-lisp:nil
                       ((uploads :initarg :uploads :initform common-lisp:nil
                         :type (common-lisp:or uploads common-lisp:null)
                         :accessor struct-shape-list-uploads-result-uploads
                         :shape "Uploads" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-uploads-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-uploads-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-uploads-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-uploads-result 'make-list-uploads-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-uploads-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-uploads-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uploads))
      (common-lisp:list
       (common-lisp:cons "uploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-uploads-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpceconfigurations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-vpceconfigurations-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-vpceconfigurations-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpceconfigurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpceconfigurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpceconfigurations-request
                    'make-list-vpceconfigurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpceconfigurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpceconfigurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpceconfigurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpceconfigurations-result common-lisp:nil
                       ((vpce-configurations :initarg :vpce-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or vpceconfigurations common-lisp:null)
                         :accessor
                         struct-shape-list-vpceconfigurations-result-vpce-configurations
                         :shape "VPCEConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-vpceconfigurations-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpceconfigurations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpceconfigurations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpceconfigurations-result
                    'make-list-vpceconfigurations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpceconfigurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpceconfigurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-configurations))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpceconfigurations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass location common-lisp:nil
                       ((latitude :initarg :latitude :initform
                         (common-lisp:error ":latitude is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-location-latitude :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (longitude :initarg :longitude :initform
                         (common-lisp:error ":longitude is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-location-longitude :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype max-slot-map () 'common-lisp:hash-table)
 (common-lisp:defun make-max-slot-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass monetary-amount common-lisp:nil
                       ((amount :initarg :amount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-monetary-amount-amount :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or currency-code common-lisp:null)
                         :accessor struct-shape-monetary-amount-currency-code
                         :shape "CurrencyCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monetary-amount
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monetary-amount
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'monetary-amount 'make-monetary-amount))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monetary-amount))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monetary-amount))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monetary-amount))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-profile common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-network-profile-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-network-profile-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-network-profile-description :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or network-profile-type common-lisp:null)
                         :accessor struct-shape-network-profile-type :shape
                         "NetworkProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-bandwidth-bits :initarg :uplink-bandwidth-bits
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-network-profile-uplink-bandwidth-bits
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-bandwidth-bits :initarg
                         :downlink-bandwidth-bits :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-network-profile-downlink-bandwidth-bits
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-delay-ms :initarg :uplink-delay-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-network-profile-uplink-delay-ms :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-delay-ms :initarg :downlink-delay-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-network-profile-downlink-delay-ms :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-jitter-ms :initarg :uplink-jitter-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-network-profile-uplink-jitter-ms :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-jitter-ms :initarg :downlink-jitter-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-network-profile-downlink-jitter-ms :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-loss-percent :initarg :uplink-loss-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percent-integer common-lisp:null)
                         :accessor
                         struct-shape-network-profile-uplink-loss-percent
                         :shape "PercentInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (downlink-loss-percent :initarg :downlink-loss-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percent-integer common-lisp:null)
                         :accessor
                         struct-shape-network-profile-downlink-loss-percent
                         :shape "PercentInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'network-profile 'make-network-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'uplink-bandwidth-bits))
      (common-lisp:list
       (common-lisp:cons "uplinkBandwidthBits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-bandwidth-bits))
      (common-lisp:list
       (common-lisp:cons "downlinkBandwidthBits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-delay-ms))
      (common-lisp:list
       (common-lisp:cons "uplinkDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-delay-ms))
      (common-lisp:list
       (common-lisp:cons "downlinkDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-jitter-ms))
      (common-lisp:list
       (common-lisp:cons "uplinkJitterMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-jitter-ms))
      (common-lisp:list
       (common-lisp:cons "downlinkJitterMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-loss-percent))
      (common-lisp:list
       (common-lisp:cons "uplinkLossPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-loss-percent))
      (common-lisp:list
       (common-lisp:cons "downlinkLossPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-profile))
   common-lisp:nil))
(common-lisp:deftype network-profile-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-profiles ()
   '(trivial-types:proper-list network-profile))
 (common-lisp:defun make-network-profiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-eligible-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-eligible-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-eligible-exception 'not-eligible-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass offering common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or offering-identifier common-lisp:null)
                         :accessor struct-shape-offering-id :shape
                         "OfferingIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-offering-description :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor struct-shape-offering-type :shape
                         "OfferingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or device-platform common-lisp:null)
                         :accessor struct-shape-offering-platform :shape
                         "DevicePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charges common-lisp:null)
                         :accessor struct-shape-offering-recurring-charges
                         :shape "RecurringCharges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offering 'make-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "recurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering))
   common-lisp:nil))
(common-lisp:deftype offering-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass offering-promotion common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or offering-promotion-identifier
                                         common-lisp:null)
                         :accessor struct-shape-offering-promotion-id :shape
                         "OfferingPromotionIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-offering-promotion-description :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offering-promotion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offering-promotion
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offering-promotion 'make-offering-promotion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering-promotion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering-promotion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering-promotion))
   common-lisp:nil))
(common-lisp:deftype offering-promotion-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype offering-promotions ()
   '(trivial-types:proper-list offering-promotion))
 (common-lisp:defun make-offering-promotions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering-promotion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass offering-status common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or offering-transaction-type
                                         common-lisp:null)
                         :accessor struct-shape-offering-status-type :shape
                         "OfferingTransactionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering :initarg :offering :initform common-lisp:nil
                         :type (common-lisp:or offering common-lisp:null)
                         :accessor struct-shape-offering-status-offering :shape
                         "Offering" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quantity :initarg :quantity :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-offering-status-quantity :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-on :initarg :effective-on :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-offering-status-effective-on :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offering-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offering-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offering-status 'make-offering-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering))
      (common-lisp:list
       (common-lisp:cons "offering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-on))
      (common-lisp:list
       (common-lisp:cons "effectiveOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offering-status-map () 'common-lisp:hash-table)
 (common-lisp:defun make-offering-status-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass offering-transaction common-lisp:nil
                       ((offering-status :initarg :offering-status :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-status common-lisp:null)
                         :accessor
                         struct-shape-offering-transaction-offering-status
                         :shape "OfferingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-offering-transaction-transaction-id
                         :shape "TransactionIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (offering-promotion-id :initarg :offering-promotion-id
                         :initform common-lisp:nil :type
                         (common-lisp:or offering-promotion-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-offering-transaction-offering-promotion-id
                         :shape "OfferingPromotionIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-offering-transaction-created-on :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cost :initarg :cost :initform common-lisp:nil :type
                         (common-lisp:or monetary-amount common-lisp:null)
                         :accessor struct-shape-offering-transaction-cost
                         :shape "MonetaryAmount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offering-transaction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offering-transaction
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'offering-transaction 'make-offering-transaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering-transaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering-transaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-status))
      (common-lisp:list
       (common-lisp:cons "offeringStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-promotion-id))
      (common-lisp:list
       (common-lisp:cons "offeringPromotionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "createdOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering-transaction))
   common-lisp:nil))
(common-lisp:deftype offering-transaction-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype offering-transactions ()
   '(trivial-types:proper-list offering-transaction))
 (common-lisp:defun make-offering-transactions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering-transaction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offering-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype offerings () '(trivial-types:proper-list offering))
 (common-lisp:defun make-offerings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype package-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-package-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype percent-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass problem common-lisp:nil
                       ((run :initarg :run :initform common-lisp:nil :type
                         (common-lisp:or problem-detail common-lisp:null)
                         :accessor struct-shape-problem-run :shape
                         "ProblemDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or problem-detail common-lisp:null)
                         :accessor struct-shape-problem-job :shape
                         "ProblemDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suite :initarg :suite :initform common-lisp:nil :type
                         (common-lisp:or problem-detail common-lisp:null)
                         :accessor struct-shape-problem-suite :shape
                         "ProblemDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test :initarg :test :initform common-lisp:nil :type
                         (common-lisp:or problem-detail common-lisp:null)
                         :accessor struct-shape-problem-test :shape
                         "ProblemDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-problem-device :shape "Device"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-result common-lisp:null)
                         :accessor struct-shape-problem-result :shape
                         "ExecutionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-problem-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-problem
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'problem
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'problem 'make-problem))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suite))
      (common-lisp:list
       (common-lisp:cons "suite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass problem-detail common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-problem-detail-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-problem-detail-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-problem-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'problem-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'problem-detail 'make-problem-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype problems () '(trivial-types:proper-list problem))
 (common-lisp:defun make-problems
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list problem))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-project-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-project-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-job-timeout-minutes :initarg
                         :default-job-timeout-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor
                         struct-shape-project-default-job-timeout-minutes
                         :shape "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-project-created :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-project-vpc-config :shape "VpcConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project 'make-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "defaultJobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype projects () '(trivial-types:proper-list project))
 (common-lisp:defun make-projects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-request common-lisp:nil
                       ((offering-id :initarg :offering-id :initform
                         (common-lisp:error ":offeringid is required") :type
                         (common-lisp:or offering-identifier common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-request-offering-id
                         :shape "OfferingIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantity :initarg :quantity :initform
                         (common-lisp:error ":quantity is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-quantity :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (offering-promotion-id :initarg :offering-promotion-id
                         :initform common-lisp:nil :type
                         (common-lisp:or offering-promotion-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-request-offering-promotion-id
                         :shape "OfferingPromotionIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-request
                    'make-purchase-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "offeringId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-promotion-id))
      (common-lisp:list
       (common-lisp:cons "offeringPromotionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-result common-lisp:nil
                       ((offering-transaction :initarg :offering-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or offering-transaction common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-result-offering-transaction
                         :shape "OfferingTransaction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-result 'make-purchase-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-transaction))
      (common-lisp:list
       (common-lisp:cons "offeringTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype purchased-devices-map () 'common-lisp:hash-table)
 (common-lisp:defun make-purchased-devices-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass radios common-lisp:nil
                       ((wifi :initarg :wifi :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-radios-wifi :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bluetooth :initarg :bluetooth :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-radios-bluetooth :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nfc :initarg :nfc :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-radios-nfc :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (gps :initarg :gps :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-radios-gps :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-radios
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'radios
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'radios 'make-radios))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input radios))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input radios))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wifi))
      (common-lisp:list
       (common-lisp:cons "wifi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bluetooth))
      (common-lisp:list
       (common-lisp:cons "bluetooth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfc))
      (common-lisp:list
       (common-lisp:cons "nfc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gps))
      (common-lisp:list
       (common-lisp:cons "gps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input radios))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((cost :initarg :cost :initform common-lisp:nil :type
                         (common-lisp:or monetary-amount common-lisp:null)
                         :accessor struct-shape-recurring-charge-cost :shape
                         "MonetaryAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (frequency :initarg :frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or recurring-charge-frequency
                                         common-lisp:null)
                         :accessor struct-shape-recurring-charge-frequency
                         :shape "RecurringChargeFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recurring-charge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:deftype recurring-charge-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recurring-charges ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun make-recurring-charges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remote-access-session common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-remote-access-session-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-remote-access-session-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-remote-access-session-created
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor struct-shape-remote-access-session-status
                         :shape "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-result common-lisp:null)
                         :accessor struct-shape-remote-access-session-result
                         :shape "ExecutionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-remote-access-session-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started :initarg :started :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-remote-access-session-started
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-remote-access-session-stopped
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-remote-access-session-device
                         :shape "Device" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-arn :initarg :instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-instance-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-debug-enabled :initarg :remote-debug-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-remote-access-session-remote-debug-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-record-enabled :initarg :remote-record-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-remote-access-session-remote-record-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-record-app-arn :initarg :remote-record-app-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-remote-record-app-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-address :initarg :host-address :initform
                         common-lisp:nil :type
                         (common-lisp:or host-address common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-host-address :shape
                         "HostAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-remote-access-session-client-id :shape
                         "ClientId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (billing-method :initarg :billing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-method common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-billing-method
                         :shape "BillingMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-minutes :initarg :device-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or device-minutes common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-device-minutes
                         :shape "DeviceMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-remote-access-session-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-udid :initarg :device-udid :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remote-access-session-device-udid :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interaction-mode :initarg :interaction-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or interaction-mode common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-interaction-mode
                         :shape "InteractionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-app-resign :initarg :skip-app-resign :initform
                         common-lisp:nil :type
                         (common-lisp:or skip-app-resign common-lisp:null)
                         :accessor
                         struct-shape-remote-access-session-skip-app-resign
                         :shape "SkipAppResign" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-remote-access-session-vpc-config :shape
                         "VpcConfig" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remote-access-session
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remote-access-session
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remote-access-session 'make-remote-access-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remote-access-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remote-access-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started))
      (common-lisp:list
       (common-lisp:cons "started"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "instanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-debug-enabled))
      (common-lisp:list
       (common-lisp:cons "remoteDebugEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-record-enabled))
      (common-lisp:list
       (common-lisp:cons "remoteRecordEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-record-app-arn))
      (common-lisp:list
       (common-lisp:cons "remoteRecordAppArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-address))
      (common-lisp:list
       (common-lisp:cons "hostAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-method))
      (common-lisp:list
       (common-lisp:cons "billingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-minutes))
      (common-lisp:list
       (common-lisp:cons "deviceMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-udid))
      (common-lisp:list
       (common-lisp:cons "deviceUdid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interaction-mode))
      (common-lisp:list
       (common-lisp:cons "interactionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-app-resign))
      (common-lisp:list
       (common-lisp:cons "skipAppResign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remote-access-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remote-access-sessions ()
   '(trivial-types:proper-list remote-access-session))
 (common-lisp:defun make-remote-access-sessions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list remote-access-session))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass renew-offering-request common-lisp:nil
                       ((offering-id :initarg :offering-id :initform
                         (common-lisp:error ":offeringid is required") :type
                         (common-lisp:or offering-identifier common-lisp:null)
                         :accessor
                         struct-shape-renew-offering-request-offering-id :shape
                         "OfferingIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quantity :initarg :quantity :initform
                         (common-lisp:error ":quantity is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-renew-offering-request-quantity :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-renew-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'renew-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'renew-offering-request 'make-renew-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          renew-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          renew-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "offeringId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          renew-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renew-offering-result common-lisp:nil
                       ((offering-transaction :initarg :offering-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or offering-transaction common-lisp:null)
                         :accessor
                         struct-shape-renew-offering-result-offering-transaction
                         :shape "OfferingTransaction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-renew-offering-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'renew-offering-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'renew-offering-result 'make-renew-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          renew-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          renew-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-transaction))
      (common-lisp:list
       (common-lisp:cons "offeringTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          renew-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolution common-lisp:nil
                       ((width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-resolution-width :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (height :initarg :height :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-resolution-height :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolution
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resolution 'make-resolution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolution))
   common-lisp:nil))
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         common-lisp:nil :type
                         (common-lisp:or device-attribute common-lisp:null)
                         :accessor struct-shape-rule-attribute :shape
                         "DeviceAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform common-lisp:nil
                         :type (common-lisp:or rule-operator common-lisp:null)
                         :accessor struct-shape-rule-operator :shape
                         "RuleOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rule-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:deftype rule-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass run common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-run-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-run-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or test-type common-lisp:null) :accessor
                         struct-shape-run-type :shape "TestType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type
                         (common-lisp:or device-platform common-lisp:null)
                         :accessor struct-shape-run-platform :shape
                         "DevicePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-run-created :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor struct-shape-run-status :shape
                         "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-result common-lisp:null)
                         :accessor struct-shape-run-result :shape
                         "ExecutionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started :initarg :started :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-run-started :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-run-stopped :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (counters :initarg :counters :initform common-lisp:nil
                         :type (common-lisp:or counters common-lisp:null)
                         :accessor struct-shape-run-counters :shape "Counters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-run-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-jobs :initarg :total-jobs :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-total-jobs :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (completed-jobs :initarg :completed-jobs :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-completed-jobs :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (billing-method :initarg :billing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-method common-lisp:null)
                         :accessor struct-shape-run-billing-method :shape
                         "BillingMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-minutes :initarg :device-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or device-minutes common-lisp:null)
                         :accessor struct-shape-run-device-minutes :shape
                         "DeviceMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-profile :initarg :network-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile common-lisp:null)
                         :accessor struct-shape-run-network-profile :shape
                         "NetworkProfile" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parsing-result-url :initarg :parsing-result-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-parsing-result-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-code :initarg :result-code :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-result-code
                                         common-lisp:null)
                         :accessor struct-shape-run-result-code :shape
                         "ExecutionResultCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seed :initarg :seed :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-seed :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (app-upload :initarg :app-upload :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-run-app-upload :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-count :initarg :event-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-run-event-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-timeout-minutes :initarg :job-timeout-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor struct-shape-run-job-timeout-minutes :shape
                         "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-pool-arn :initarg :device-pool-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-run-device-pool-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-run-locale :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (radios :initarg :radios :initform common-lisp:nil
                         :type (common-lisp:or radios common-lisp:null)
                         :accessor struct-shape-run-radios :shape "Radios"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-run-location :shape "Location"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-artifact-paths :initarg
                         :customer-artifact-paths :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-artifact-paths
                                         common-lisp:null)
                         :accessor struct-shape-run-customer-artifact-paths
                         :shape "CustomerArtifactPaths" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (web-url :initarg :web-url :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-run-web-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skip-app-resign :initarg :skip-app-resign :initform
                         common-lisp:nil :type
                         (common-lisp:or skip-app-resign common-lisp:null)
                         :accessor struct-shape-run-skip-app-resign :shape
                         "SkipAppResign" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-spec-arn :initarg :test-spec-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-run-test-spec-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-selection-result :initarg
                         :device-selection-result :initform common-lisp:nil
                         :type
                         (common-lisp:or device-selection-result
                                         common-lisp:null)
                         :accessor struct-shape-run-device-selection-result
                         :shape "DeviceSelectionResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-run-vpc-config :shape "VpcConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'run 'make-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started))
      (common-lisp:list
       (common-lisp:cons "started"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counters))
      (common-lisp:list
       (common-lisp:cons "counters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-jobs))
      (common-lisp:list
       (common-lisp:cons "totalJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-jobs))
      (common-lisp:list
       (common-lisp:cons "completedJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-method))
      (common-lisp:list
       (common-lisp:cons "billingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-minutes))
      (common-lisp:list
       (common-lisp:cons "deviceMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile))
      (common-lisp:list
       (common-lisp:cons "networkProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parsing-result-url))
      (common-lisp:list
       (common-lisp:cons "parsingResultUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-code))
      (common-lisp:list
       (common-lisp:cons "resultCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seed))
      (common-lisp:list
       (common-lisp:cons "seed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-upload))
      (common-lisp:list
       (common-lisp:cons "appUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-count))
      (common-lisp:list
       (common-lisp:cons "eventCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "jobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pool-arn))
      (common-lisp:list
       (common-lisp:cons "devicePoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radios))
      (common-lisp:list
       (common-lisp:cons "radios"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-artifact-paths))
      (common-lisp:list
       (common-lisp:cons "customerArtifactPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-url))
      (common-lisp:list
       (common-lisp:cons "webUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-app-resign))
      (common-lisp:list
       (common-lisp:cons "skipAppResign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-spec-arn))
      (common-lisp:list
       (common-lisp:cons "testSpecArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-selection-result))
      (common-lisp:list
       (common-lisp:cons "deviceSelectionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype runs () '(trivial-types:proper-list run))
 (common-lisp:defun make-runs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sample common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-sample-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or sample-type common-lisp:null)
                         :accessor struct-shape-sample-type :shape "SampleType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-sample-url :shape "URL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sample
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sample
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sample 'make-sample))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sample))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sample))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sample))
   common-lisp:nil))
(common-lisp:deftype sample-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype samples () '(trivial-types:proper-list sample))
 (common-lisp:defun make-samples
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sample))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schedule-run-configuration common-lisp:nil
                       ((extra-data-package-arn :initarg
                         :extra-data-package-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-extra-data-package-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-profile-arn :initarg :network-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-network-profile-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-locale :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-arns :initarg
                         :vpce-configuration-arns :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-resource-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-vpce-configuration-arns
                         :shape "AmazonResourceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-artifact-paths :initarg
                         :customer-artifact-paths :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-artifact-paths
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-customer-artifact-paths
                         :shape "CustomerArtifactPaths" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (radios :initarg :radios :initform common-lisp:nil
                         :type (common-lisp:or radios common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-radios :shape
                         "Radios" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auxiliary-apps :initarg :auxiliary-apps :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-auxiliary-apps
                         :shape "AmazonResourceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-method :initarg :billing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-method common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-configuration-billing-method
                         :shape "BillingMethod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-run-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-run-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-run-configuration
                    'make-schedule-run-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-run-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-run-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-data-package-arn))
      (common-lisp:list
       (common-lisp:cons "extraDataPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "networkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-artifact-paths))
      (common-lisp:list
       (common-lisp:cons "customerArtifactPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radios))
      (common-lisp:list
       (common-lisp:cons "radios"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auxiliary-apps))
      (common-lisp:list
       (common-lisp:cons "auxiliaryApps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-method))
      (common-lisp:list
       (common-lisp:cons "billingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-run-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-run-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-request-project-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-arn :initarg :app-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-schedule-run-request-app-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-pool-arn :initarg :device-pool-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-request-device-pool-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-selection-configuration :initarg
                         :device-selection-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or device-selection-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-request-device-selection-configuration
                         :shape "DeviceSelectionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-schedule-run-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test :initarg :test :initform
                         (common-lisp:error ":test is required") :type
                         (common-lisp:or schedule-run-test common-lisp:null)
                         :accessor struct-shape-schedule-run-request-test
                         :shape "ScheduleRunTest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-run-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-request-configuration :shape
                         "ScheduleRunConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-configuration :initarg
                         :execution-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-request-execution-configuration
                         :shape "ExecutionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-run-request 'make-schedule-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pool-arn))
      (common-lisp:list
       (common-lisp:cons "devicePoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-selection-configuration))
      (common-lisp:list
       (common-lisp:cons "deviceSelectionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test))
      (common-lisp:list
       (common-lisp:cons "test"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-configuration))
      (common-lisp:list
       (common-lisp:cons "executionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-run-result common-lisp:nil
                       ((run :initarg :run :initform common-lisp:nil :type
                         (common-lisp:or run common-lisp:null) :accessor
                         struct-shape-schedule-run-result-run :shape "Run"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-run-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-run-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-run-result 'make-schedule-run-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-run-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-run-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-run-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-run-test common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or test-type common-lisp:null) :accessor
                         struct-shape-schedule-run-test-type :shape "TestType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-package-arn :initarg :test-package-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-schedule-run-test-test-package-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-spec-arn :initarg :test-spec-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-schedule-run-test-test-spec-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or filter common-lisp:null)
                         :accessor struct-shape-schedule-run-test-filter :shape
                         "Filter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or test-parameters common-lisp:null)
                         :accessor struct-shape-schedule-run-test-parameters
                         :shape "TestParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-run-test
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-run-test
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-run-test 'make-schedule-run-test))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-run-test))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-run-test))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-package-arn))
      (common-lisp:list
       (common-lisp:cons "testPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-spec-arn))
      (common-lisp:list
       (common-lisp:cons "testSpecArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-run-test))
   common-lisp:nil))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:deftype sensitive-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-account-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-account-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-account-exception
                    'service-account-exception-message)))
(common-lisp:deftype service-dns-name () 'common-lisp:string)
(common-lisp:deftype skip-app-resign () 'common-lisp:boolean)
(common-lisp:deftype ssh-public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-job-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-stop-job-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-job-request 'make-stop-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-job-result common-lisp:nil
                       ((job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-stop-job-result-job :shape "Job"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-job-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stop-job-result 'make-stop-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-remote-access-session-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-stop-remote-access-session-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-remote-access-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-remote-access-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-remote-access-session-request
                    'make-stop-remote-access-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-remote-access-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-remote-access-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-remote-access-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-remote-access-session-result common-lisp:nil
                       ((remote-access-session :initarg :remote-access-session
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-session
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-remote-access-session-result-remote-access-session
                         :shape "RemoteAccessSession" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-remote-access-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-remote-access-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-remote-access-session-result
                    'make-stop-remote-access-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-remote-access-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-remote-access-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-session))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-remote-access-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-run-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-stop-run-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-run-request 'make-stop-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-run-result common-lisp:nil
                       ((run :initarg :run :initform common-lisp:nil :type
                         (common-lisp:or run common-lisp:null) :accessor
                         struct-shape-stop-run-result-run :shape "Run"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-run-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-run-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stop-run-result 'make-stop-run-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-run-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-run-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-run-result))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass suite common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-suite-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-suite-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or test-type common-lisp:null) :accessor
                         struct-shape-suite-type :shape "TestType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-suite-created :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor struct-shape-suite-status :shape
                         "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-result common-lisp:null)
                         :accessor struct-shape-suite-result :shape
                         "ExecutionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started :initarg :started :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-suite-started :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-suite-stopped :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (counters :initarg :counters :initform common-lisp:nil
                         :type (common-lisp:or counters common-lisp:null)
                         :accessor struct-shape-suite-counters :shape
                         "Counters" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-suite-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-minutes :initarg :device-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or device-minutes common-lisp:null)
                         :accessor struct-shape-suite-device-minutes :shape
                         "DeviceMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-suite
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'suite
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'suite 'make-suite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started))
      (common-lisp:list
       (common-lisp:cons "started"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counters))
      (common-lisp:list
       (common-lisp:cons "counters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-minutes))
      (common-lisp:list
       (common-lisp:cons "deviceMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suites () '(trivial-types:proper-list suite))
 (common-lisp:defun make-suites
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suite))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-operation-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-operation-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       tag-operation-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'tag-operation-exception 'tag-operation-exception-message
                    'tag-operation-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition tag-policy-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-policy-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       tag-policy-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'tag-policy-exception 'tag-policy-exception-message
                    'tag-policy-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-test-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or test-type common-lisp:null) :accessor
                         struct-shape-test-type :shape "TestType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-test-created :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor struct-shape-test-status :shape
                         "ExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-result common-lisp:null)
                         :accessor struct-shape-test-result :shape
                         "ExecutionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started :initarg :started :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-test-started :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-test-stopped :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (counters :initarg :counters :initform common-lisp:nil
                         :type (common-lisp:or counters common-lisp:null)
                         :accessor struct-shape-test-counters :shape "Counters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-test-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-minutes :initarg :device-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or device-minutes common-lisp:null)
                         :accessor struct-shape-test-device-minutes :shape
                         "DeviceMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'test 'make-test))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started))
      (common-lisp:list
       (common-lisp:cons "started"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counters))
      (common-lisp:list
       (common-lisp:cons "counters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-minutes))
      (common-lisp:list
       (common-lisp:cons "deviceMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-grid-project common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor struct-shape-test-grid-project-arn :shape
                         "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-grid-project-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-grid-project-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or test-grid-vpc-config common-lisp:null)
                         :accessor struct-shape-test-grid-project-vpc-config
                         :shape "TestGridVpcConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-test-grid-project-created
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-grid-project
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-grid-project
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-grid-project 'make-test-grid-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-grid-project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-grid-project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-grid-project))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-grid-projects ()
   '(trivial-types:proper-list test-grid-project))
 (common-lisp:defun make-test-grid-projects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-grid-project))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-grid-session common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor struct-shape-test-grid-session-arn :shape
                         "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-grid-session-status
                                         common-lisp:null)
                         :accessor struct-shape-test-grid-session-status :shape
                         "TestGridSessionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-test-grid-session-created
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ended :initarg :ended :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-test-grid-session-ended :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (billing-minutes :initarg :billing-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-test-grid-session-billing-minutes :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (selenium-properties :initarg :selenium-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-grid-session-selenium-properties
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-grid-session
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-grid-session
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-grid-session 'make-test-grid-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-grid-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-grid-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended))
      (common-lisp:list
       (common-lisp:cons "ended"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-minutes))
      (common-lisp:list
       (common-lisp:cons "billingMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selenium-properties))
      (common-lisp:list
       (common-lisp:cons "seleniumProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-grid-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-grid-session-action common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-test-grid-session-action-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started :initarg :started :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         struct-shape-test-grid-session-action-started :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-test-grid-session-action-duration :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-grid-session-action-status-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-method :initarg :request-method :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-grid-session-action-request-method
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-grid-session-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-grid-session-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-grid-session-action 'make-test-grid-session-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-grid-session-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-grid-session-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started))
      (common-lisp:list
       (common-lisp:cons "started"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-method))
      (common-lisp:list
       (common-lisp:cons "requestMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-grid-session-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-grid-session-actions ()
   '(trivial-types:proper-list test-grid-session-action))
 (common-lisp:defun make-test-grid-session-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            test-grid-session-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-grid-session-artifact common-lisp:nil
                       ((filename :initarg :filename :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-test-grid-session-artifact-filename
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or test-grid-session-artifact-type
                                         common-lisp:null)
                         :accessor struct-shape-test-grid-session-artifact-type
                         :shape "TestGridSessionArtifactType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-test-grid-session-artifact-url
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-grid-session-artifact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-grid-session-artifact
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-grid-session-artifact
                    'make-test-grid-session-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-grid-session-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-grid-session-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filename))
      (common-lisp:list
       (common-lisp:cons "filename"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-grid-session-artifact))
   common-lisp:nil))
(common-lisp:deftype test-grid-session-artifact-category () 'common-lisp:string)
(common-lisp:deftype test-grid-session-artifact-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype test-grid-session-artifacts ()
   '(trivial-types:proper-list test-grid-session-artifact))
 (common-lisp:defun make-test-grid-session-artifacts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            test-grid-session-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype test-grid-session-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype test-grid-sessions ()
   '(trivial-types:proper-list test-grid-session))
 (common-lisp:defun make-test-grid-sessions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-grid-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype test-grid-url-expires-in-seconds-input ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass test-grid-vpc-config common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required")
                         :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-test-grid-vpc-config-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-test-grid-vpc-config-subnet-ids :shape
                         "SubnetIds" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-test-grid-vpc-config-vpc-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-grid-vpc-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-grid-vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-grid-vpc-config 'make-test-grid-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-grid-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-grid-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-grid-vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-test-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype test-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tests () '(trivial-types:proper-list test))
 (common-lisp:defun make-tests
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (devicefarm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype transaction-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trial-minutes common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-trial-minutes-total :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remaining :initarg :remaining :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-trial-minutes-remaining :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trial-minutes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trial-minutes
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trial-minutes 'make-trial-minutes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trial-minutes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trial-minutes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remaining))
      (common-lisp:list
       (common-lisp:cons "remaining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trial-minutes))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unique-problem common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-unique-problem-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (problems :initarg :problems :initform common-lisp:nil
                         :type (common-lisp:or problems common-lisp:null)
                         :accessor struct-shape-unique-problem-problems :shape
                         "Problems" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unique-problem
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unique-problem
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'unique-problem 'make-unique-problem))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unique-problem))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unique-problem))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problems))
      (common-lisp:list
       (common-lisp:cons "problems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unique-problem))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unique-problems ()
   '(trivial-types:proper-list unique-problem))
 (common-lisp:defun make-unique-problems
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unique-problem))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unique-problems-by-execution-result-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-unique-problems-by-execution-result-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-instance-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-device-instance-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-device-instance-request-profile-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-labels common-lisp:null)
                         :accessor
                         struct-shape-update-device-instance-request-labels
                         :shape "InstanceLabels" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-device-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-instance-request
                    'make-update-device-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "profileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-instance-result common-lisp:nil
                       ((device-instance :initarg :device-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or device-instance common-lisp:null)
                         :accessor
                         struct-shape-update-device-instance-result-device-instance
                         :shape "DeviceInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-device-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-instance-result
                    'make-update-device-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-instance))
      (common-lisp:list
       (common-lisp:cons "deviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-pool-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-update-device-pool-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-device-pool-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-update-device-pool-request-description
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-update-device-pool-request-rules :shape
                         "Rules" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-devices :initarg :max-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-update-device-pool-request-max-devices
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clear-max-devices :initarg :clear-max-devices
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-device-pool-request-clear-max-devices
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-pool-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-pool-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-pool-request
                    'make-update-device-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-devices))
      (common-lisp:list
       (common-lisp:cons "maxDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clear-max-devices))
      (common-lisp:list
       (common-lisp:cons "clearMaxDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-pool-result common-lisp:nil
                       ((device-pool :initarg :device-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or device-pool common-lisp:null)
                         :accessor
                         struct-shape-update-device-pool-result-device-pool
                         :shape "DevicePool" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-pool-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-pool-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-pool-result
                    'make-update-device-pool-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-pool-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-pool-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pool))
      (common-lisp:list
       (common-lisp:cons "devicePool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-pool-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-instance-profile-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-instance-profile-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-instance-profile-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-update-instance-profile-request-description
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-cleanup :initarg :package-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-instance-profile-request-package-cleanup
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclude-app-packages-from-cleanup :initarg
                         :exclude-app-packages-from-cleanup :initform
                         common-lisp:nil :type
                         (common-lisp:or package-ids common-lisp:null)
                         :accessor
                         struct-shape-update-instance-profile-request-exclude-app-packages-from-cleanup
                         :shape "PackageIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reboot-after-use :initarg :reboot-after-use :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-instance-profile-request-reboot-after-use
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instance-profile-request
                    'make-update-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-cleanup))
      (common-lisp:list
       (common-lisp:cons "packageCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-app-packages-from-cleanup))
      (common-lisp:list
       (common-lisp:cons "excludeAppPackagesFromCleanup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot-after-use))
      (common-lisp:list
       (common-lisp:cons "rebootAfterUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-instance-profile-result common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-update-instance-profile-result-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instance-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-instance-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instance-profile-result
                    'make-update-instance-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "instanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-profile-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-description
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or network-profile-type common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-type
                         :shape "NetworkProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-bandwidth-bits :initarg :uplink-bandwidth-bits
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-uplink-bandwidth-bits
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-bandwidth-bits :initarg
                         :downlink-bandwidth-bits :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-downlink-bandwidth-bits
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-delay-ms :initarg :uplink-delay-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-uplink-delay-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-delay-ms :initarg :downlink-delay-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-downlink-delay-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-jitter-ms :initarg :uplink-jitter-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-uplink-jitter-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (downlink-jitter-ms :initarg :downlink-jitter-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-downlink-jitter-ms
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uplink-loss-percent :initarg :uplink-loss-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percent-integer common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-uplink-loss-percent
                         :shape "PercentInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (downlink-loss-percent :initarg :downlink-loss-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percent-integer common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-downlink-loss-percent
                         :shape "PercentInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-profile-request
                    'make-update-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'uplink-bandwidth-bits))
      (common-lisp:list
       (common-lisp:cons "uplinkBandwidthBits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-bandwidth-bits))
      (common-lisp:list
       (common-lisp:cons "downlinkBandwidthBits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-delay-ms))
      (common-lisp:list
       (common-lisp:cons "uplinkDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-delay-ms))
      (common-lisp:list
       (common-lisp:cons "downlinkDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-jitter-ms))
      (common-lisp:list
       (common-lisp:cons "uplinkJitterMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-jitter-ms))
      (common-lisp:list
       (common-lisp:cons "downlinkJitterMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-loss-percent))
      (common-lisp:list
       (common-lisp:cons "uplinkLossPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-loss-percent))
      (common-lisp:list
       (common-lisp:cons "downlinkLossPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-profile-result common-lisp:nil
                       ((network-profile :initarg :network-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-result-network-profile
                         :shape "NetworkProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-profile-result
                    'make-update-network-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile))
      (common-lisp:list
       (common-lisp:cons "networkProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-update-project-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-project-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-job-timeout-minutes :initarg
                         :default-job-timeout-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or job-timeout-minutes common-lisp:null)
                         :accessor
                         struct-shape-update-project-request-default-job-timeout-minutes
                         :shape "JobTimeoutMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-update-project-request-vpc-config :shape
                         "VpcConfig" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-request 'make-update-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-job-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "defaultJobTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-result common-lisp:nil
                       ((project :initarg :project :initform common-lisp:nil
                         :type (common-lisp:or project common-lisp:null)
                         :accessor struct-shape-update-project-result-project
                         :shape "Project" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-result 'make-update-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-test-grid-project-request common-lisp:nil
                       ((project-arn :initarg :project-arn :initform
                         (common-lisp:error ":projectarn is required") :type
                         (common-lisp:or device-farm-arn common-lisp:null)
                         :accessor
                         struct-shape-update-test-grid-project-request-project-arn
                         :shape "DeviceFarmArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-test-grid-project-request-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-update-test-grid-project-request-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or test-grid-vpc-config common-lisp:null)
                         :accessor
                         struct-shape-update-test-grid-project-request-vpc-config
                         :shape "TestGridVpcConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-test-grid-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-test-grid-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-test-grid-project-request
                    'make-update-test-grid-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-test-grid-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-test-grid-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-test-grid-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-test-grid-project-result common-lisp:nil
                       ((test-grid-project :initarg :test-grid-project
                         :initform common-lisp:nil :type
                         (common-lisp:or test-grid-project common-lisp:null)
                         :accessor
                         struct-shape-update-test-grid-project-result-test-grid-project
                         :shape "TestGridProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-test-grid-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-test-grid-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-test-grid-project-result
                    'make-update-test-grid-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-test-grid-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-test-grid-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-grid-project))
      (common-lisp:list
       (common-lisp:cons "testGridProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-test-grid-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-upload-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-update-upload-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-upload-request-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-update-upload-request-content-type :shape
                         "ContentType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (edit-content :initarg :edit-content :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-upload-request-edit-content :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-upload-request 'make-update-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edit-content))
      (common-lisp:list
       (common-lisp:cons "editContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-upload-result common-lisp:nil
                       ((upload :initarg :upload :initform common-lisp:nil
                         :type (common-lisp:or upload common-lisp:null)
                         :accessor struct-shape-update-upload-result-upload
                         :shape "Upload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-upload-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-upload-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-upload-result 'make-update-upload-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-upload-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-upload-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload))
      (common-lisp:list
       (common-lisp:cons "upload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-upload-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpceconfiguration-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-vpceconfiguration-request-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-name :initarg
                         :vpce-configuration-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vpceconfiguration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-vpceconfiguration-request-vpce-configuration-name
                         :shape "VPCEConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpce-service-name :initarg :vpce-service-name
                         :initform common-lisp:nil :type
                         (common-lisp:or vpceservice-name common-lisp:null)
                         :accessor
                         struct-shape-update-vpceconfiguration-request-vpce-service-name
                         :shape "VPCEServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-dns-name :initarg :service-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or service-dns-name common-lisp:null)
                         :accessor
                         struct-shape-update-vpceconfiguration-request-service-dns-name
                         :shape "ServiceDnsName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-description :initarg
                         :vpce-configuration-description :initform
                         common-lisp:nil :type
                         (common-lisp:or vpceconfiguration-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-vpceconfiguration-request-vpce-configuration-description
                         :shape "VPCEConfigurationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vpceconfiguration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vpceconfiguration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vpceconfiguration-request
                    'make-update-vpceconfiguration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpceconfiguration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpceconfiguration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-name))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-service-name))
      (common-lisp:list
       (common-lisp:cons "vpceServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-dns-name))
      (common-lisp:list
       (common-lisp:cons "serviceDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-description))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpceconfiguration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpceconfiguration-result common-lisp:nil
                       ((vpce-configuration :initarg :vpce-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpceconfiguration common-lisp:null)
                         :accessor
                         struct-shape-update-vpceconfiguration-result-vpce-configuration
                         :shape "VPCEConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vpceconfiguration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vpceconfiguration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vpceconfiguration-result
                    'make-update-vpceconfiguration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpceconfiguration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpceconfiguration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-configuration))
      (common-lisp:list
       (common-lisp:cons "vpceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpceconfiguration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-upload-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-upload-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor struct-shape-upload-created :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or upload-type common-lisp:null)
                         :accessor struct-shape-upload-type :shape "UploadType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or upload-status common-lisp:null)
                         :accessor struct-shape-upload-status :shape
                         "UploadStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or sensitive-url common-lisp:null)
                         :accessor struct-shape-upload-url :shape
                         "SensitiveURL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor struct-shape-upload-metadata :shape
                         "Metadata" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-upload-content-type :shape
                         "ContentType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-upload-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or upload-category common-lisp:null)
                         :accessor struct-shape-upload-category :shape
                         "UploadCategory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'upload 'make-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload))
   common-lisp:nil))
(common-lisp:deftype upload-category () 'common-lisp:string)
(common-lisp:deftype upload-status () 'common-lisp:string)
(common-lisp:deftype upload-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype uploads () '(trivial-types:proper-list upload))
 (common-lisp:defun make-uploads
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upload))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpceconfiguration common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-vpceconfiguration-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-name :initarg
                         :vpce-configuration-name :initform common-lisp:nil
                         :type
                         (common-lisp:or vpceconfiguration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpceconfiguration-vpce-configuration-name
                         :shape "VPCEConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpce-service-name :initarg :vpce-service-name
                         :initform common-lisp:nil :type
                         (common-lisp:or vpceservice-name common-lisp:null)
                         :accessor
                         struct-shape-vpceconfiguration-vpce-service-name
                         :shape "VPCEServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-dns-name :initarg :service-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or service-dns-name common-lisp:null)
                         :accessor
                         struct-shape-vpceconfiguration-service-dns-name :shape
                         "ServiceDnsName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpce-configuration-description :initarg
                         :vpce-configuration-description :initform
                         common-lisp:nil :type
                         (common-lisp:or vpceconfiguration-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpceconfiguration-vpce-configuration-description
                         :shape "VPCEConfigurationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpceconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpceconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpceconfiguration 'make-vpceconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpceconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpceconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-name))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-service-name))
      (common-lisp:list
       (common-lisp:cons "vpceServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-dns-name))
      (common-lisp:list
       (common-lisp:cons "serviceDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpce-configuration-description))
      (common-lisp:list
       (common-lisp:cons "vpceConfigurationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpceconfiguration))
   common-lisp:nil))
(common-lisp:deftype vpceconfiguration-description () 'common-lisp:string)
(common-lisp:deftype vpceconfiguration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpceconfigurations ()
   '(trivial-types:proper-list vpceconfiguration))
 (common-lisp:defun make-vpceconfigurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpceconfiguration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpceservice-name () 'common-lisp:string)
(common-lisp:deftype video-capture () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass vpc-config common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required")
                         :type
                         (common-lisp:or vpc-security-group-ids
                                         common-lisp:null)
                         :accessor struct-shape-vpc-config-security-group-ids
                         :shape "VpcSecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or vpc-subnet-ids common-lisp:null)
                         :accessor struct-shape-vpc-config-subnet-ids :shape
                         "VpcSubnetIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-vpc-config-vpc-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-vpc-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-vpc-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-device-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn name description rules
                     max-devices)
   (common-lisp:declare
    (common-lisp:ignorable project-arn name description rules max-devices))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-device-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDevicePool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-device-pool))
(common-lisp:progn
 (common-lisp:defun create-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description package-cleanup
                     exclude-app-packages-from-cleanup reboot-after-use)
   (common-lisp:declare
    (common-lisp:ignorable name description package-cleanup
     exclude-app-packages-from-cleanup reboot-after-use))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-instance-profile))
(common-lisp:progn
 (common-lisp:defun create-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn name description type
                     uplink-bandwidth-bits downlink-bandwidth-bits
                     uplink-delay-ms downlink-delay-ms uplink-jitter-ms
                     downlink-jitter-ms uplink-loss-percent
                     downlink-loss-percent)
   (common-lisp:declare
    (common-lisp:ignorable project-arn name description type
     uplink-bandwidth-bits downlink-bandwidth-bits uplink-delay-ms
     downlink-delay-ms uplink-jitter-ms downlink-jitter-ms uplink-loss-percent
     downlink-loss-percent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-network-profile))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name default-job-timeout-minutes
                     vpc-config)
   (common-lisp:declare
    (common-lisp:ignorable name default-job-timeout-minutes vpc-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-remote-access-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn device-arn instance-arn
                     ssh-public-key remote-debug-enabled remote-record-enabled
                     remote-record-app-arn name client-id configuration
                     interaction-mode skip-app-resign)
   (common-lisp:declare
    (common-lisp:ignorable project-arn device-arn instance-arn ssh-public-key
     remote-debug-enabled remote-record-enabled remote-record-app-arn name
     client-id configuration interaction-mode skip-app-resign))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-remote-access-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRemoteAccessSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-remote-access-session))
(common-lisp:progn
 (common-lisp:defun create-test-grid-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description vpc-config)
   (common-lisp:declare (common-lisp:ignorable name description vpc-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-test-grid-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTestGridProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-test-grid-project))
(common-lisp:progn
 (common-lisp:defun create-test-grid-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn expires-in-seconds)
   (common-lisp:declare (common-lisp:ignorable project-arn expires-in-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-test-grid-url-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTestGridUrl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-test-grid-url))
(common-lisp:progn
 (common-lisp:defun create-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn name type content-type)
   (common-lisp:declare
    (common-lisp:ignorable project-arn name type content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-upload))
(common-lisp:progn
 (common-lisp:defun create-vpceconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpce-configuration-name vpce-service-name
                     service-dns-name vpce-configuration-description)
   (common-lisp:declare
    (common-lisp:ignorable vpce-configuration-name vpce-service-name
     service-dns-name vpce-configuration-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpceconfiguration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVPCEConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vpceconfiguration))
(common-lisp:progn
 (common-lisp:defun delete-device-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDevicePool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-device-pool))
(common-lisp:progn
 (common-lisp:defun delete-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-instance-profile))
(common-lisp:progn
 (common-lisp:defun delete-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-network-profile))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-remote-access-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-remote-access-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRemoteAccessSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-remote-access-session))
(common-lisp:progn
 (common-lisp:defun delete-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-run))
(common-lisp:progn
 (common-lisp:defun delete-test-grid-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn)
   (common-lisp:declare (common-lisp:ignorable project-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-test-grid-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTestGridProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-test-grid-project))
(common-lisp:progn
 (common-lisp:defun delete-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-upload))
(common-lisp:progn
 (common-lisp:defun delete-vpceconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpceconfiguration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVPCEConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vpceconfiguration))
(common-lisp:progn
 (common-lisp:defun get-account-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'devicefarm-request :method "POST" :path "/"
                                :operation "GetAccountSettings"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-settings))
(common-lisp:progn
 (common-lisp:defun get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device))
(common-lisp:progn
 (common-lisp:defun get-device-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeviceInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device-instance))
(common-lisp:progn
 (common-lisp:defun get-device-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevicePool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device-pool))
(common-lisp:progn
 (common-lisp:defun get-device-pool-compatibility
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-pool-arn app-arn test-type test
                     configuration)
   (common-lisp:declare
    (common-lisp:ignorable device-pool-arn app-arn test-type test
     configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-device-pool-compatibility-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevicePoolCompatibility"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device-pool-compatibility))
(common-lisp:progn
 (common-lisp:defun get-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-profile))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-profile))
(common-lisp:progn
 (common-lisp:defun get-offering-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-offering-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOfferingStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-offering-status))
(common-lisp:progn
 (common-lisp:defun get-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-project))
(common-lisp:progn
 (common-lisp:defun get-remote-access-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-remote-access-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRemoteAccessSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-remote-access-session))
(common-lisp:progn
 (common-lisp:defun get-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-run))
(common-lisp:progn
 (common-lisp:defun get-suite
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-suite-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetSuite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-suite))
(common-lisp:progn
 (common-lisp:defun get-test
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-test-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-test))
(common-lisp:progn
 (common-lisp:defun get-test-grid-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn)
   (common-lisp:declare (common-lisp:ignorable project-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-test-grid-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTestGridProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-test-grid-project))
(common-lisp:progn
 (common-lisp:defun get-test-grid-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn session-id session-arn)
   (common-lisp:declare
    (common-lisp:ignorable project-arn session-id session-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-test-grid-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTestGridSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-test-grid-session))
(common-lisp:progn
 (common-lisp:defun get-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-upload))
(common-lisp:progn
 (common-lisp:defun get-vpceconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vpceconfiguration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVPCEConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vpceconfiguration))
(common-lisp:progn
 (common-lisp:defun install-to-remote-access-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key remote-access-session-arn app-arn)
   (common-lisp:declare
    (common-lisp:ignorable remote-access-session-arn app-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-install-to-remote-access-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "InstallToRemoteAccessSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'install-to-remote-access-session))
(common-lisp:progn
 (common-lisp:defun list-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type next-token)
   (common-lisp:declare (common-lisp:ignorable arn type next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-artifacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListArtifacts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-artifacts))
(common-lisp:progn
 (common-lisp:defun list-device-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDeviceInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-device-instances))
(common-lisp:progn
 (common-lisp:defun list-device-pools
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type next-token)
   (common-lisp:declare (common-lisp:ignorable arn type next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-pools-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDevicePools"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-device-pools))
(common-lisp:progn
 (common-lisp:defun list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token filters)
   (common-lisp:declare (common-lisp:ignorable arn next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-devices))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-instance-profiles))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-network-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type next-token)
   (common-lisp:declare (common-lisp:ignorable arn type next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-network-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListNetworkProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-network-profiles))
(common-lisp:progn
 (common-lisp:defun list-offering-promotions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offering-promotions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOfferingPromotions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-offering-promotions))
(common-lisp:progn
 (common-lisp:defun list-offering-transactions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-offering-transactions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOfferingTransactions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-offering-transactions))
(common-lisp:progn
 (common-lisp:defun list-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOfferings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-offerings))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-remote-access-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-remote-access-sessions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRemoteAccessSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-remote-access-sessions))
(common-lisp:progn
 (common-lisp:defun list-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-runs))
(common-lisp:progn
 (common-lisp:defun list-samples
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-samples-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSamples"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-samples))
(common-lisp:progn
 (common-lisp:defun list-suites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-suites-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSuites"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-suites))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-test-grid-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-result next-token)
   (common-lisp:declare (common-lisp:ignorable max-result next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-test-grid-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTestGridProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-grid-projects))
(common-lisp:progn
 (common-lisp:defun list-test-grid-session-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-arn max-result next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-arn max-result next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-test-grid-session-actions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTestGridSessionActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-grid-session-actions))
(common-lisp:progn
 (common-lisp:defun list-test-grid-session-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-arn type max-result next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-arn type max-result next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-test-grid-session-artifacts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTestGridSessionArtifacts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-grid-session-artifacts))
(common-lisp:progn
 (common-lisp:defun list-test-grid-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn status creation-time-after
                     creation-time-before end-time-after end-time-before
                     max-result next-token)
   (common-lisp:declare
    (common-lisp:ignorable project-arn status creation-time-after
     creation-time-before end-time-after end-time-before max-result
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-test-grid-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTestGridSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-grid-sessions))
(common-lisp:progn
 (common-lisp:defun list-tests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tests))
(common-lisp:progn
 (common-lisp:defun list-unique-problems
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token)
   (common-lisp:declare (common-lisp:ignorable arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-unique-problems-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUniqueProblems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-unique-problems))
(common-lisp:progn
 (common-lisp:defun list-uploads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type next-token)
   (common-lisp:declare (common-lisp:ignorable arn type next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-uploads-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUploads"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-uploads))
(common-lisp:progn
 (common-lisp:defun list-vpceconfigurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpceconfigurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVPCEConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vpceconfigurations))
(common-lisp:progn
 (common-lisp:defun purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-id quantity
                     offering-promotion-id)
   (common-lisp:declare
    (common-lisp:ignorable offering-id quantity offering-promotion-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-purchase-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'purchase-offering))
(common-lisp:progn
 (common-lisp:defun renew-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-id quantity)
   (common-lisp:declare (common-lisp:ignorable offering-id quantity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-renew-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RenewOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'renew-offering))
(common-lisp:progn
 (common-lisp:defun schedule-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn app-arn device-pool-arn
                     device-selection-configuration name test configuration
                     execution-configuration)
   (common-lisp:declare
    (common-lisp:ignorable project-arn app-arn device-pool-arn
     device-selection-configuration name test configuration
     execution-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-schedule-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ScheduleRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'schedule-run))
(common-lisp:progn
 (common-lisp:defun stop-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "StopJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-job))
(common-lisp:progn
 (common-lisp:defun stop-remote-access-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-remote-access-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopRemoteAccessSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-remote-access-session))
(common-lisp:progn
 (common-lisp:defun stop-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "StopRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-run))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-device-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn profile-arn labels)
   (common-lisp:declare (common-lisp:ignorable arn profile-arn labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDeviceInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-device-instance))
(common-lisp:progn
 (common-lisp:defun update-device-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn name description rules max-devices
                     clear-max-devices)
   (common-lisp:declare
    (common-lisp:ignorable arn name description rules max-devices
     clear-max-devices))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-pool-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDevicePool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-device-pool))
(common-lisp:progn
 (common-lisp:defun update-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn name description package-cleanup
                     exclude-app-packages-from-cleanup reboot-after-use)
   (common-lisp:declare
    (common-lisp:ignorable arn name description package-cleanup
     exclude-app-packages-from-cleanup reboot-after-use))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-instance-profile))
(common-lisp:progn
 (common-lisp:defun update-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn name description type
                     uplink-bandwidth-bits downlink-bandwidth-bits
                     uplink-delay-ms downlink-delay-ms uplink-jitter-ms
                     downlink-jitter-ms uplink-loss-percent
                     downlink-loss-percent)
   (common-lisp:declare
    (common-lisp:ignorable arn name description type uplink-bandwidth-bits
     downlink-bandwidth-bits uplink-delay-ms downlink-delay-ms uplink-jitter-ms
     downlink-jitter-ms uplink-loss-percent downlink-loss-percent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-network-profile))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn name default-job-timeout-minutes
                     vpc-config)
   (common-lisp:declare
    (common-lisp:ignorable arn name default-job-timeout-minutes vpc-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-project))
(common-lisp:progn
 (common-lisp:defun update-test-grid-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-arn name description vpc-config)
   (common-lisp:declare
    (common-lisp:ignorable project-arn name description vpc-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-test-grid-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTestGridProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-test-grid-project))
(common-lisp:progn
 (common-lisp:defun update-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn name content-type edit-content)
   (common-lisp:declare
    (common-lisp:ignorable arn name content-type edit-content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-upload))
(common-lisp:progn
 (common-lisp:defun update-vpceconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn vpce-configuration-name
                     vpce-service-name service-dns-name
                     vpce-configuration-description)
   (common-lisp:declare
    (common-lisp:ignorable arn vpce-configuration-name vpce-service-name
     service-dns-name vpce-configuration-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vpceconfiguration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devicefarm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVPCEConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-vpceconfiguration))
