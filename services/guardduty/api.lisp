;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/guardduty/api (:use)
                             (:nicknames #:aws/guardduty)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/guardduty/api)
(common-lisp:progn
 (common-lisp:define-condition guardduty-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'guardduty-error))
(common-lisp:progn
 (common-lisp:defclass guardduty-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "guardduty" :api-version
                        "2017-11-28" :host-prefix "guardduty" :signing-name
                        "guardduty" :global-host common-lisp:nil))
 (common-lisp:export 'guardduty-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerErrorException" . internal-server-error-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-administrator-invitation-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-accept-administrator-invitation-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (administrator-id :initarg :administrator-id :initform
                         (common-lisp:error ":administrator-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-accept-administrator-invitation-request-administrator-id
                         :shape "String" :location common-lisp:nil
                         :location-name "administratorId")
                        (invitation-id :initarg :invitation-id :initform
                         (common-lisp:error ":invitation-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-accept-administrator-invitation-request-invitation-id
                         :shape "String" :location common-lisp:nil
                         :location-name "invitationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-administrator-invitation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-administrator-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-administrator-invitation-request
                    'make-accept-administrator-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-administrator-invitation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-administrator-invitation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-administrator-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-administrator-invitation-response
                    'make-accept-administrator-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-invitation-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-accept-invitation-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (master-id :initarg :master-id :initform
                         (common-lisp:error ":master-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-accept-invitation-request-master-id
                         :shape "String" :location common-lisp:nil
                         :location-name "masterId")
                        (invitation-id :initarg :invitation-id :initform
                         (common-lisp:error ":invitation-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-accept-invitation-request-invitation-id
                         :shape "String" :location common-lisp:nil
                         :location-name "invitationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-invitation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-request
                    'make-accept-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-invitation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-invitation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-response
                    'make-accept-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-control-list common-lisp:nil
                       ((allows-public-read-access :initarg
                         :allows-public-read-access :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-access-control-list-allows-public-read-access
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "allowsPublicReadAccess")
                        (allows-public-write-access :initarg
                         :allows-public-write-access :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-access-control-list-allows-public-write-access
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "allowsPublicWriteAccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-control-list 'make-access-control-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-read-access))
      (common-lisp:list
       (common-lisp:cons "AllowsPublicReadAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-write-access))
      (common-lisp:list
       (common-lisp:cons "AllowsPublicWriteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (guardduty-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       access-denied-exception-type)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-type)))
(common-lisp:progn
 (common-lisp:defclass access-key-details common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-key-details-access-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         "accessKeyId")
                        (principal-id :initarg :principal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-key-details-principal-id :shape
                         "String" :location common-lisp:nil :location-name
                         "principalId")
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-key-details-user-name :shape
                         "String" :location common-lisp:nil :location-name
                         "userName")
                        (user-type :initarg :user-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-key-details-user-type :shape
                         "String" :location common-lisp:nil :location-name
                         "userType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-key-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-key-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-key-details 'make-access-key-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-type))
      (common-lisp:list
       (common-lisp:cons "UserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-detail common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-account-detail-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         "accountId")
                        (email :initarg :email :initform
                         (common-lisp:error ":email is required") :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-account-detail-email :shape "Email"
                         :location common-lisp:nil :location-name "email"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-detail 'make-account-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-details ()
   '(trivial-types:proper-list account-detail))
 (common-lisp:defun make-account-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass account-free-trial-info common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-account-free-trial-info-account-id :shape
                         "String" :location common-lisp:nil :location-name
                         "accountId")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-sources-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-free-trial-info-data-sources
                         :shape "DataSourcesFreeTrial" :location
                         common-lisp:nil :location-name "dataSources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          free-trial-feature-configurations-results
                          common-lisp:null)
                         :accessor
                         struct-shape-account-free-trial-info-features :shape
                         "FreeTrialFeatureConfigurationsResults" :location
                         common-lisp:nil :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-free-trial-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-free-trial-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-free-trial-info 'make-account-free-trial-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-free-trial-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-free-trial-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-free-trial-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-free-trial-infos ()
   '(trivial-types:proper-list account-free-trial-info))
 (common-lisp:defun make-account-free-trial-infos
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-free-trial-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-ids () '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass account-level-permissions common-lisp:nil
                       ((block-public-access :initarg :block-public-access
                         :initform common-lisp:nil :type
                         (common-lisp:or block-public-access common-lisp:null)
                         :accessor
                         struct-shape-account-level-permissions-block-public-access
                         :shape "BlockPublicAccess" :location common-lisp:nil
                         :location-name "blockPublicAccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-level-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-level-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-level-permissions
                    'make-account-level-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-access))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-level-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-action-action-type :shape "String"
                         :location common-lisp:nil :location-name "actionType")
                        (aws-api-call-action :initarg :aws-api-call-action
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-api-call-action common-lisp:null)
                         :accessor struct-shape-action-aws-api-call-action
                         :shape "AwsApiCallAction" :location common-lisp:nil
                         :location-name "awsApiCallAction")
                        (dns-request-action :initarg :dns-request-action
                         :initform common-lisp:nil :type
                         (common-lisp:or dns-request-action common-lisp:null)
                         :accessor struct-shape-action-dns-request-action
                         :shape "DnsRequestAction" :location common-lisp:nil
                         :location-name "dnsRequestAction")
                        (network-connection-action :initarg
                         :network-connection-action :initform common-lisp:nil
                         :type
                         (common-lisp:or network-connection-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-network-connection-action :shape
                         "NetworkConnectionAction" :location common-lisp:nil
                         :location-name "networkConnectionAction")
                        (port-probe-action :initarg :port-probe-action
                         :initform common-lisp:nil :type
                         (common-lisp:or port-probe-action common-lisp:null)
                         :accessor struct-shape-action-port-probe-action :shape
                         "PortProbeAction" :location common-lisp:nil
                         :location-name "portProbeAction")
                        (kubernetes-api-call-action :initarg
                         :kubernetes-api-call-action :initform common-lisp:nil
                         :type
                         (common-lisp:or kubernetes-api-call-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-kubernetes-api-call-action :shape
                         "KubernetesApiCallAction" :location common-lisp:nil
                         :location-name "kubernetesApiCallAction")
                        (rds-login-attempt-action :initarg
                         :rds-login-attempt-action :initform common-lisp:nil
                         :type
                         (common-lisp:or rds-login-attempt-action
                                         common-lisp:null)
                         :accessor struct-shape-action-rds-login-attempt-action
                         :shape "RdsLoginAttemptAction" :location
                         common-lisp:nil :location-name
                         "rdsLoginAttemptAction")
                        (kubernetes-permission-checked-details :initarg
                         :kubernetes-permission-checked-details :initform
                         common-lisp:nil :type
                         (common-lisp:or kubernetes-permission-checked-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-kubernetes-permission-checked-details
                         :shape "KubernetesPermissionCheckedDetails" :location
                         common-lisp:nil :location-name
                         "kubernetesPermissionCheckedDetails")
                        (kubernetes-role-binding-details :initarg
                         :kubernetes-role-binding-details :initform
                         common-lisp:nil :type
                         (common-lisp:or kubernetes-role-binding-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-kubernetes-role-binding-details
                         :shape "KubernetesRoleBindingDetails" :location
                         common-lisp:nil :location-name
                         "kubernetesRoleBindingDetails")
                        (kubernetes-role-details :initarg
                         :kubernetes-role-details :initform common-lisp:nil
                         :type
                         (common-lisp:or kubernetes-role-details
                                         common-lisp:null)
                         :accessor struct-shape-action-kubernetes-role-details
                         :shape "KubernetesRoleDetails" :location
                         common-lisp:nil :location-name
                         "kubernetesRoleDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-api-call-action))
      (common-lisp:list
       (common-lisp:cons "AwsApiCallAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-request-action))
      (common-lisp:list
       (common-lisp:cons "DnsRequestAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-connection-action))
      (common-lisp:list
       (common-lisp:cons "NetworkConnectionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-probe-action))
      (common-lisp:list
       (common-lisp:cons "PortProbeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-api-call-action))
      (common-lisp:list
       (common-lisp:cons "KubernetesApiCallAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-login-attempt-action))
      (common-lisp:list
       (common-lisp:cons "RdsLoginAttemptAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-permission-checked-details))
      (common-lisp:list
       (common-lisp:cons "KubernetesPermissionCheckedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-role-binding-details))
      (common-lisp:list
       (common-lisp:cons "KubernetesRoleBindingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-role-details))
      (common-lisp:list
       (common-lisp:cons "KubernetesRoleDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-details common-lisp:nil
                       ((addon-version :initarg :addon-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-details-addon-version :shape
                         "String" :location common-lisp:nil :location-name
                         "addonVersion")
                        (addon-status :initarg :addon-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-addon-details-addon-status :shape
                         "String" :location common-lisp:nil :location-name
                         "addonStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-addon-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'addon-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'addon-details 'make-addon-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "AddonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-status))
      (common-lisp:list
       (common-lisp:cons "AddonStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass admin-account common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-admin-account-admin-account-id :shape
                         "String" :location common-lisp:nil :location-name
                         "adminAccountId")
                        (admin-status :initarg :admin-status :initform
                         common-lisp:nil :type
                         (common-lisp:or admin-status common-lisp:null)
                         :accessor struct-shape-admin-account-admin-status
                         :shape "AdminStatus" :location common-lisp:nil
                         :location-name "adminStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-admin-account
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'admin-account
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'admin-account 'make-admin-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-status))
      (common-lisp:list
       (common-lisp:cons "AdminStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype admin-accounts ()
   '(trivial-types:proper-list admin-account))
 (common-lisp:defun make-admin-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype admin-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass administrator common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-administrator-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         "accountId")
                        (invitation-id :initarg :invitation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-administrator-invitation-id :shape
                         "String" :location common-lisp:nil :location-name
                         "invitationId")
                        (relationship-status :initarg :relationship-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-administrator-relationship-status :shape
                         "String" :location common-lisp:nil :location-name
                         "relationshipStatus")
                        (invited-at :initarg :invited-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-administrator-invited-at :shape "String"
                         :location common-lisp:nil :location-name "invitedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-administrator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'administrator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'administrator 'make-administrator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input administrator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input administrator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "RelationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input administrator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype affected-resources () 'common-lisp:hash-table)
 (common-lisp:defun make-affected-resources
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass agent-details common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-agent-details-version :shape
                         "String" :location common-lisp:nil :location-name
                         "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'agent-details 'make-agent-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((profiles :initarg :profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-profiles common-lisp:null)
                         :accessor struct-shape-anomaly-profiles :shape
                         "AnomalyProfiles" :location common-lisp:nil
                         :location-name "profiles")
                        (unusual :initarg :unusual :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-unusual common-lisp:null)
                         :accessor struct-shape-anomaly-unusual :shape
                         "AnomalyUnusual" :location common-lisp:nil
                         :location-name "unusual"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unusual))
      (common-lisp:list
       (common-lisp:cons "Unusual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-object common-lisp:nil
                       ((profile-type :initarg :profile-type :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-type common-lisp:null)
                         :accessor struct-shape-anomaly-object-profile-type
                         :shape "ProfileType" :location common-lisp:nil
                         :location-name "profileType")
                        (profile-subtype :initarg :profile-subtype :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-subtype common-lisp:null)
                         :accessor struct-shape-anomaly-object-profile-subtype
                         :shape "ProfileSubtype" :location common-lisp:nil
                         :location-name "profileSubtype")
                        (observations :initarg :observations :initform
                         common-lisp:nil :type
                         (common-lisp:or observations common-lisp:null)
                         :accessor struct-shape-anomaly-object-observations
                         :shape "Observations" :location common-lisp:nil
                         :location-name "observations"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly-object 'make-anomaly-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-subtype))
      (common-lisp:list
       (common-lisp:cons "ProfileSubtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observations))
      (common-lisp:list
       (common-lisp:cons "Observations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-profile-feature-objects ()
   '(trivial-types:proper-list anomaly-object))
 (common-lisp:defun make-anomaly-profile-feature-objects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype anomaly-profile-features () 'common-lisp:hash-table)
 (common-lisp:defun make-anomaly-profile-features
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype anomaly-profiles () 'common-lisp:hash-table)
 (common-lisp:defun make-anomaly-profiles (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass anomaly-unusual common-lisp:nil
                       ((behavior :initarg :behavior :initform common-lisp:nil
                         :type (common-lisp:or behavior common-lisp:null)
                         :accessor struct-shape-anomaly-unusual-behavior :shape
                         "Behavior" :location common-lisp:nil :location-name
                         "behavior"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-unusual
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-unusual
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly-unusual 'make-anomaly-unusual))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-unusual))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-unusual))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-unusual))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-unusual-behavior-feature ()
   'common-lisp:hash-table)
 (common-lisp:defun make-anomaly-unusual-behavior-feature
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass archive-findings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-archive-findings-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-ids :initarg :finding-ids :initform
                         (common-lisp:error ":finding-ids is required") :type
                         (common-lisp:or finding-ids common-lisp:null)
                         :accessor
                         struct-shape-archive-findings-request-finding-ids
                         :shape "FindingIds" :location common-lisp:nil
                         :location-name "findingIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-findings-request 'make-archive-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "FindingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-findings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-findings-response
                    'make-archive-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-findings-response))
   common-lisp:nil))
(common-lisp:deftype auto-enable-members () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-api-call-action common-lisp:nil
                       ((api :initarg :api :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-api-call-action-api :shape "String"
                         :location common-lisp:nil :location-name "api")
                        (caller-type :initarg :caller-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-api-call-action-caller-type :shape
                         "String" :location common-lisp:nil :location-name
                         "callerType")
                        (domain-details :initarg :domain-details :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-details common-lisp:null)
                         :accessor
                         struct-shape-aws-api-call-action-domain-details :shape
                         "DomainDetails" :location common-lisp:nil
                         :location-name "domainDetails")
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-api-call-action-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         "errorCode")
                        (user-agent :initarg :user-agent :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-api-call-action-user-agent :shape
                         "String" :location common-lisp:nil :location-name
                         "userAgent")
                        (remote-ip-details :initarg :remote-ip-details
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-ip-details common-lisp:null)
                         :accessor
                         struct-shape-aws-api-call-action-remote-ip-details
                         :shape "RemoteIpDetails" :location common-lisp:nil
                         :location-name "remoteIpDetails")
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aws-api-call-action-service-name :shape
                         "String" :location common-lisp:nil :location-name
                         "serviceName")
                        (remote-account-details :initarg
                         :remote-account-details :initform common-lisp:nil
                         :type
                         (common-lisp:or remote-account-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-api-call-action-remote-account-details
                         :shape "RemoteAccountDetails" :location
                         common-lisp:nil :location-name "remoteAccountDetails")
                        (affected-resources :initarg :affected-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or affected-resources common-lisp:null)
                         :accessor
                         struct-shape-aws-api-call-action-affected-resources
                         :shape "AffectedResources" :location common-lisp:nil
                         :location-name "affectedResources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-api-call-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-api-call-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-api-call-action 'make-aws-api-call-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api))
      (common-lisp:list
       (common-lisp:cons "Api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-type))
      (common-lisp:list
       (common-lisp:cons "CallerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-details))
      (common-lisp:list
       (common-lisp:cons "DomainDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "UserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-account-details))
      (common-lisp:list
       (common-lisp:cons "RemoteAccountDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-resources))
      (common-lisp:list
       (common-lisp:cons "AffectedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (guardduty-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       bad-request-exception-type)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-type)))
(common-lisp:progn
 (common-lisp:deftype behavior () 'common-lisp:hash-table)
 (common-lisp:defun make-behavior (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass block-public-access common-lisp:nil
                       ((ignore-public-acls :initarg :ignore-public-acls
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-block-public-access-ignore-public-acls
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "ignorePublicAcls")
                        (restrict-public-buckets :initarg
                         :restrict-public-buckets :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-block-public-access-restrict-public-buckets
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "restrictPublicBuckets")
                        (block-public-acls :initarg :block-public-acls
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-block-public-access-block-public-acls
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "blockPublicAcls")
                        (block-public-policy :initarg :block-public-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-block-public-access-block-public-policy
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "blockPublicPolicy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-block-public-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'block-public-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'block-public-access 'make-block-public-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-public-access))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bucket-level-permissions common-lisp:nil
                       ((access-control-list :initarg :access-control-list
                         :initform common-lisp:nil :type
                         (common-lisp:or access-control-list common-lisp:null)
                         :accessor
                         struct-shape-bucket-level-permissions-access-control-list
                         :shape "AccessControlList" :location common-lisp:nil
                         :location-name "accessControlList")
                        (bucket-policy :initarg :bucket-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-policy common-lisp:null)
                         :accessor
                         struct-shape-bucket-level-permissions-bucket-policy
                         :shape "BucketPolicy" :location common-lisp:nil
                         :location-name "bucketPolicy")
                        (block-public-access :initarg :block-public-access
                         :initform common-lisp:nil :type
                         (common-lisp:or block-public-access common-lisp:null)
                         :accessor
                         struct-shape-bucket-level-permissions-block-public-access
                         :shape "BlockPublicAccess" :location common-lisp:nil
                         :location-name "blockPublicAccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-level-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-level-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bucket-level-permissions 'make-bucket-level-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "BucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-access))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-level-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bucket-policy common-lisp:nil
                       ((allows-public-read-access :initarg
                         :allows-public-read-access :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-bucket-policy-allows-public-read-access
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "allowsPublicReadAccess")
                        (allows-public-write-access :initarg
                         :allows-public-write-access :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-bucket-policy-allows-public-write-access
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "allowsPublicWriteAccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket-policy 'make-bucket-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-read-access))
      (common-lisp:list
       (common-lisp:cons "AllowsPublicReadAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-public-write-access))
      (common-lisp:list
       (common-lisp:cons "AllowsPublicWriteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass city common-lisp:nil
                       ((city-name :initarg :city-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-city-city-name :shape "String" :location
                         common-lisp:nil :location-name "cityName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-city (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'city
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'city 'make-city))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input city))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input city))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city-name))
      (common-lisp:list
       (common-lisp:cons "CityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input city))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-trail-configuration-result common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-cloud-trail-configuration-result-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-trail-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-trail-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-configuration-result
                    'make-cloud-trail-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((eq :initarg :eq :initform common-lisp:nil :type
                         (common-lisp:or eq common-lisp:null) :accessor
                         struct-shape-condition-eq :shape "Eq" :location
                         common-lisp:nil :location-name "eq")
                        (neq :initarg :neq :initform common-lisp:nil :type
                         (common-lisp:or neq common-lisp:null) :accessor
                         struct-shape-condition-neq :shape "Neq" :location
                         common-lisp:nil :location-name "neq")
                        (gt :initarg :gt :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-condition-gt :shape "Integer" :location
                         common-lisp:nil :location-name "gt")
                        (gte :initarg :gte :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-condition-gte :shape "Integer" :location
                         common-lisp:nil :location-name "gte")
                        (lt :initarg :lt :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-condition-lt :shape "Integer" :location
                         common-lisp:nil :location-name "lt")
                        (lte :initarg :lte :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-condition-lte :shape "Integer" :location
                         common-lisp:nil :location-name "lte")
                        (equals :initarg :equals :initform common-lisp:nil
                         :type (common-lisp:or equals common-lisp:null)
                         :accessor struct-shape-condition-equals :shape
                         "Equals" :location common-lisp:nil :location-name
                         "equals")
                        (not-equals :initarg :not-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or not-equals common-lisp:null) :accessor
                         struct-shape-condition-not-equals :shape "NotEquals"
                         :location common-lisp:nil :location-name "notEquals")
                        (greater-than :initarg :greater-than :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-condition-greater-than :shape "Long"
                         :location common-lisp:nil :location-name
                         "greaterThan")
                        (greater-than-or-equal :initarg :greater-than-or-equal
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-condition-greater-than-or-equal :shape
                         "Long" :location common-lisp:nil :location-name
                         "greaterThanOrEqual")
                        (less-than :initarg :less-than :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-condition-less-than :shape "Long"
                         :location common-lisp:nil :location-name "lessThan")
                        (less-than-or-equal :initarg :less-than-or-equal
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-condition-less-than-or-equal :shape
                         "Long" :location common-lisp:nil :location-name
                         "lessThanOrEqual"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "Eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "Neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gt))
      (common-lisp:list
       (common-lisp:cons "Gt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "Gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lt))
      (common-lisp:list
       (common-lisp:cons "Lt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "Lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals))
      (common-lisp:list
       (common-lisp:cons "Equals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-equals))
      (common-lisp:list
       (common-lisp:cons "NotEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greater-than))
      (common-lisp:list
       (common-lisp:cons "GreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'greater-than-or-equal))
      (common-lisp:list
       (common-lisp:cons "GreaterThanOrEqual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than))
      (common-lisp:list
       (common-lisp:cons "LessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than-or-equal))
      (common-lisp:list
       (common-lisp:cons "LessThanOrEqual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (guardduty-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       conflict-exception-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-type)))
(common-lisp:progn
 (common-lisp:defclass container common-lisp:nil
                       ((container-runtime :initarg :container-runtime
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-container-runtime :shape
                         "String" :location common-lisp:nil :location-name
                         "containerRuntime")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-id :shape "String" :location
                         common-lisp:nil :location-name "id")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-name :shape "String" :location
                         common-lisp:nil :location-name "name")
                        (image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-image :shape "String" :location
                         common-lisp:nil :location-name "image")
                        (image-prefix :initarg :image-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-image-prefix :shape "String"
                         :location common-lisp:nil :location-name
                         "imagePrefix")
                        (volume-mounts :initarg :volume-mounts :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-mounts common-lisp:null)
                         :accessor struct-shape-container-volume-mounts :shape
                         "VolumeMounts" :location common-lisp:nil
                         :location-name "volumeMounts")
                        (security-context :initarg :security-context :initform
                         common-lisp:nil :type
                         (common-lisp:or security-context common-lisp:null)
                         :accessor struct-shape-container-security-context
                         :shape "SecurityContext" :location common-lisp:nil
                         :location-name "securityContext"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-runtime))
      (common-lisp:list
       (common-lisp:cons "ContainerRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-prefix))
      (common-lisp:list
       (common-lisp:cons "ImagePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-mounts))
      (common-lisp:list
       (common-lisp:cons "VolumeMounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-context))
      (common-lisp:list
       (common-lisp:cons "SecurityContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-instance-details common-lisp:nil
                       ((covered-container-instances :initarg
                         :covered-container-instances :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-container-instance-details-covered-container-instances
                         :shape "Long" :location common-lisp:nil :location-name
                         "coveredContainerInstances")
                        (compatible-container-instances :initarg
                         :compatible-container-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-container-instance-details-compatible-container-instances
                         :shape "Long" :location common-lisp:nil :location-name
                         "compatibleContainerInstances"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-instance-details
                    'make-container-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'covered-container-instances))
      (common-lisp:list
       (common-lisp:cons "CoveredContainerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-container-instances))
      (common-lisp:list
       (common-lisp:cons "CompatibleContainerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype containers () '(trivial-types:proper-list container))
 (common-lisp:defun make-containers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype count-by-coverage-status () 'common-lisp:hash-table)
 (common-lisp:defun make-count-by-coverage-status
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype count-by-resource-type () 'common-lisp:hash-table)
 (common-lisp:defun make-count-by-resource-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype count-by-severity () 'common-lisp:hash-table)
 (common-lisp:defun make-count-by-severity
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass country common-lisp:nil
                       ((country-code :initarg :country-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-country-country-code :shape "String"
                         :location common-lisp:nil :location-name
                         "countryCode")
                        (country-name :initarg :country-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-country-country-name :shape "String"
                         :location common-lisp:nil :location-name
                         "countryName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-country
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'country
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'country 'make-country))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-name))
      (common-lisp:list
       (common-lisp:cons "CountryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-ec2instance-details common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-ec2instance-details-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name "instanceId")
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-ec2instance-details-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name "instanceType")
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-ec2instance-details-cluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name "clusterArn")
                        (agent-details :initarg :agent-details :initform
                         common-lisp:nil :type
                         (common-lisp:or agent-details common-lisp:null)
                         :accessor
                         struct-shape-coverage-ec2instance-details-agent-details
                         :shape "AgentDetails" :location common-lisp:nil
                         :location-name "agentDetails")
                        (management-type :initarg :management-type :initform
                         common-lisp:nil :type
                         (common-lisp:or management-type common-lisp:null)
                         :accessor
                         struct-shape-coverage-ec2instance-details-management-type
                         :shape "ManagementType" :location common-lisp:nil
                         :location-name "managementType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-ec2instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-ec2instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-ec2instance-details
                    'make-coverage-ec2instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-ec2instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-ec2instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-details))
      (common-lisp:list
       (common-lisp:cons "AgentDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'management-type))
      (common-lisp:list
       (common-lisp:cons "ManagementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-ec2instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-ecs-cluster-details common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-ecs-cluster-details-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name "clusterName")
                        (fargate-details :initarg :fargate-details :initform
                         common-lisp:nil :type
                         (common-lisp:or fargate-details common-lisp:null)
                         :accessor
                         struct-shape-coverage-ecs-cluster-details-fargate-details
                         :shape "FargateDetails" :location common-lisp:nil
                         :location-name "fargateDetails")
                        (container-instance-details :initarg
                         :container-instance-details :initform common-lisp:nil
                         :type
                         (common-lisp:or container-instance-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-ecs-cluster-details-container-instance-details
                         :shape "ContainerInstanceDetails" :location
                         common-lisp:nil :location-name
                         "containerInstanceDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-ecs-cluster-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-ecs-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-ecs-cluster-details
                    'make-coverage-ecs-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-ecs-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-ecs-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-details))
      (common-lisp:list
       (common-lisp:cons "FargateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-details))
      (common-lisp:list
       (common-lisp:cons "ContainerInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-ecs-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-eks-cluster-details common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-eks-cluster-details-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name "clusterName")
                        (covered-nodes :initarg :covered-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-coverage-eks-cluster-details-covered-nodes
                         :shape "Long" :location common-lisp:nil :location-name
                         "coveredNodes")
                        (compatible-nodes :initarg :compatible-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-coverage-eks-cluster-details-compatible-nodes
                         :shape "Long" :location common-lisp:nil :location-name
                         "compatibleNodes")
                        (addon-details :initarg :addon-details :initform
                         common-lisp:nil :type
                         (common-lisp:or addon-details common-lisp:null)
                         :accessor
                         struct-shape-coverage-eks-cluster-details-addon-details
                         :shape "AddonDetails" :location common-lisp:nil
                         :location-name "addonDetails")
                        (management-type :initarg :management-type :initform
                         common-lisp:nil :type
                         (common-lisp:or management-type common-lisp:null)
                         :accessor
                         struct-shape-coverage-eks-cluster-details-management-type
                         :shape "ManagementType" :location common-lisp:nil
                         :location-name "managementType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-eks-cluster-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-eks-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-eks-cluster-details
                    'make-coverage-eks-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-eks-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-eks-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'covered-nodes))
      (common-lisp:list
       (common-lisp:cons "CoveredNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-nodes))
      (common-lisp:list
       (common-lisp:cons "CompatibleNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-details))
      (common-lisp:list
       (common-lisp:cons "AddonDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'management-type))
      (common-lisp:list
       (common-lisp:cons "ManagementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-eks-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-filter-condition common-lisp:nil
                       ((equals :initarg :equals :initform common-lisp:nil
                         :type (common-lisp:or equals common-lisp:null)
                         :accessor
                         struct-shape-coverage-filter-condition-equals :shape
                         "Equals" :location common-lisp:nil :location-name
                         "equals")
                        (not-equals :initarg :not-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or not-equals common-lisp:null) :accessor
                         struct-shape-coverage-filter-condition-not-equals
                         :shape "NotEquals" :location common-lisp:nil
                         :location-name "notEquals"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-filter-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-filter-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-filter-condition
                    'make-coverage-filter-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals))
      (common-lisp:list
       (common-lisp:cons "Equals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-equals))
      (common-lisp:list
       (common-lisp:cons "NotEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-filter-criteria common-lisp:nil
                       ((filter-criterion :initarg :filter-criterion :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-filter-criterion-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-filter-criteria-filter-criterion
                         :shape "CoverageFilterCriterionList" :location
                         common-lisp:nil :location-name "filterCriterion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-filter-criteria 'make-coverage-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criterion))
      (common-lisp:list
       (common-lisp:cons "FilterCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-filter-criterion common-lisp:nil
                       ((criterion-key :initarg :criterion-key :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-filter-criterion-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-filter-criterion-criterion-key
                         :shape "CoverageFilterCriterionKey" :location
                         common-lisp:nil :location-name "criterionKey")
                        (filter-condition :initarg :filter-condition :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-filter-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-filter-criterion-filter-condition
                         :shape "CoverageFilterCondition" :location
                         common-lisp:nil :location-name "filterCondition"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-filter-criterion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-filter-criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-filter-criterion
                    'make-coverage-filter-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criterion-key))
      (common-lisp:list
       (common-lisp:cons "CriterionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-condition))
      (common-lisp:list
       (common-lisp:cons "FilterCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-filter-criterion))
   common-lisp:nil))
(common-lisp:deftype coverage-filter-criterion-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype coverage-filter-criterion-list ()
   '(trivial-types:proper-list coverage-filter-criterion))
 (common-lisp:defun make-coverage-filter-criterion-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            coverage-filter-criterion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass coverage-resource common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-resource-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         "resourceId")
                        (detector-id :initarg :detector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-coverage-resource-detector-id
                         :shape "DetectorId" :location common-lisp:nil
                         :location-name "detectorId")
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-coverage-resource-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         "accountId")
                        (resource-details :initarg :resource-details :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-resource-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-resource-resource-details :shape
                         "CoverageResourceDetails" :location common-lisp:nil
                         :location-name "resourceDetails")
                        (coverage-status :initarg :coverage-status :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-status common-lisp:null)
                         :accessor
                         struct-shape-coverage-resource-coverage-status :shape
                         "CoverageStatus" :location common-lisp:nil
                         :location-name "coverageStatus")
                        (issue :initarg :issue :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-coverage-resource-issue :shape "String"
                         :location common-lisp:nil :location-name "issue")
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-coverage-resource-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "updatedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-resource 'make-coverage-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "DetectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-status))
      (common-lisp:list
       (common-lisp:cons "CoverageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue))
      (common-lisp:list
       (common-lisp:cons "Issue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-resource-details common-lisp:nil
                       ((eks-cluster-details :initarg :eks-cluster-details
                         :initform common-lisp:nil :type
                         (common-lisp:or coverage-eks-cluster-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-resource-details-eks-cluster-details
                         :shape "CoverageEksClusterDetails" :location
                         common-lisp:nil :location-name "eksClusterDetails")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-coverage-resource-details-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name "resourceType")
                        (ecs-cluster-details :initarg :ecs-cluster-details
                         :initform common-lisp:nil :type
                         (common-lisp:or coverage-ecs-cluster-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-resource-details-ecs-cluster-details
                         :shape "CoverageEcsClusterDetails" :location
                         common-lisp:nil :location-name "ecsClusterDetails")
                        (ec2instance-details :initarg :ec2instance-details
                         :initform common-lisp:nil :type
                         (common-lisp:or coverage-ec2instance-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-resource-details-ec2instance-details
                         :shape "CoverageEc2InstanceDetails" :location
                         common-lisp:nil :location-name "ec2InstanceDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-resource-details
                    'make-coverage-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-cluster-details))
      (common-lisp:list
       (common-lisp:cons "EksClusterDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-details))
      (common-lisp:list
       (common-lisp:cons "EcsClusterDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-details))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype coverage-resources ()
   '(trivial-types:proper-list coverage-resource))
 (common-lisp:defun make-coverage-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass coverage-sort-criteria common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-sort-key common-lisp:null)
                         :accessor
                         struct-shape-coverage-sort-criteria-attribute-name
                         :shape "CoverageSortKey" :location common-lisp:nil
                         :location-name "attributeName")
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by common-lisp:null)
                         :accessor struct-shape-coverage-sort-criteria-order-by
                         :shape "OrderBy" :location common-lisp:nil
                         :location-name "orderBy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-sort-criteria 'make-coverage-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "OrderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype coverage-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass coverage-statistics common-lisp:nil
                       ((count-by-resource-type :initarg
                         :count-by-resource-type :initform common-lisp:nil
                         :type
                         (common-lisp:or count-by-resource-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-statistics-count-by-resource-type
                         :shape "CountByResourceType" :location common-lisp:nil
                         :location-name "countByResourceType")
                        (count-by-coverage-status :initarg
                         :count-by-coverage-status :initform common-lisp:nil
                         :type
                         (common-lisp:or count-by-coverage-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-statistics-count-by-coverage-status
                         :shape "CountByCoverageStatus" :location
                         common-lisp:nil :location-name
                         "countByCoverageStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-statistics 'make-coverage-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'count-by-resource-type))
      (common-lisp:list
       (common-lisp:cons "CountByResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'count-by-coverage-status))
      (common-lisp:list
       (common-lisp:cons "CountByCoverageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-statistics))
   common-lisp:nil))
(common-lisp:deftype coverage-statistics-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype coverage-statistics-type-list ()
   '(trivial-types:proper-list coverage-statistics-type))
 (common-lisp:defun make-coverage-statistics-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            coverage-statistics-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype coverage-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-detector-request common-lisp:nil
                       ((enable :initarg :enable :initform
                         (common-lisp:error ":enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-detector-request-enable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "enable")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-detector-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name "clientToken")
                        (finding-publishing-frequency :initarg
                         :finding-publishing-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-publishing-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-detector-request-finding-publishing-frequency
                         :shape "FindingPublishingFrequency" :location
                         common-lisp:nil :location-name
                         "findingPublishingFrequency")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-detector-request-data-sources
                         :shape "DataSourceConfigurations" :location
                         common-lisp:nil :location-name "dataSources")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-detector-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         "tags")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or detector-feature-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-detector-request-features :shape
                         "DetectorFeatureConfigurations" :location
                         common-lisp:nil :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-detector-request 'make-create-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "FindingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-detector-response common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-detector-response-detector-id
                         :shape "DetectorId" :location common-lisp:nil
                         :location-name "detectorId")
                        (unprocessed-data-sources :initarg
                         :unprocessed-data-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-data-sources-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-detector-response-unprocessed-data-sources
                         :shape "UnprocessedDataSourcesResult" :location
                         common-lisp:nil :location-name
                         "unprocessedDataSources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-detector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-detector-response 'make-create-detector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "DetectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-data-sources))
      (common-lisp:list
       (common-lisp:cons "UnprocessedDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-filter-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-filter-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-create-filter-request-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name "name")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-description common-lisp:null)
                         :accessor
                         struct-shape-create-filter-request-description :shape
                         "FilterDescription" :location common-lisp:nil
                         :location-name "description")
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or filter-action common-lisp:null)
                         :accessor struct-shape-create-filter-request-action
                         :shape "FilterAction" :location common-lisp:nil
                         :location-name "action")
                        (rank :initarg :rank :initform common-lisp:nil :type
                         (common-lisp:or filter-rank common-lisp:null)
                         :accessor struct-shape-create-filter-request-rank
                         :shape "FilterRank" :location common-lisp:nil
                         :location-name "rank")
                        (finding-criteria :initarg :finding-criteria :initform
                         (common-lisp:error ":finding-criteria is required")
                         :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         struct-shape-create-filter-request-finding-criteria
                         :shape "FindingCriteria" :location common-lisp:nil
                         :location-name "findingCriteria")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-filter-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         "clientToken")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-filter-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-filter-request 'make-create-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "FindingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-filter-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-create-filter-response-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-filter-response 'make-create-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ipset-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-ipset-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-ipset-request-name :shape "Name"
                         :location common-lisp:nil :location-name "name")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or ip-set-format common-lisp:null)
                         :accessor struct-shape-create-ipset-request-format
                         :shape "IpSetFormat" :location common-lisp:nil
                         :location-name "format")
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location common-lisp:null) :accessor
                         struct-shape-create-ipset-request-location :shape
                         "Location" :location common-lisp:nil :location-name
                         "location")
                        (activate :initarg :activate :initform
                         (common-lisp:error ":activate is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-ipset-request-activate :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "activate")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-ipset-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         "clientToken")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-ipset-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-ipset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-ipset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-ipset-request 'make-create-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activate))
      (common-lisp:list
       (common-lisp:cons "Activate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ipset-response common-lisp:nil
                       ((ip-set-id :initarg :ip-set-id :initform
                         (common-lisp:error ":ip-set-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-ipset-response-ip-set-id :shape
                         "String" :location common-lisp:nil :location-name
                         "ipSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-ipset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-ipset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-ipset-response 'make-create-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-set-id))
      (common-lisp:list
       (common-lisp:cons "IpSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-members-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-details :initarg :account-details :initform
                         (common-lisp:error ":account-details is required")
                         :type
                         (common-lisp:or account-details common-lisp:null)
                         :accessor
                         struct-shape-create-members-request-account-details
                         :shape "AccountDetails" :location common-lisp:nil
                         :location-name "accountDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-members-request 'make-create-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-details))
      (common-lisp:list
       (common-lisp:cons "AccountDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-create-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-members-response 'make-create-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-publishing-destination-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-publishing-destination-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (destination-type :initarg :destination-type :initform
                         (common-lisp:error ":destination-type is required")
                         :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor
                         struct-shape-create-publishing-destination-request-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name "destinationType")
                        (destination-properties :initarg
                         :destination-properties :initform
                         (common-lisp:error
                          ":destination-properties is required")
                         :type
                         (common-lisp:or destination-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-publishing-destination-request-destination-properties
                         :shape "DestinationProperties" :location
                         common-lisp:nil :location-name
                         "destinationProperties")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-publishing-destination-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-publishing-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-publishing-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-publishing-destination-request
                    'make-create-publishing-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-publishing-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-publishing-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-properties))
      (common-lisp:list
       (common-lisp:cons "DestinationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-publishing-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-publishing-destination-response common-lisp:nil
                       ((destination-id :initarg :destination-id :initform
                         (common-lisp:error ":destination-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-publishing-destination-response-destination-id
                         :shape "String" :location common-lisp:nil
                         :location-name "destinationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-publishing-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-publishing-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-publishing-destination-response
                    'make-create-publishing-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-publishing-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-publishing-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-id))
      (common-lisp:list
       (common-lisp:cons "DestinationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-publishing-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sample-findings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-sample-findings-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-types :initarg :finding-types :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-types common-lisp:null)
                         :accessor
                         struct-shape-create-sample-findings-request-finding-types
                         :shape "FindingTypes" :location common-lisp:nil
                         :location-name "findingTypes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sample-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sample-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sample-findings-request
                    'make-create-sample-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-types))
      (common-lisp:list
       (common-lisp:cons "FindingTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sample-findings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sample-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sample-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sample-findings-response
                    'make-create-sample-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sample-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-threat-intel-set-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-create-threat-intel-set-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-threat-intel-set-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         "name")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or threat-intel-set-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-threat-intel-set-request-format
                         :shape "ThreatIntelSetFormat" :location
                         common-lisp:nil :location-name "format")
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location common-lisp:null) :accessor
                         struct-shape-create-threat-intel-set-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name "location")
                        (activate :initarg :activate :initform
                         (common-lisp:error ":activate is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-threat-intel-set-request-activate
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "activate")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-threat-intel-set-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name "clientToken")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-threat-intel-set-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-threat-intel-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-threat-intel-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-threat-intel-set-request
                    'make-create-threat-intel-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-threat-intel-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-threat-intel-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activate))
      (common-lisp:list
       (common-lisp:cons "Activate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-threat-intel-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-threat-intel-set-response common-lisp:nil
                       ((threat-intel-set-id :initarg :threat-intel-set-id
                         :initform
                         (common-lisp:error ":threat-intel-set-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-threat-intel-set-response-threat-intel-set-id
                         :shape "String" :location common-lisp:nil
                         :location-name "threatIntelSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-threat-intel-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-threat-intel-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-threat-intel-set-response
                    'make-create-threat-intel-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-threat-intel-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-threat-intel-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threat-intel-set-id))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-threat-intel-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype criterion () 'common-lisp:hash-table)
 (common-lisp:defun make-criterion (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype criterion-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dnslogs-configuration-result common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-dnslogs-configuration-result-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dnslogs-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dnslogs-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dnslogs-configuration-result
                    'make-dnslogs-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dnslogs-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dnslogs-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dnslogs-configuration-result))
   common-lisp:nil))
(common-lisp:deftype data-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-source-configurations common-lisp:nil
                       ((s3logs :initarg :s3logs :initform common-lisp:nil
                         :type
                         (common-lisp:or s3logs-configuration common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-s3logs :shape
                         "S3LogsConfiguration" :location common-lisp:nil
                         :location-name "s3Logs")
                        (kubernetes :initarg :kubernetes :initform
                         common-lisp:nil :type
                         (common-lisp:or kubernetes-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-kubernetes
                         :shape "KubernetesConfiguration" :location
                         common-lisp:nil :location-name "kubernetes")
                        (malware-protection :initarg :malware-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or malware-protection-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-malware-protection
                         :shape "MalwareProtectionConfiguration" :location
                         common-lisp:nil :location-name "malwareProtection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-configurations
                    'make-data-source-configurations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes))
      (common-lisp:list
       (common-lisp:cons "Kubernetes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-protection))
      (common-lisp:list
       (common-lisp:cons "MalwareProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-configurations-result common-lisp:nil
                       ((cloud-trail :initarg :cloud-trail :initform
                         (common-lisp:error ":cloud-trail is required") :type
                         (common-lisp:or cloud-trail-configuration-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-result-cloud-trail
                         :shape "CloudTrailConfigurationResult" :location
                         common-lisp:nil :location-name "cloudTrail")
                        (dnslogs :initarg :dnslogs :initform
                         (common-lisp:error ":dnslogs is required") :type
                         (common-lisp:or dnslogs-configuration-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-result-dnslogs
                         :shape "DNSLogsConfigurationResult" :location
                         common-lisp:nil :location-name "dnsLogs")
                        (flow-logs :initarg :flow-logs :initform
                         (common-lisp:error ":flow-logs is required") :type
                         (common-lisp:or flow-logs-configuration-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-result-flow-logs
                         :shape "FlowLogsConfigurationResult" :location
                         common-lisp:nil :location-name "flowLogs")
                        (s3logs :initarg :s3logs :initform
                         (common-lisp:error ":s3logs is required") :type
                         (common-lisp:or s3logs-configuration-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-result-s3logs
                         :shape "S3LogsConfigurationResult" :location
                         common-lisp:nil :location-name "s3Logs")
                        (kubernetes :initarg :kubernetes :initform
                         common-lisp:nil :type
                         (common-lisp:or kubernetes-configuration-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-result-kubernetes
                         :shape "KubernetesConfigurationResult" :location
                         common-lisp:nil :location-name "kubernetes")
                        (malware-protection :initarg :malware-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          malware-protection-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-data-source-configurations-result-malware-protection
                         :shape "MalwareProtectionConfigurationResult"
                         :location common-lisp:nil :location-name
                         "malwareProtection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-configurations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-source-configurations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-configurations-result
                    'make-data-source-configurations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail))
      (common-lisp:list
       (common-lisp:cons "CloudTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnslogs))
      (common-lisp:list
       (common-lisp:cons "DNSLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs))
      (common-lisp:list
       (common-lisp:cons "FlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes))
      (common-lisp:list
       (common-lisp:cons "Kubernetes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-protection))
      (common-lisp:list
       (common-lisp:cons "MalwareProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configurations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-free-trial common-lisp:nil
                       ((free-trial-days-remaining :initarg
                         :free-trial-days-remaining :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-data-source-free-trial-free-trial-days-remaining
                         :shape "Integer" :location common-lisp:nil
                         :location-name "freeTrialDaysRemaining"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-free-trial
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-free-trial
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-free-trial 'make-data-source-free-trial))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-free-trial))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-free-trial))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'free-trial-days-remaining))
      (common-lisp:list
       (common-lisp:cons "FreeTrialDaysRemaining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-free-trial))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-list ()
   '(trivial-types:proper-list data-source))
 (common-lisp:defun make-data-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-sources-free-trial common-lisp:nil
                       ((cloud-trail :initarg :cloud-trail :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-sources-free-trial-cloud-trail
                         :shape "DataSourceFreeTrial" :location common-lisp:nil
                         :location-name "cloudTrail")
                        (dns-logs :initarg :dns-logs :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-sources-free-trial-dns-logs :shape
                         "DataSourceFreeTrial" :location common-lisp:nil
                         :location-name "dnsLogs")
                        (flow-logs :initarg :flow-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-sources-free-trial-flow-logs :shape
                         "DataSourceFreeTrial" :location common-lisp:nil
                         :location-name "flowLogs")
                        (s3logs :initarg :s3logs :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-free-trial
                                         common-lisp:null)
                         :accessor struct-shape-data-sources-free-trial-s3logs
                         :shape "DataSourceFreeTrial" :location common-lisp:nil
                         :location-name "s3Logs")
                        (kubernetes :initarg :kubernetes :initform
                         common-lisp:nil :type
                         (common-lisp:or kubernetes-data-source-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-sources-free-trial-kubernetes :shape
                         "KubernetesDataSourceFreeTrial" :location
                         common-lisp:nil :location-name "kubernetes")
                        (malware-protection :initarg :malware-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          malware-protection-data-source-free-trial
                          common-lisp:null)
                         :accessor
                         struct-shape-data-sources-free-trial-malware-protection
                         :shape "MalwareProtectionDataSourceFreeTrial"
                         :location common-lisp:nil :location-name
                         "malwareProtection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-sources-free-trial
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-sources-free-trial
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-sources-free-trial 'make-data-sources-free-trial))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-sources-free-trial))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-sources-free-trial))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail))
      (common-lisp:list
       (common-lisp:cons "CloudTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-logs))
      (common-lisp:list
       (common-lisp:cons "DnsLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs))
      (common-lisp:list
       (common-lisp:cons "FlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes))
      (common-lisp:list
       (common-lisp:cons "Kubernetes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-protection))
      (common-lisp:list
       (common-lisp:cons "MalwareProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-sources-free-trial))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decline-invitations-request common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-decline-invitations-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decline-invitations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'decline-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-request
                    'make-decline-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decline-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-decline-invitations-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decline-invitations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'decline-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-response
                    'make-decline-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-server-side-encryption common-lisp:nil
                       ((encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-default-server-side-encryption-encryption-type
                         :shape "String" :location common-lisp:nil
                         :location-name "encryptionType")
                        (kms-master-key-arn :initarg :kms-master-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-default-server-side-encryption-kms-master-key-arn
                         :shape "String" :location common-lisp:nil
                         :location-name "kmsMasterKeyArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-default-server-side-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-server-side-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'default-server-side-encryption
                    'make-default-server-side-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-server-side-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-server-side-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-server-side-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-detector-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-detector-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-detector-request 'make-delete-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-detector-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-detector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-detector-response 'make-delete-detector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-filter-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-filter-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filter-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-filter-request-filter-name :shape
                         "String" :location "uri" :location-name "filterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-filter-request 'make-delete-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-filter-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-filter-response 'make-delete-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ipset-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-ipset-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (ip-set-id :initarg :ip-set-id :initform
                         (common-lisp:error ":ip-set-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-ipset-request-ip-set-id :shape
                         "String" :location "uri" :location-name "ipSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-ipset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ipset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-ipset-request 'make-delete-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ipset-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-ipset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ipset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-ipset-response 'make-delete-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-invitations-request common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-delete-invitations-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-invitations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-request
                    'make-delete-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-delete-invitations-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-invitations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-response
                    'make-delete-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-members-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-delete-members-request-account-ids :shape
                         "AccountIds" :location common-lisp:nil :location-name
                         "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-members-request 'make-delete-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-delete-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-members-response 'make-delete-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-publishing-destination-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-publishing-destination-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (destination-id :initarg :destination-id :initform
                         (common-lisp:error ":destination-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-publishing-destination-request-destination-id
                         :shape "String" :location "uri" :location-name
                         "destinationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-publishing-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-publishing-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-publishing-destination-request
                    'make-delete-publishing-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-publishing-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-publishing-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-publishing-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-publishing-destination-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-publishing-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-publishing-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-publishing-destination-response
                    'make-delete-publishing-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-publishing-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-publishing-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-publishing-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-threat-intel-set-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-threat-intel-set-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (threat-intel-set-id :initarg :threat-intel-set-id
                         :initform
                         (common-lisp:error ":threat-intel-set-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-threat-intel-set-request-threat-intel-set-id
                         :shape "String" :location "uri" :location-name
                         "threatIntelSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-threat-intel-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-threat-intel-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-threat-intel-set-request
                    'make-delete-threat-intel-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-threat-intel-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-threat-intel-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-threat-intel-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-threat-intel-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-threat-intel-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-threat-intel-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-threat-intel-set-response
                    'make-delete-threat-intel-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-threat-intel-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-threat-intel-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-threat-intel-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-malware-scans-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-describe-malware-scans-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-malware-scans-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value-with-max
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-malware-scans-request-max-results
                         :shape "IntegerValueWithMax" :location common-lisp:nil
                         :location-name "maxResults")
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-criteria common-lisp:null)
                         :accessor
                         struct-shape-describe-malware-scans-request-filter-criteria
                         :shape "FilterCriteria" :location common-lisp:nil
                         :location-name "filterCriteria")
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor
                         struct-shape-describe-malware-scans-request-sort-criteria
                         :shape "SortCriteria" :location common-lisp:nil
                         :location-name "sortCriteria"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-malware-scans-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-malware-scans-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-malware-scans-request
                    'make-describe-malware-scans-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-malware-scans-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-malware-scans-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-malware-scans-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-malware-scans-response common-lisp:nil
                       ((scans :initarg :scans :initform
                         (common-lisp:error ":scans is required") :type
                         (common-lisp:or scans common-lisp:null) :accessor
                         struct-shape-describe-malware-scans-response-scans
                         :shape "Scans" :location common-lisp:nil
                         :location-name "scans")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-malware-scans-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-malware-scans-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-malware-scans-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-malware-scans-response
                    'make-describe-malware-scans-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-malware-scans-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-malware-scans-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scans))
      (common-lisp:list
       (common-lisp:cons "Scans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-malware-scans-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-request
                       common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-configuration-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-configuration-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-configuration-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-response
                       common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-organization-configuration-response-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable")
                        (member-account-limit-reached :initarg
                         :member-account-limit-reached :initform
                         (common-lisp:error
                          ":member-account-limit-reached is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-configuration-response-member-account-limit-reached
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "memberAccountLimitReached")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-data-source-configurations-result
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-configuration-response-data-sources
                         :shape "OrganizationDataSourceConfigurationsResult"
                         :location common-lisp:nil :location-name
                         "dataSources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          organization-features-configurations-results
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-configuration-response-features
                         :shape "OrganizationFeaturesConfigurationsResults"
                         :location common-lisp:nil :location-name "features")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-configuration-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken")
                        (auto-enable-organization-members :initarg
                         :auto-enable-organization-members :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-enable-members common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-configuration-response-auto-enable-organization-members
                         :shape "AutoEnableMembers" :location common-lisp:nil
                         :location-name "autoEnableOrganizationMembers"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-limit-reached))
      (common-lisp:list
       (common-lisp:cons "MemberAccountLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-organization-members))
      (common-lisp:list
       (common-lisp:cons "AutoEnableOrganizationMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-publishing-destination-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-describe-publishing-destination-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (destination-id :initarg :destination-id :initform
                         (common-lisp:error ":destination-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-publishing-destination-request-destination-id
                         :shape "String" :location "uri" :location-name
                         "destinationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-publishing-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-publishing-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-publishing-destination-request
                    'make-describe-publishing-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-publishing-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-publishing-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-publishing-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-publishing-destination-response common-lisp:nil
                       ((destination-id :initarg :destination-id :initform
                         (common-lisp:error ":destination-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-publishing-destination-response-destination-id
                         :shape "String" :location common-lisp:nil
                         :location-name "destinationId")
                        (destination-type :initarg :destination-type :initform
                         (common-lisp:error ":destination-type is required")
                         :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor
                         struct-shape-describe-publishing-destination-response-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name "destinationType")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or publishing-status common-lisp:null)
                         :accessor
                         struct-shape-describe-publishing-destination-response-status
                         :shape "PublishingStatus" :location common-lisp:nil
                         :location-name "status")
                        (publishing-failure-start-timestamp :initarg
                         :publishing-failure-start-timestamp :initform
                         (common-lisp:error
                          ":publishing-failure-start-timestamp is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-publishing-destination-response-publishing-failure-start-timestamp
                         :shape "Long" :location common-lisp:nil :location-name
                         "publishingFailureStartTimestamp")
                        (destination-properties :initarg
                         :destination-properties :initform
                         (common-lisp:error
                          ":destination-properties is required")
                         :type
                         (common-lisp:or destination-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-publishing-destination-response-destination-properties
                         :shape "DestinationProperties" :location
                         common-lisp:nil :location-name
                         "destinationProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-publishing-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-publishing-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-publishing-destination-response
                    'make-describe-publishing-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-publishing-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-publishing-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-id))
      (common-lisp:list
       (common-lisp:cons "DestinationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publishing-failure-start-timestamp))
      (common-lisp:list
       (common-lisp:cons "PublishingFailureStartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-properties))
      (common-lisp:list
       (common-lisp:cons "DestinationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-publishing-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((destination-id :initarg :destination-id :initform
                         (common-lisp:error ":destination-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-destination-destination-id
                         :shape "String" :location common-lisp:nil
                         :location-name "destinationId")
                        (destination-type :initarg :destination-type :initform
                         (common-lisp:error ":destination-type is required")
                         :type
                         (common-lisp:or destination-type common-lisp:null)
                         :accessor struct-shape-destination-destination-type
                         :shape "DestinationType" :location common-lisp:nil
                         :location-name "destinationType")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or publishing-status common-lisp:null)
                         :accessor struct-shape-destination-status :shape
                         "PublishingStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-id))
      (common-lisp:list
       (common-lisp:cons "DestinationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-properties common-lisp:nil
                       ((destination-arn :initarg :destination-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-destination-properties-destination-arn
                         :shape "String" :location common-lisp:nil
                         :location-name "destinationArn")
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-destination-properties-kms-key-arn :shape
                         "String" :location common-lisp:nil :location-name
                         "kmsKeyArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-properties 'make-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-properties))
   common-lisp:nil))
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destinations () '(trivial-types:proper-list destination))
 (common-lisp:defun make-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass detection common-lisp:nil
                       ((anomaly :initarg :anomaly :initform common-lisp:nil
                         :type (common-lisp:or anomaly common-lisp:null)
                         :accessor struct-shape-detection-anomaly :shape
                         "Anomaly" :location common-lisp:nil :location-name
                         "anomaly"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'detection 'make-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly))
      (common-lisp:list
       (common-lisp:cons "Anomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detector-additional-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-detector-additional-configuration-name
                         :shape "FeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-detector-additional-configuration-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detector-additional-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detector-additional-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detector-additional-configuration
                    'make-detector-additional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detector-additional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detector-additional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detector-additional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detector-additional-configuration-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-detector-additional-configuration-result-name
                         :shape "FeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-detector-additional-configuration-result-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status")
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-detector-additional-configuration-result-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name "updatedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detector-additional-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detector-additional-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detector-additional-configuration-result
                    'make-detector-additional-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detector-additional-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detector-additional-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detector-additional-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detector-additional-configuration-results ()
   '(trivial-types:proper-list detector-additional-configuration-result))
 (common-lisp:defun make-detector-additional-configuration-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detector-additional-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype detector-additional-configurations ()
   '(trivial-types:proper-list detector-additional-configuration))
 (common-lisp:defun make-detector-additional-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detector-additional-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detector-feature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detector-feature-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or detector-feature common-lisp:null)
                         :accessor
                         struct-shape-detector-feature-configuration-name
                         :shape "DetectorFeature" :location common-lisp:nil
                         :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-detector-feature-configuration-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or detector-additional-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-detector-feature-configuration-additional-configuration
                         :shape "DetectorAdditionalConfigurations" :location
                         common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detector-feature-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detector-feature-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detector-feature-configuration
                    'make-detector-feature-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detector-feature-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detector-feature-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detector-feature-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detector-feature-configuration-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or detector-feature-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-detector-feature-configuration-result-name
                         :shape "DetectorFeatureResult" :location
                         common-lisp:nil :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-detector-feature-configuration-result-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status")
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-detector-feature-configuration-result-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name "updatedAt")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          detector-additional-configuration-results
                          common-lisp:null)
                         :accessor
                         struct-shape-detector-feature-configuration-result-additional-configuration
                         :shape "DetectorAdditionalConfigurationResults"
                         :location common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detector-feature-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detector-feature-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detector-feature-configuration-result
                    'make-detector-feature-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detector-feature-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detector-feature-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detector-feature-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detector-feature-configurations ()
   '(trivial-types:proper-list detector-feature-configuration))
 (common-lisp:defun make-detector-feature-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detector-feature-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype detector-feature-configurations-results ()
   '(trivial-types:proper-list detector-feature-configuration-result))
 (common-lisp:defun make-detector-feature-configurations-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detector-feature-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detector-feature-result () 'common-lisp:string)
(common-lisp:deftype detector-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype detector-ids () '(trivial-types:proper-list detector-id))
 (common-lisp:defun make-detector-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detector-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detector-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disable-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         (common-lisp:error ":admin-account-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disable-organization-admin-account-request-admin-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name "adminAccountId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-organization-admin-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-request
                    'make-disable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-organization-admin-account-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-organization-admin-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-response
                    'make-disable-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-administrator-account-request
                       common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-from-administrator-account-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-from-administrator-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-administrator-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-request
                    'make-disassociate-from-administrator-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-administrator-account-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-from-administrator-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-administrator-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-response
                    'make-disassociate-from-administrator-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-master-account-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-from-master-account-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-from-master-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-master-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-request
                    'make-disassociate-from-master-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-master-account-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-from-master-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-master-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-response
                    'make-disassociate-from-master-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-members-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-disassociate-members-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-members-request
                    'make-disassociate-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-disassociate-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-members-response
                    'make-disassociate-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dns-request-action common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dns-request-action-domain
                         :shape "String" :location common-lisp:nil
                         :location-name "domain")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dns-request-action-protocol
                         :shape "String" :location common-lisp:nil
                         :location-name "protocol")
                        (blocked :initarg :blocked :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-dns-request-action-blocked
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "blocked")
                        (domain-with-suffix :initarg :domain-with-suffix
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dns-request-action-domain-with-suffix
                         :shape "String" :location common-lisp:nil
                         :location-name "domainWithSuffix"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dns-request-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dns-request-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dns-request-action 'make-dns-request-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-request-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-request-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-with-suffix))
      (common-lisp:list
       (common-lisp:cons "DomainWithSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-request-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-details common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-domain-details-domain :shape
                         "String" :location common-lisp:nil :location-name
                         "domain"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-details 'make-domain-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-details))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype ebs-snapshot-preservation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ebs-volume-details common-lisp:nil
                       ((scanned-volume-details :initarg
                         :scanned-volume-details :initform common-lisp:nil
                         :type (common-lisp:or volume-details common-lisp:null)
                         :accessor
                         struct-shape-ebs-volume-details-scanned-volume-details
                         :shape "VolumeDetails" :location common-lisp:nil
                         :location-name "scannedVolumeDetails")
                        (skipped-volume-details :initarg
                         :skipped-volume-details :initform common-lisp:nil
                         :type (common-lisp:or volume-details common-lisp:null)
                         :accessor
                         struct-shape-ebs-volume-details-skipped-volume-details
                         :shape "VolumeDetails" :location common-lisp:nil
                         :location-name "skippedVolumeDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-volume-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-volume-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-volume-details 'make-ebs-volume-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-volume-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-volume-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scanned-volume-details))
      (common-lisp:list
       (common-lisp:cons "ScannedVolumeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skipped-volume-details))
      (common-lisp:list
       (common-lisp:cons "SkippedVolumeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-volume-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebs-volume-scan-details common-lisp:nil
                       ((scan-id :initarg :scan-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ebs-volume-scan-details-scan-id
                         :shape "String" :location common-lisp:nil
                         :location-name "scanId")
                        (scan-started-at :initarg :scan-started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ebs-volume-scan-details-scan-started-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name "scanStartedAt")
                        (scan-completed-at :initarg :scan-completed-at
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ebs-volume-scan-details-scan-completed-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name "scanCompletedAt")
                        (trigger-finding-id :initarg :trigger-finding-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ebs-volume-scan-details-trigger-finding-id
                         :shape "String" :location common-lisp:nil
                         :location-name "triggerFindingId")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type (common-lisp:or sources common-lisp:null)
                         :accessor struct-shape-ebs-volume-scan-details-sources
                         :shape "Sources" :location common-lisp:nil
                         :location-name "sources")
                        (scan-detections :initarg :scan-detections :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-detections common-lisp:null)
                         :accessor
                         struct-shape-ebs-volume-scan-details-scan-detections
                         :shape "ScanDetections" :location common-lisp:nil
                         :location-name "scanDetections")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-type common-lisp:null) :accessor
                         struct-shape-ebs-volume-scan-details-scan-type :shape
                         "ScanType" :location common-lisp:nil :location-name
                         "scanType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-volume-scan-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-volume-scan-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-volume-scan-details 'make-ebs-volume-scan-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-scan-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-scan-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-id))
      (common-lisp:list
       (common-lisp:cons "ScanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-started-at))
      (common-lisp:list
       (common-lisp:cons "ScanStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-completed-at))
      (common-lisp:list
       (common-lisp:cons "ScanCompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-finding-id))
      (common-lisp:list
       (common-lisp:cons "TriggerFindingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-detections))
      (common-lisp:list
       (common-lisp:cons "ScanDetections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-scan-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebs-volumes-result common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor struct-shape-ebs-volumes-result-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name "status")
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ebs-volumes-result-reason
                         :shape "String" :location common-lisp:nil
                         :location-name "reason"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-volumes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-volumes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-volumes-result 'make-ebs-volumes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-volumes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-volumes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-volumes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-cluster-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-cluster-details-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-cluster-details-arn :shape "String"
                         :location common-lisp:nil :location-name "arn")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ecs-cluster-details-status
                         :shape "String" :location common-lisp:nil
                         :location-name "status")
                        (active-services-count :initarg :active-services-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ecs-cluster-details-active-services-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "activeServicesCount")
                        (registered-container-instances-count :initarg
                         :registered-container-instances-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ecs-cluster-details-registered-container-instances-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "registeredContainerInstancesCount")
                        (running-tasks-count :initarg :running-tasks-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ecs-cluster-details-running-tasks-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "runningTasksCount")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-ecs-cluster-details-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (task-details :initarg :task-details :initform
                         common-lisp:nil :type
                         (common-lisp:or ecs-task-details common-lisp:null)
                         :accessor
                         struct-shape-ecs-cluster-details-task-details :shape
                         "EcsTaskDetails" :location common-lisp:nil
                         :location-name "taskDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecs-cluster-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ecs-cluster-details 'make-ecs-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-services-count))
      (common-lisp:list
       (common-lisp:cons "ActiveServicesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-container-instances-count))
      (common-lisp:list
       (common-lisp:cons "RegisteredContainerInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "RunningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-details))
      (common-lisp:list
       (common-lisp:cons "TaskDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-task-details common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-task-details-arn :shape "String"
                         :location common-lisp:nil :location-name "arn")
                        (definition-arn :initarg :definition-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-task-details-definition-arn :shape
                         "String" :location common-lisp:nil :location-name
                         "definitionArn")
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ecs-task-details-version :shape
                         "String" :location common-lisp:nil :location-name
                         "version")
                        (task-created-at :initarg :task-created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ecs-task-details-task-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "createdAt")
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ecs-task-details-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "startedAt")
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-task-details-started-by :shape
                         "String" :location common-lisp:nil :location-name
                         "startedBy")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-ecs-task-details-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volumes common-lisp:null)
                         :accessor struct-shape-ecs-task-details-volumes :shape
                         "Volumes" :location common-lisp:nil :location-name
                         "volumes")
                        (containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or containers common-lisp:null) :accessor
                         struct-shape-ecs-task-details-containers :shape
                         "Containers" :location common-lisp:nil :location-name
                         "containers")
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-task-details-group :shape "String"
                         :location common-lisp:nil :location-name "group"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecs-task-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-task-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ecs-task-details 'make-ecs-task-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-arn))
      (common-lisp:list
       (common-lisp:cons "DefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-created-at))
      (common-lisp:list
       (common-lisp:cons "TaskCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "StartedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eks-cluster-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-eks-cluster-details-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-eks-cluster-details-arn :shape "String"
                         :location common-lisp:nil :location-name "arn")
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-eks-cluster-details-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name "vpcId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-eks-cluster-details-status
                         :shape "String" :location common-lisp:nil
                         :location-name "status")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-eks-cluster-details-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-eks-cluster-details-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "createdAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eks-cluster-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eks-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eks-cluster-details 'make-eks-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eks-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eks-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eks-cluster-details))
   common-lisp:nil))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :initform
                         (common-lisp:error ":admin-account-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enable-organization-admin-account-request-admin-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name "adminAccountId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-organization-admin-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-request
                    'make-enable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-organization-admin-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-response
                    'make-enable-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eq () '(trivial-types:proper-list string))
 (common-lisp:defun make-eq
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype equals () '(trivial-types:proper-list string))
 (common-lisp:defun make-equals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evidence common-lisp:nil
                       ((threat-intelligence-details :initarg
                         :threat-intelligence-details :initform common-lisp:nil
                         :type
                         (common-lisp:or threat-intelligence-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-evidence-threat-intelligence-details
                         :shape "ThreatIntelligenceDetails" :location
                         common-lisp:nil :location-name
                         "threatIntelligenceDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evidence
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evidence
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'evidence 'make-evidence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evidence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intelligence-details))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelligenceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evidence))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fargate-details common-lisp:nil
                       ((issues :initarg :issues :initform common-lisp:nil
                         :type (common-lisp:or issues common-lisp:null)
                         :accessor struct-shape-fargate-details-issues :shape
                         "Issues" :location common-lisp:nil :location-name
                         "issues")
                        (management-type :initarg :management-type :initform
                         common-lisp:nil :type
                         (common-lisp:or management-type common-lisp:null)
                         :accessor struct-shape-fargate-details-management-type
                         :shape "ManagementType" :location common-lisp:nil
                         :location-name "managementType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fargate-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fargate-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'fargate-details 'make-fargate-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fargate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fargate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "Issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'management-type))
      (common-lisp:list
       (common-lisp:cons "ManagementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fargate-details))
   common-lisp:nil))
(common-lisp:deftype feature-additional-configuration () 'common-lisp:string)
(common-lisp:deftype feature-status () 'common-lisp:string)
(common-lisp:deftype feedback () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-paths ()
   '(trivial-types:proper-list scan-file-path))
 (common-lisp:defun make-file-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scan-file-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-condition common-lisp:nil
                       ((equals-value :initarg :equals-value :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-filter-condition-equals-value
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name "equalsValue")
                        (greater-than :initarg :greater-than :initform
                         common-lisp:nil :type
                         (common-lisp:or long-value common-lisp:null) :accessor
                         struct-shape-filter-condition-greater-than :shape
                         "LongValue" :location common-lisp:nil :location-name
                         "greaterThan")
                        (less-than :initarg :less-than :initform
                         common-lisp:nil :type
                         (common-lisp:or long-value common-lisp:null) :accessor
                         struct-shape-filter-condition-less-than :shape
                         "LongValue" :location common-lisp:nil :location-name
                         "lessThan"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-condition 'make-filter-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals-value))
      (common-lisp:list
       (common-lisp:cons "EqualsValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greater-than))
      (common-lisp:list
       (common-lisp:cons "GreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'less-than))
      (common-lisp:list
       (common-lisp:cons "LessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-criteria common-lisp:nil
                       ((filter-criterion :initarg :filter-criterion :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-criterion-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-filter-criteria-filter-criterion :shape
                         "FilterCriterionList" :location common-lisp:nil
                         :location-name "filterCriterion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-criteria 'make-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criterion))
      (common-lisp:list
       (common-lisp:cons "FilterCriterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-criterion common-lisp:nil
                       ((criterion-key :initarg :criterion-key :initform
                         common-lisp:nil :type
                         (common-lisp:or criterion-key common-lisp:null)
                         :accessor struct-shape-filter-criterion-criterion-key
                         :shape "CriterionKey" :location common-lisp:nil
                         :location-name "criterionKey")
                        (filter-condition :initarg :filter-condition :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-condition common-lisp:null)
                         :accessor
                         struct-shape-filter-criterion-filter-condition :shape
                         "FilterCondition" :location common-lisp:nil
                         :location-name "filterCondition"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-criterion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-criterion 'make-filter-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criterion-key))
      (common-lisp:list
       (common-lisp:cons "CriterionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-condition))
      (common-lisp:list
       (common-lisp:cons "FilterCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-criterion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-criterion-list ()
   '(trivial-types:proper-list filter-criterion))
 (common-lisp:defun make-filter-criterion-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-criterion))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-description () 'common-lisp:string)
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-names () '(trivial-types:proper-list filter-name))
 (common-lisp:defun make-filter-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-rank () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass finding common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-account-id :shape "String"
                         :location common-lisp:nil :location-name "accountId")
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-arn :shape "String" :location
                         common-lisp:nil :location-name "arn")
                        (confidence :initarg :confidence :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-finding-confidence :shape "Double"
                         :location common-lisp:nil :location-name "confidence")
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":created-at is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-created-at :shape "String"
                         :location common-lisp:nil :location-name "createdAt")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-description :shape "String"
                         :location common-lisp:nil :location-name
                         "description")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-id :shape "String" :location
                         common-lisp:nil :location-name "id")
                        (partition :initarg :partition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-partition :shape "String"
                         :location common-lisp:nil :location-name "partition")
                        (region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-region :shape "String" :location
                         common-lisp:nil :location-name "region")
                        (resource :initarg :resource :initform
                         (common-lisp:error ":resource is required") :type
                         (common-lisp:or resource common-lisp:null) :accessor
                         struct-shape-finding-resource :shape "Resource"
                         :location common-lisp:nil :location-name "resource")
                        (schema-version :initarg :schema-version :initform
                         (common-lisp:error ":schema-version is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-finding-schema-version :shape
                         "String" :location common-lisp:nil :location-name
                         "schemaVersion")
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-finding-service :shape
                         "Service" :location common-lisp:nil :location-name
                         "service")
                        (severity :initarg :severity :initform
                         (common-lisp:error ":severity is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-finding-severity :shape "Double"
                         :location common-lisp:nil :location-name "severity")
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-title :shape "String" :location
                         common-lisp:nil :location-name "title")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or finding-type common-lisp:null)
                         :accessor struct-shape-finding-type :shape
                         "FindingType" :location common-lisp:nil :location-name
                         "type")
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updated-at is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-updated-at :shape "String"
                         :location common-lisp:nil :location-name "updatedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-criteria common-lisp:nil
                       ((criterion :initarg :criterion :initform
                         common-lisp:nil :type
                         (common-lisp:or criterion common-lisp:null) :accessor
                         struct-shape-finding-criteria-criterion :shape
                         "Criterion" :location common-lisp:nil :location-name
                         "criterion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'finding-criteria 'make-finding-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criterion))
      (common-lisp:list
       (common-lisp:cons "Criterion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-criteria))
   common-lisp:nil))
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-ids () '(trivial-types:proper-list finding-id))
 (common-lisp:defun make-finding-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-publishing-frequency () 'common-lisp:string)
(common-lisp:deftype finding-statistic-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-statistic-types ()
   '(trivial-types:proper-list finding-statistic-type))
 (common-lisp:defun make-finding-statistic-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-statistic-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding-statistics common-lisp:nil
                       ((count-by-severity :initarg :count-by-severity
                         :initform common-lisp:nil :type
                         (common-lisp:or count-by-severity common-lisp:null)
                         :accessor
                         struct-shape-finding-statistics-count-by-severity
                         :shape "CountBySeverity" :location common-lisp:nil
                         :location-name "countBySeverity"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'finding-statistics 'make-finding-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-by-severity))
      (common-lisp:list
       (common-lisp:cons "CountBySeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-statistics))
   common-lisp:nil))
(common-lisp:deftype finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-types ()
   '(trivial-types:proper-list finding-type))
 (common-lisp:defun make-finding-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype findings () '(trivial-types:proper-list finding))
 (common-lisp:defun make-findings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype flags-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-flags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass flow-logs-configuration-result common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-flow-logs-configuration-result-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flow-logs-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'flow-logs-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'flow-logs-configuration-result
                    'make-flow-logs-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flow-logs-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flow-logs-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flow-logs-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass free-trial-feature-configuration-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or free-trial-feature-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-free-trial-feature-configuration-result-name
                         :shape "FreeTrialFeatureResult" :location
                         common-lisp:nil :location-name "name")
                        (free-trial-days-remaining :initarg
                         :free-trial-days-remaining :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-free-trial-feature-configuration-result-free-trial-days-remaining
                         :shape "Integer" :location common-lisp:nil
                         :location-name "freeTrialDaysRemaining"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-free-trial-feature-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'free-trial-feature-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'free-trial-feature-configuration-result
                    'make-free-trial-feature-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-feature-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-feature-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'free-trial-days-remaining))
      (common-lisp:list
       (common-lisp:cons "FreeTrialDaysRemaining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          free-trial-feature-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype free-trial-feature-configurations-results ()
   '(trivial-types:proper-list free-trial-feature-configuration-result))
 (common-lisp:defun make-free-trial-feature-configurations-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            free-trial-feature-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype free-trial-feature-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass geo-location common-lisp:nil
                       ((lat :initarg :lat :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-geo-location-lat :shape "Double"
                         :location common-lisp:nil :location-name "lat")
                        (lon :initarg :lon :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-geo-location-lon :shape "Double"
                         :location common-lisp:nil :location-name "lon"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-geo-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'geo-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'geo-location 'make-geo-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lat))
      (common-lisp:list
       (common-lisp:cons "Lat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lon))
      (common-lisp:list
       (common-lisp:cons "Lon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-administrator-account-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-administrator-account-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-administrator-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-administrator-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-request
                    'make-get-administrator-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-administrator-account-response common-lisp:nil
                       ((administrator :initarg :administrator :initform
                         (common-lisp:error ":administrator is required") :type
                         (common-lisp:or administrator common-lisp:null)
                         :accessor
                         struct-shape-get-administrator-account-response-administrator
                         :shape "Administrator" :location common-lisp:nil
                         :location-name "administrator"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-administrator-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-administrator-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-response
                    'make-get-administrator-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator))
      (common-lisp:list
       (common-lisp:cons "Administrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-coverage-statistics-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-coverage-statistics-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-coverage-statistics-request-filter-criteria
                         :shape "CoverageFilterCriteria" :location
                         common-lisp:nil :location-name "filterCriteria")
                        (statistics-type :initarg :statistics-type :initform
                         (common-lisp:error ":statistics-type is required")
                         :type
                         (common-lisp:or coverage-statistics-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-coverage-statistics-request-statistics-type
                         :shape "CoverageStatisticsTypeList" :location
                         common-lisp:nil :location-name "statisticsType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-coverage-statistics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-coverage-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-coverage-statistics-request
                    'make-get-coverage-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-coverage-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-coverage-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-type))
      (common-lisp:list
       (common-lisp:cons "StatisticsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-coverage-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-coverage-statistics-response common-lisp:nil
                       ((coverage-statistics :initarg :coverage-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or coverage-statistics common-lisp:null)
                         :accessor
                         struct-shape-get-coverage-statistics-response-coverage-statistics
                         :shape "CoverageStatistics" :location common-lisp:nil
                         :location-name "coverageStatistics"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-coverage-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-coverage-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-coverage-statistics-response
                    'make-get-coverage-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-coverage-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-coverage-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-statistics))
      (common-lisp:list
       (common-lisp:cons "CoverageStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-coverage-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-detector-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-detector-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-detector-request 'make-get-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-detector-response common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-detector-response-created-at :shape
                         "String" :location common-lisp:nil :location-name
                         "createdAt")
                        (finding-publishing-frequency :initarg
                         :finding-publishing-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-publishing-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-detector-response-finding-publishing-frequency
                         :shape "FindingPublishingFrequency" :location
                         common-lisp:nil :location-name
                         "findingPublishingFrequency")
                        (service-role :initarg :service-role :initform
                         (common-lisp:error ":service-role is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-detector-response-service-role :shape
                         "String" :location common-lisp:nil :location-name
                         "serviceRole")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or detector-status common-lisp:null)
                         :accessor struct-shape-get-detector-response-status
                         :shape "DetectorStatus" :location common-lisp:nil
                         :location-name "status")
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-detector-response-updated-at :shape
                         "String" :location common-lisp:nil :location-name
                         "updatedAt")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configurations-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-detector-response-data-sources :shape
                         "DataSourceConfigurationsResult" :location
                         common-lisp:nil :location-name "dataSources")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-detector-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         "tags")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          detector-feature-configurations-results
                          common-lisp:null)
                         :accessor struct-shape-get-detector-response-features
                         :shape "DetectorFeatureConfigurationsResults"
                         :location common-lisp:nil :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-detector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-detector-response 'make-get-detector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "FindingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-filter-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-get-filter-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filter-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-filter-request-filter-name :shape
                         "String" :location "uri" :location-name "filterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-filter-request 'make-get-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-filter-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-get-filter-response-name :shape
                         "FilterName" :location common-lisp:nil :location-name
                         "name")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-description common-lisp:null)
                         :accessor struct-shape-get-filter-response-description
                         :shape "FilterDescription" :location common-lisp:nil
                         :location-name "description")
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or filter-action common-lisp:null)
                         :accessor struct-shape-get-filter-response-action
                         :shape "FilterAction" :location common-lisp:nil
                         :location-name "action")
                        (rank :initarg :rank :initform common-lisp:nil :type
                         (common-lisp:or filter-rank common-lisp:null)
                         :accessor struct-shape-get-filter-response-rank :shape
                         "FilterRank" :location common-lisp:nil :location-name
                         "rank")
                        (finding-criteria :initarg :finding-criteria :initform
                         (common-lisp:error ":finding-criteria is required")
                         :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         struct-shape-get-filter-response-finding-criteria
                         :shape "FindingCriteria" :location common-lisp:nil
                         :location-name "findingCriteria")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-filter-response-tags :shape "TagMap"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-filter-response 'make-get-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "FindingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-findings-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-ids :initarg :finding-ids :initform
                         (common-lisp:error ":finding-ids is required") :type
                         (common-lisp:or finding-ids common-lisp:null)
                         :accessor
                         struct-shape-get-findings-request-finding-ids :shape
                         "FindingIds" :location common-lisp:nil :location-name
                         "findingIds")
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor
                         struct-shape-get-findings-request-sort-criteria :shape
                         "SortCriteria" :location common-lisp:nil
                         :location-name "sortCriteria"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-findings-request 'make-get-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "FindingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-response common-lisp:nil
                       ((findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or findings common-lisp:null) :accessor
                         struct-shape-get-findings-response-findings :shape
                         "Findings" :location common-lisp:nil :location-name
                         "findings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-findings-response 'make-get-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "Findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-statistics-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-findings-statistics-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-statistic-types :initarg
                         :finding-statistic-types :initform
                         (common-lisp:error
                          ":finding-statistic-types is required")
                         :type
                         (common-lisp:or finding-statistic-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-findings-statistics-request-finding-statistic-types
                         :shape "FindingStatisticTypes" :location
                         common-lisp:nil :location-name
                         "findingStatisticTypes")
                        (finding-criteria :initarg :finding-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         struct-shape-get-findings-statistics-request-finding-criteria
                         :shape "FindingCriteria" :location common-lisp:nil
                         :location-name "findingCriteria"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-findings-statistics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-findings-statistics-request
                    'make-get-findings-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-statistic-types))
      (common-lisp:list
       (common-lisp:cons "FindingStatisticTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "FindingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-statistics-response common-lisp:nil
                       ((finding-statistics :initarg :finding-statistics
                         :initform
                         (common-lisp:error ":finding-statistics is required")
                         :type
                         (common-lisp:or finding-statistics common-lisp:null)
                         :accessor
                         struct-shape-get-findings-statistics-response-finding-statistics
                         :shape "FindingStatistics" :location common-lisp:nil
                         :location-name "findingStatistics"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-findings-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-findings-statistics-response
                    'make-get-findings-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-statistics))
      (common-lisp:list
       (common-lisp:cons "FindingStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ipset-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-get-ipset-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (ip-set-id :initarg :ip-set-id :initform
                         (common-lisp:error ":ip-set-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-ipset-request-ip-set-id :shape
                         "String" :location "uri" :location-name "ipSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-ipset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-ipset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-ipset-request 'make-get-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ipset-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-ipset-response-name :shape "Name"
                         :location common-lisp:nil :location-name "name")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or ip-set-format common-lisp:null)
                         :accessor struct-shape-get-ipset-response-format
                         :shape "IpSetFormat" :location common-lisp:nil
                         :location-name "format")
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location common-lisp:null) :accessor
                         struct-shape-get-ipset-response-location :shape
                         "Location" :location common-lisp:nil :location-name
                         "location")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or ip-set-status common-lisp:null)
                         :accessor struct-shape-get-ipset-response-status
                         :shape "IpSetStatus" :location common-lisp:nil
                         :location-name "status")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-ipset-response-tags :shape "TagMap"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-ipset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-ipset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-ipset-response 'make-get-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitations-count-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-invitations-count-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitations-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-request
                    'make-get-invitations-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitations-count-response common-lisp:nil
                       ((invitations-count :initarg :invitations-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-invitations-count-response-invitations-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "invitationsCount"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-invitations-count-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitations-count-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-response
                    'make-get-invitations-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations-count))
      (common-lisp:list
       (common-lisp:cons "InvitationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-malware-scan-settings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-malware-scan-settings-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-malware-scan-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-malware-scan-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-malware-scan-settings-request
                    'make-get-malware-scan-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-malware-scan-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-malware-scan-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-malware-scan-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-malware-scan-settings-response common-lisp:nil
                       ((scan-resource-criteria :initarg
                         :scan-resource-criteria :initform common-lisp:nil
                         :type
                         (common-lisp:or scan-resource-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-malware-scan-settings-response-scan-resource-criteria
                         :shape "ScanResourceCriteria" :location
                         common-lisp:nil :location-name "scanResourceCriteria")
                        (ebs-snapshot-preservation :initarg
                         :ebs-snapshot-preservation :initform common-lisp:nil
                         :type
                         (common-lisp:or ebs-snapshot-preservation
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-malware-scan-settings-response-ebs-snapshot-preservation
                         :shape "EbsSnapshotPreservation" :location
                         common-lisp:nil :location-name
                         "ebsSnapshotPreservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-malware-scan-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-malware-scan-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-malware-scan-settings-response
                    'make-get-malware-scan-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-malware-scan-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-malware-scan-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-resource-criteria))
      (common-lisp:list
       (common-lisp:cons "ScanResourceCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-snapshot-preservation))
      (common-lisp:list
       (common-lisp:cons "EbsSnapshotPreservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-malware-scan-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-master-account-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-master-account-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-master-account-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-master-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-master-account-request
                    'make-get-master-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-master-account-response common-lisp:nil
                       ((master :initarg :master :initform
                         (common-lisp:error ":master is required") :type
                         (common-lisp:or master common-lisp:null) :accessor
                         struct-shape-get-master-account-response-master :shape
                         "Master" :location common-lisp:nil :location-name
                         "master"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-master-account-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-master-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-master-account-response
                    'make-get-master-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master))
      (common-lisp:list
       (common-lisp:cons "Master"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-member-detectors-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-member-detectors-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-get-member-detectors-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-member-detectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-member-detectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-member-detectors-request
                    'make-get-member-detectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-member-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-member-detectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-member-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-member-detectors-response common-lisp:nil
                       ((member-data-source-configurations :initarg
                         :member-data-source-configurations :initform
                         (common-lisp:error
                          ":member-data-source-configurations is required")
                         :type
                         (common-lisp:or member-data-source-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-member-detectors-response-member-data-source-configurations
                         :shape "MemberDataSourceConfigurations" :location
                         common-lisp:nil :location-name "members")
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-get-member-detectors-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-member-detectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-member-detectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-member-detectors-response
                    'make-get-member-detectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-member-detectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-member-detectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-data-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MemberDataSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-member-detectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-get-members-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor struct-shape-get-members-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-members-request 'make-get-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-members-response common-lisp:nil
                       ((members :initarg :members :initform
                         (common-lisp:error ":members is required") :type
                         (common-lisp:or members common-lisp:null) :accessor
                         struct-shape-get-members-response-members :shape
                         "Members" :location common-lisp:nil :location-name
                         "members")
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-get-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-members-response 'make-get-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-statistics-response common-lisp:nil
                       ((organization-details :initarg :organization-details
                         :initform common-lisp:nil :type
                         (common-lisp:or organization-details common-lisp:null)
                         :accessor
                         struct-shape-get-organization-statistics-response-organization-details
                         :shape "OrganizationDetails" :location common-lisp:nil
                         :location-name "organizationDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-statistics-response
                    'make-get-organization-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-details))
      (common-lisp:list
       (common-lisp:cons "OrganizationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-remaining-free-trial-days-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-remaining-free-trial-days-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-get-remaining-free-trial-days-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-remaining-free-trial-days-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-remaining-free-trial-days-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-remaining-free-trial-days-request
                    'make-get-remaining-free-trial-days-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-remaining-free-trial-days-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-remaining-free-trial-days-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-remaining-free-trial-days-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-remaining-free-trial-days-response common-lisp:nil
                       ((accounts :initarg :accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or account-free-trial-infos
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-remaining-free-trial-days-response-accounts
                         :shape "AccountFreeTrialInfos" :location
                         common-lisp:nil :location-name "accounts")
                        (unprocessed-accounts :initarg :unprocessed-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-get-remaining-free-trial-days-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-remaining-free-trial-days-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-remaining-free-trial-days-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-remaining-free-trial-days-response
                    'make-get-remaining-free-trial-days-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-remaining-free-trial-days-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-remaining-free-trial-days-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-remaining-free-trial-days-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-threat-intel-set-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-threat-intel-set-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (threat-intel-set-id :initarg :threat-intel-set-id
                         :initform
                         (common-lisp:error ":threat-intel-set-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-threat-intel-set-request-threat-intel-set-id
                         :shape "String" :location "uri" :location-name
                         "threatIntelSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-threat-intel-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-threat-intel-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-threat-intel-set-request
                    'make-get-threat-intel-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-threat-intel-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-threat-intel-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-threat-intel-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-threat-intel-set-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-threat-intel-set-response-name :shape
                         "Name" :location common-lisp:nil :location-name
                         "name")
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or threat-intel-set-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-threat-intel-set-response-format
                         :shape "ThreatIntelSetFormat" :location
                         common-lisp:nil :location-name "format")
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or location common-lisp:null) :accessor
                         struct-shape-get-threat-intel-set-response-location
                         :shape "Location" :location common-lisp:nil
                         :location-name "location")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or threat-intel-set-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-threat-intel-set-response-status
                         :shape "ThreatIntelSetStatus" :location
                         common-lisp:nil :location-name "status")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-threat-intel-set-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-threat-intel-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-threat-intel-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-threat-intel-set-response
                    'make-get-threat-intel-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-threat-intel-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-threat-intel-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-threat-intel-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-statistics-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-get-usage-statistics-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (usage-statistic-type :initarg :usage-statistic-type
                         :initform
                         (common-lisp:error
                          ":usage-statistic-type is required")
                         :type
                         (common-lisp:or usage-statistic-type common-lisp:null)
                         :accessor
                         struct-shape-get-usage-statistics-request-usage-statistic-type
                         :shape "UsageStatisticType" :location common-lisp:nil
                         :location-name "usageStatisticsType")
                        (usage-criteria :initarg :usage-criteria :initform
                         (common-lisp:error ":usage-criteria is required")
                         :type (common-lisp:or usage-criteria common-lisp:null)
                         :accessor
                         struct-shape-get-usage-statistics-request-usage-criteria
                         :shape "UsageCriteria" :location common-lisp:nil
                         :location-name "usageCriteria")
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-usage-statistics-request-unit :shape
                         "String" :location common-lisp:nil :location-name
                         "unit")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-usage-statistics-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-usage-statistics-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-usage-statistics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-usage-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-usage-statistics-request
                    'make-get-usage-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'usage-statistic-type))
      (common-lisp:list
       (common-lisp:cons "UsageStatisticType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-criteria))
      (common-lisp:list
       (common-lisp:cons "UsageCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-statistics-response common-lisp:nil
                       ((usage-statistics :initarg :usage-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-statistics common-lisp:null)
                         :accessor
                         struct-shape-get-usage-statistics-response-usage-statistics
                         :shape "UsageStatistics" :location common-lisp:nil
                         :location-name "usageStatistics")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-usage-statistics-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-usage-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-usage-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-usage-statistics-response
                    'make-get-usage-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-statistics))
      (common-lisp:list
       (common-lisp:cons "UsageStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list string))
 (common-lisp:defun make-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype guard-duty-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass highest-severity-threat-details common-lisp:nil
                       ((severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-highest-severity-threat-details-severity
                         :shape "String" :location common-lisp:nil
                         :location-name "severity")
                        (threat-name :initarg :threat-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-highest-severity-threat-details-threat-name
                         :shape "String" :location common-lisp:nil
                         :location-name "threatName")
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-highest-severity-threat-details-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "count"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-highest-severity-threat-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'highest-severity-threat-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'highest-severity-threat-details
                    'make-highest-severity-threat-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          highest-severity-threat-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          highest-severity-threat-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threat-name))
      (common-lisp:list
       (common-lisp:cons "ThreatName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          highest-severity-threat-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass host-path common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-host-path-path :shape "String" :location
                         common-lisp:nil :location-name "path"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-host-path
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'host-path
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'host-path 'make-host-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iam-instance-profile common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-iam-instance-profile-arn :shape "String"
                         :location common-lisp:nil :location-name "arn")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-iam-instance-profile-id :shape "String"
                         :location common-lisp:nil :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iam-instance-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iam-instance-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iam-instance-profile 'make-iam-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass impersonated-user common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-impersonated-user-username
                         :shape "String" :location common-lisp:nil
                         :location-name "username")
                        (groups :initarg :groups :initform common-lisp:nil
                         :type (common-lisp:or groups common-lisp:null)
                         :accessor struct-shape-impersonated-user-groups :shape
                         "Groups" :location common-lisp:nil :location-name
                         "groups"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-impersonated-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'impersonated-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'impersonated-user 'make-impersonated-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impersonated-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impersonated-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impersonated-user))
   common-lisp:nil))
(common-lisp:deftype instance-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-details common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         "availabilityZone")
                        (iam-instance-profile :initarg :iam-instance-profile
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-instance-profile common-lisp:null)
                         :accessor
                         struct-shape-instance-details-iam-instance-profile
                         :shape "IamInstanceProfile" :location common-lisp:nil
                         :location-name "iamInstanceProfile")
                        (image-description :initarg :image-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-image-description :shape
                         "String" :location common-lisp:nil :location-name
                         "imageDescription")
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-details-image-id
                         :shape "String" :location common-lisp:nil
                         :location-name "imageId")
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         "instanceId")
                        (instance-state :initarg :instance-state :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-instance-state :shape
                         "String" :location common-lisp:nil :location-name
                         "instanceState")
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-instance-type :shape
                         "String" :location common-lisp:nil :location-name
                         "instanceType")
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-outpost-arn :shape
                         "String" :location common-lisp:nil :location-name
                         "outpostArn")
                        (launch-time :initarg :launch-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-details-launch-time :shape
                         "String" :location common-lisp:nil :location-name
                         "launchTime")
                        (network-interfaces :initarg :network-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         struct-shape-instance-details-network-interfaces
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name "networkInterfaces")
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-details-platform
                         :shape "String" :location common-lisp:nil
                         :location-name "platform")
                        (product-codes :initarg :product-codes :initform
                         common-lisp:nil :type
                         (common-lisp:or product-codes common-lisp:null)
                         :accessor struct-shape-instance-details-product-codes
                         :shape "ProductCodes" :location common-lisp:nil
                         :location-name "productCodes")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-instance-details-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-details 'make-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-description))
      (common-lisp:list
       (common-lisp:cons "ImageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-details))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-value-with-max () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (guardduty-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)
      (type :initarg :type :initform common-lisp:nil :reader
       internal-server-error-exception-type)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message
                    'internal-server-error-exception-type)))
(common-lisp:progn
 (common-lisp:defclass invitation common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-invitation-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name "accountId")
                        (invitation-id :initarg :invitation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invitation-invitation-id :shape "String"
                         :location common-lisp:nil :location-name
                         "invitationId")
                        (relationship-status :initarg :relationship-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invitation-relationship-status :shape
                         "String" :location common-lisp:nil :location-name
                         "relationshipStatus")
                        (invited-at :initarg :invited-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invitation-invited-at :shape "String"
                         :location common-lisp:nil :location-name "invitedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invitation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invitation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "RelationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invitations () '(trivial-types:proper-list invitation))
 (common-lisp:defun make-invitations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass invite-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-invite-members-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-invite-members-request-account-ids :shape
                         "AccountIds" :location common-lisp:nil :location-name
                         "accountIds")
                        (disable-email-notification :initarg
                         :disable-email-notification :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-invite-members-request-disable-email-notification
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "disableEmailNotification")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-invite-members-request-message
                         :shape "String" :location common-lisp:nil
                         :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invite-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invite-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invite-members-request 'make-invite-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-email-notification))
      (common-lisp:list
       (common-lisp:cons "DisableEmailNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invite-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-invite-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invite-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invite-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invite-members-response 'make-invite-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   common-lisp:nil))
(common-lisp:deftype ip-set-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-set-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-ip-set-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipv6addresses () '(trivial-types:proper-list string))
 (common-lisp:defun make-ipv6addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype issues () '(trivial-types:proper-list string))
 (common-lisp:defun make-issues
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kubernetes-api-call-action common-lisp:nil
                       ((request-uri :initarg :request-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-request-uri
                         :shape "String" :location common-lisp:nil
                         :location-name "requestUri")
                        (verb :initarg :verb :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-verb :shape
                         "String" :location common-lisp:nil :location-name
                         "verb")
                        (source-ips :initarg :source-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ips common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-source-ips
                         :shape "SourceIps" :location common-lisp:nil
                         :location-name "sourceIps")
                        (user-agent :initarg :user-agent :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-user-agent
                         :shape "String" :location common-lisp:nil
                         :location-name "userAgent")
                        (remote-ip-details :initarg :remote-ip-details
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-ip-details common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-api-call-action-remote-ip-details
                         :shape "RemoteIpDetails" :location common-lisp:nil
                         :location-name "remoteIpDetails")
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-status-code
                         :shape "Integer" :location common-lisp:nil
                         :location-name "statusCode")
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-parameters
                         :shape "String" :location common-lisp:nil
                         :location-name "parameters")
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-api-call-action-resource
                         :shape "String" :location common-lisp:nil
                         :location-name "resource")
                        (subresource :initarg :subresource :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-subresource
                         :shape "String" :location common-lisp:nil
                         :location-name "subresource")
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name "namespace")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-api-call-action-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-api-call-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kubernetes-api-call-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-api-call-action
                    'make-kubernetes-api-call-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-api-call-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-api-call-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-uri))
      (common-lisp:list
       (common-lisp:cons "RequestUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verb))
      (common-lisp:list
       (common-lisp:cons "Verb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ips))
      (common-lisp:list
       (common-lisp:cons "SourceIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "UserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subresource))
      (common-lisp:list
       (common-lisp:cons "Subresource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-api-call-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-audit-logs-configuration common-lisp:nil
                       ((enable :initarg :enable :initform
                         (common-lisp:error ":enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-kubernetes-audit-logs-configuration-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "enable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-audit-logs-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-audit-logs-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-audit-logs-configuration
                    'make-kubernetes-audit-logs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-audit-logs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-audit-logs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-audit-logs-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-audit-logs-configuration-result
                       common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-audit-logs-configuration-result-status
                         :shape "DataSourceStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-audit-logs-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-audit-logs-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-audit-logs-configuration-result
                    'make-kubernetes-audit-logs-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-audit-logs-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-audit-logs-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-audit-logs-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-configuration common-lisp:nil
                       ((audit-logs :initarg :audit-logs :initform
                         (common-lisp:error ":audit-logs is required") :type
                         (common-lisp:or kubernetes-audit-logs-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-configuration-audit-logs
                         :shape "KubernetesAuditLogsConfiguration" :location
                         common-lisp:nil :location-name "auditLogs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kubernetes-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-configuration 'make-kubernetes-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-configuration-result common-lisp:nil
                       ((audit-logs :initarg :audit-logs :initform
                         (common-lisp:error ":audit-logs is required") :type
                         (common-lisp:or
                          kubernetes-audit-logs-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-configuration-result-audit-logs
                         :shape "KubernetesAuditLogsConfigurationResult"
                         :location common-lisp:nil :location-name "auditLogs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-configuration-result
                    'make-kubernetes-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-data-source-free-trial common-lisp:nil
                       ((audit-logs :initarg :audit-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-data-source-free-trial-audit-logs
                         :shape "DataSourceFreeTrial" :location common-lisp:nil
                         :location-name "auditLogs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-data-source-free-trial
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-data-source-free-trial
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-data-source-free-trial
                    'make-kubernetes-data-source-free-trial))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-data-source-free-trial))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-data-source-free-trial))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-data-source-free-trial))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-details common-lisp:nil
                       ((kubernetes-user-details :initarg
                         :kubernetes-user-details :initform common-lisp:nil
                         :type
                         (common-lisp:or kubernetes-user-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-details-kubernetes-user-details
                         :shape "KubernetesUserDetails" :location
                         common-lisp:nil :location-name
                         "kubernetesUserDetails")
                        (kubernetes-workload-details :initarg
                         :kubernetes-workload-details :initform common-lisp:nil
                         :type
                         (common-lisp:or kubernetes-workload-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-details-kubernetes-workload-details
                         :shape "KubernetesWorkloadDetails" :location
                         common-lisp:nil :location-name
                         "kubernetesWorkloadDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kubernetes-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-details 'make-kubernetes-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kubernetes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kubernetes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-user-details))
      (common-lisp:list
       (common-lisp:cons "KubernetesUserDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-workload-details))
      (common-lisp:list
       (common-lisp:cons "KubernetesWorkloadDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kubernetes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-permission-checked-details common-lisp:nil
                       ((verb :initarg :verb :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-permission-checked-details-verb
                         :shape "String" :location common-lisp:nil
                         :location-name "verb")
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-permission-checked-details-resource
                         :shape "String" :location common-lisp:nil
                         :location-name "resource")
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-permission-checked-details-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name "namespace")
                        (allowed :initarg :allowed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-permission-checked-details-allowed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "allowed"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-permission-checked-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-permission-checked-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-permission-checked-details
                    'make-kubernetes-permission-checked-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-permission-checked-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-permission-checked-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verb))
      (common-lisp:list
       (common-lisp:cons "Verb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed))
      (common-lisp:list
       (common-lisp:cons "Allowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-permission-checked-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-role-binding-details common-lisp:nil
                       ((kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-binding-details-kind
                         :shape "String" :location common-lisp:nil
                         :location-name "kind")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-binding-details-name
                         :shape "String" :location common-lisp:nil
                         :location-name "name")
                        (uid :initarg :uid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-binding-details-uid
                         :shape "String" :location common-lisp:nil
                         :location-name "uid")
                        (role-ref-name :initarg :role-ref-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-binding-details-role-ref-name
                         :shape "String" :location common-lisp:nil
                         :location-name "roleRefName")
                        (role-ref-kind :initarg :role-ref-kind :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-binding-details-role-ref-kind
                         :shape "String" :location common-lisp:nil
                         :location-name "roleRefKind"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-role-binding-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-role-binding-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-role-binding-details
                    'make-kubernetes-role-binding-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-role-binding-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-role-binding-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "Kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-ref-name))
      (common-lisp:list
       (common-lisp:cons "RoleRefName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-ref-kind))
      (common-lisp:list
       (common-lisp:cons "RoleRefKind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-role-binding-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-role-details common-lisp:nil
                       ((kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-details-kind :shape
                         "String" :location common-lisp:nil :location-name
                         "kind")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-details-name :shape
                         "String" :location common-lisp:nil :location-name
                         "name")
                        (uid :initarg :uid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-role-details-uid :shape
                         "String" :location common-lisp:nil :location-name
                         "uid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-role-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kubernetes-role-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-role-details 'make-kubernetes-role-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-role-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-role-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "Kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-role-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-user-details common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-user-details-username :shape
                         "String" :location common-lisp:nil :location-name
                         "username")
                        (uid :initarg :uid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-user-details-uid :shape
                         "String" :location common-lisp:nil :location-name
                         "uid")
                        (groups :initarg :groups :initform common-lisp:nil
                         :type (common-lisp:or groups common-lisp:null)
                         :accessor struct-shape-kubernetes-user-details-groups
                         :shape "Groups" :location common-lisp:nil
                         :location-name "groups")
                        (session-name :initarg :session-name :initform
                         common-lisp:nil :type
                         (common-lisp:or session-name-list common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-user-details-session-name
                         :shape "SessionNameList" :location common-lisp:nil
                         :location-name "sessionName")
                        (impersonated-user :initarg :impersonated-user
                         :initform common-lisp:nil :type
                         (common-lisp:or impersonated-user common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-user-details-impersonated-user
                         :shape "ImpersonatedUser" :location common-lisp:nil
                         :location-name "impersonatedUser"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-user-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kubernetes-user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-user-details 'make-kubernetes-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-name))
      (common-lisp:list
       (common-lisp:cons "SessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impersonated-user))
      (common-lisp:list
       (common-lisp:cons "ImpersonatedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-user-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-workload-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-name :shape
                         "String" :location common-lisp:nil :location-name
                         "name")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-type :shape
                         "String" :location common-lisp:nil :location-name
                         "type")
                        (uid :initarg :uid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-uid :shape
                         "String" :location common-lisp:nil :location-name
                         "uid")
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name "namespace")
                        (host-network :initarg :host-network :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-host-network
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "hostNetwork")
                        (containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or containers common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-containers
                         :shape "Containers" :location common-lisp:nil
                         :location-name "containers")
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volumes common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-workload-details-volumes
                         :shape "Volumes" :location common-lisp:nil
                         :location-name "volumes")
                        (service-account-name :initarg :service-account-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kubernetes-workload-details-service-account-name
                         :shape "String" :location common-lisp:nil
                         :location-name "serviceAccountName")
                        (host-ipc :initarg :host-ipc :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-workload-details-host-ipc
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "hostIPC")
                        (host-pid :initarg :host-pid :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-kubernetes-workload-details-host-pid
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "hostPID"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kubernetes-workload-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kubernetes-workload-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kubernetes-workload-details
                    'make-kubernetes-workload-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-workload-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-workload-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-network))
      (common-lisp:list
       (common-lisp:cons "HostNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-name))
      (common-lisp:list
       (common-lisp:cons "ServiceAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-ipc))
      (common-lisp:list
       (common-lisp:cons "HostIPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-pid))
      (common-lisp:list
       (common-lisp:cons "HostPID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-workload-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-details common-lisp:nil
                       ((function-arn :initarg :function-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-details-function-arn :shape
                         "String" :location common-lisp:nil :location-name
                         "functionArn")
                        (function-name :initarg :function-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-details-function-name :shape
                         "String" :location common-lisp:nil :location-name
                         "functionName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-details-description :shape
                         "String" :location common-lisp:nil :location-name
                         "description")
                        (last-modified-at :initarg :last-modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lambda-details-last-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "lastModifiedAt")
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-details-revision-id :shape
                         "String" :location common-lisp:nil :location-name
                         "revisionId")
                        (function-version :initarg :function-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-details-function-version :shape
                         "String" :location common-lisp:nil :location-name
                         "functionVersion")
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lambda-details-role :shape "String"
                         :location common-lisp:nil :location-name "role")
                        (vpc-config :initarg :vpc-config :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         struct-shape-lambda-details-vpc-config :shape
                         "VpcConfig" :location common-lisp:nil :location-name
                         "vpcConfig")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-lambda-details-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-details 'make-lambda-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lineage () '(trivial-types:proper-list lineage-object))
 (common-lisp:defun make-lineage
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lineage-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lineage-object common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lineage-object-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "startTime")
                        (namespace-pid :initarg :namespace-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-lineage-object-namespace-pid :shape
                         "Integer" :location common-lisp:nil :location-name
                         "namespacePid")
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-lineage-object-user-id :shape
                         "Integer" :location common-lisp:nil :location-name
                         "userId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lineage-object-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (pid :initarg :pid :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-lineage-object-pid :shape "Integer"
                         :location common-lisp:nil :location-name "pid")
                        (uuid :initarg :uuid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lineage-object-uuid :shape "String"
                         :location common-lisp:nil :location-name "uuid")
                        (executable-path :initarg :executable-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lineage-object-executable-path :shape
                         "String" :location common-lisp:nil :location-name
                         "executablePath")
                        (euid :initarg :euid :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-lineage-object-euid :shape "Integer"
                         :location common-lisp:nil :location-name "euid")
                        (parent-uuid :initarg :parent-uuid :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-lineage-object-parent-uuid :shape
                         "String" :location common-lisp:nil :location-name
                         "parentUuid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lineage-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lineage-object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lineage-object 'make-lineage-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lineage-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lineage-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-pid))
      (common-lisp:list
       (common-lisp:cons "NamespacePid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uuid))
      (common-lisp:list
       (common-lisp:cons "Uuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executable-path))
      (common-lisp:list
       (common-lisp:cons "ExecutablePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'euid))
      (common-lisp:list
       (common-lisp:cons "Euid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-uuid))
      (common-lisp:list
       (common-lisp:cons "ParentUuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lineage-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-coverage-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-list-coverage-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-coverage-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-coverage-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         "maxResults")
                        (filter-criteria :initarg :filter-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-coverage-request-filter-criteria
                         :shape "CoverageFilterCriteria" :location
                         common-lisp:nil :location-name "filterCriteria")
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-sort-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-coverage-request-sort-criteria
                         :shape "CoverageSortCriteria" :location
                         common-lisp:nil :location-name "sortCriteria"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-coverage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-coverage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-coverage-request 'make-list-coverage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-criteria))
      (common-lisp:list
       (common-lisp:cons "FilterCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-coverage-response common-lisp:nil
                       ((resources :initarg :resources :initform
                         (common-lisp:error ":resources is required") :type
                         (common-lisp:or coverage-resources common-lisp:null)
                         :accessor
                         struct-shape-list-coverage-response-resources :shape
                         "CoverageResources" :location common-lisp:nil
                         :location-name "resources")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-coverage-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-coverage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-coverage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-coverage-response 'make-list-coverage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-coverage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-detectors-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-detectors-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-detectors-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-detectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-detectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-detectors-request 'make-list-detectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-detectors-response common-lisp:nil
                       ((detector-ids :initarg :detector-ids :initform
                         (common-lisp:error ":detector-ids is required") :type
                         (common-lisp:or detector-ids common-lisp:null)
                         :accessor
                         struct-shape-list-detectors-response-detector-ids
                         :shape "DetectorIds" :location common-lisp:nil
                         :location-name "detectorIds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-detectors-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-detectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-detectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-detectors-response 'make-list-detectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-ids))
      (common-lisp:list
       (common-lisp:cons "DetectorIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-filters-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-list-filters-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-filters-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-filters-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-filters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-filters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-filters-request 'make-list-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-filters-response common-lisp:nil
                       ((filter-names :initarg :filter-names :initform
                         (common-lisp:error ":filter-names is required") :type
                         (common-lisp:or filter-names common-lisp:null)
                         :accessor
                         struct-shape-list-filters-response-filter-names :shape
                         "FilterNames" :location common-lisp:nil :location-name
                         "filterNames")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-filters-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-filters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-filters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-filters-response 'make-list-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-names))
      (common-lisp:list
       (common-lisp:cons "FilterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-filters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-list-findings-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-criteria :initarg :finding-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         struct-shape-list-findings-request-finding-criteria
                         :shape "FindingCriteria" :location common-lisp:nil
                         :location-name "findingCriteria")
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor
                         struct-shape-list-findings-request-sort-criteria
                         :shape "SortCriteria" :location common-lisp:nil
                         :location-name "sortCriteria")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-findings-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-findings-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "FindingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-response common-lisp:nil
                       ((finding-ids :initarg :finding-ids :initform
                         (common-lisp:error ":finding-ids is required") :type
                         (common-lisp:or finding-ids common-lisp:null)
                         :accessor
                         struct-shape-list-findings-response-finding-ids :shape
                         "FindingIds" :location common-lisp:nil :location-name
                         "findingIds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-findings-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "FindingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ipsets-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-list-ipsets-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-ipsets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-ipsets-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-ipsets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-ipsets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-ipsets-request 'make-list-ipsets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ipsets-response common-lisp:nil
                       ((ip-set-ids :initarg :ip-set-ids :initform
                         (common-lisp:error ":ip-set-ids is required") :type
                         (common-lisp:or ip-set-ids common-lisp:null) :accessor
                         struct-shape-list-ipsets-response-ip-set-ids :shape
                         "IpSetIds" :location common-lisp:nil :location-name
                         "ipSetIds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-ipsets-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-ipsets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-ipsets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-ipsets-response 'make-list-ipsets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-set-ids))
      (common-lisp:list
       (common-lisp:cons "IpSetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-invitations-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-invitations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-invitations-request 'make-list-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-response common-lisp:nil
                       ((invitations :initarg :invitations :initform
                         common-lisp:nil :type
                         (common-lisp:or invitations common-lisp:null)
                         :accessor
                         struct-shape-list-invitations-response-invitations
                         :shape "Invitations" :location common-lisp:nil
                         :location-name "invitations")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-invitations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-invitations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-invitations-response
                    'make-list-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-list-members-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-members-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-members-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken")
                        (only-associated :initarg :only-associated :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-members-request-only-associated
                         :shape "String" :location "querystring" :location-name
                         "onlyAssociated"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-response common-lisp:nil
                       ((members :initarg :members :initform common-lisp:nil
                         :type (common-lisp:or members common-lisp:null)
                         :accessor struct-shape-list-members-response-members
                         :shape "Members" :location common-lisp:nil
                         :location-name "members")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-members-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-organization-admin-accounts-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-organization-admin-accounts-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organization-admin-accounts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-request
                    'make-list-organization-admin-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-response
                       common-lisp:nil
                       ((admin-accounts :initarg :admin-accounts :initform
                         common-lisp:nil :type
                         (common-lisp:or admin-accounts common-lisp:null)
                         :accessor
                         struct-shape-list-organization-admin-accounts-response-admin-accounts
                         :shape "AdminAccounts" :location common-lisp:nil
                         :location-name "adminAccounts")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-organization-admin-accounts-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organization-admin-accounts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-response
                    'make-list-organization-admin-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-publishing-destinations-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-list-publishing-destinations-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-publishing-destinations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-publishing-destinations-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-publishing-destinations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-publishing-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-publishing-destinations-request
                    'make-list-publishing-destinations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-publishing-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-publishing-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-publishing-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-publishing-destinations-response common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         (common-lisp:error ":destinations is required") :type
                         (common-lisp:or destinations common-lisp:null)
                         :accessor
                         struct-shape-list-publishing-destinations-response-destinations
                         :shape "Destinations" :location common-lisp:nil
                         :location-name "destinations")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-publishing-destinations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-publishing-destinations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-publishing-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-publishing-destinations-response
                    'make-list-publishing-destinations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-publishing-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-publishing-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-publishing-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or guard-duty-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "GuardDutyArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-threat-intel-sets-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-list-threat-intel-sets-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-threat-intel-sets-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-threat-intel-sets-request-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-threat-intel-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-threat-intel-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-threat-intel-sets-request
                    'make-list-threat-intel-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-threat-intel-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-threat-intel-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-threat-intel-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-threat-intel-sets-response common-lisp:nil
                       ((threat-intel-set-ids :initarg :threat-intel-set-ids
                         :initform
                         (common-lisp:error
                          ":threat-intel-set-ids is required")
                         :type
                         (common-lisp:or threat-intel-set-ids common-lisp:null)
                         :accessor
                         struct-shape-list-threat-intel-sets-response-threat-intel-set-ids
                         :shape "ThreatIntelSetIds" :location common-lisp:nil
                         :location-name "threatIntelSetIds")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-threat-intel-sets-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-threat-intel-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-threat-intel-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-threat-intel-sets-response
                    'make-list-threat-intel-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-threat-intel-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-threat-intel-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-set-ids))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelSetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-threat-intel-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass local-ip-details common-lisp:nil
                       ((ip-address-v4 :initarg :ip-address-v4 :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-local-ip-details-ip-address-v4
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name "ipAddressV4"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-local-ip-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'local-ip-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'local-ip-details 'make-local-ip-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input local-ip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input local-ip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "IpAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input local-ip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass local-port-details common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-local-port-details-port :shape "Integer"
                         :location common-lisp:nil :location-name "port")
                        (port-name :initarg :port-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-local-port-details-port-name :shape
                         "String" :location common-lisp:nil :location-name
                         "portName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-local-port-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'local-port-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'local-port-details 'make-local-port-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input local-port-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input local-port-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "PortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input local-port-details))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass login-attribute common-lisp:nil
                       ((user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-login-attribute-user :shape "String"
                         :location common-lisp:nil :location-name "user")
                        (application :initarg :application :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-login-attribute-application :shape
                         "String" :location common-lisp:nil :location-name
                         "application")
                        (failed-login-attempts :initarg :failed-login-attempts
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-login-attribute-failed-login-attempts
                         :shape "Integer" :location common-lisp:nil
                         :location-name "failedLoginAttempts")
                        (successful-login-attempts :initarg
                         :successful-login-attempts :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-login-attribute-successful-login-attempts
                         :shape "Integer" :location common-lisp:nil
                         :location-name "successfulLoginAttempts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-login-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'login-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'login-attribute 'make-login-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input login-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input login-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-login-attempts))
      (common-lisp:list
       (common-lisp:cons "FailedLoginAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'successful-login-attempts))
      (common-lisp:list
       (common-lisp:cons "SuccessfulLoginAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input login-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype login-attributes ()
   '(trivial-types:proper-list login-attribute))
 (common-lisp:defun make-login-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list login-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass malware-protection-configuration common-lisp:nil
                       ((scan-ec2instance-with-findings :initarg
                         :scan-ec2instance-with-findings :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-ec2instance-with-findings
                                         common-lisp:null)
                         :accessor
                         struct-shape-malware-protection-configuration-scan-ec2instance-with-findings
                         :shape "ScanEc2InstanceWithFindings" :location
                         common-lisp:nil :location-name
                         "scanEc2InstanceWithFindings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-malware-protection-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'malware-protection-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'malware-protection-configuration
                    'make-malware-protection-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-ec2instance-with-findings))
      (common-lisp:list
       (common-lisp:cons "ScanEc2InstanceWithFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass malware-protection-configuration-result common-lisp:nil
                       ((scan-ec2instance-with-findings :initarg
                         :scan-ec2instance-with-findings :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-ec2instance-with-findings-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-malware-protection-configuration-result-scan-ec2instance-with-findings
                         :shape "ScanEc2InstanceWithFindingsResult" :location
                         common-lisp:nil :location-name
                         "scanEc2InstanceWithFindings")
                        (service-role :initarg :service-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-malware-protection-configuration-result-service-role
                         :shape "String" :location common-lisp:nil
                         :location-name "serviceRole"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-malware-protection-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'malware-protection-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'malware-protection-configuration-result
                    'make-malware-protection-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-ec2instance-with-findings))
      (common-lisp:list
       (common-lisp:cons "ScanEc2InstanceWithFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass malware-protection-data-source-free-trial
                       common-lisp:nil
                       ((scan-ec2instance-with-findings :initarg
                         :scan-ec2instance-with-findings :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-free-trial
                                         common-lisp:null)
                         :accessor
                         struct-shape-malware-protection-data-source-free-trial-scan-ec2instance-with-findings
                         :shape "DataSourceFreeTrial" :location common-lisp:nil
                         :location-name "scanEc2InstanceWithFindings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-malware-protection-data-source-free-trial
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'malware-protection-data-source-free-trial
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'malware-protection-data-source-free-trial
                    'make-malware-protection-data-source-free-trial))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-data-source-free-trial))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-data-source-free-trial))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-ec2instance-with-findings))
      (common-lisp:list
       (common-lisp:cons "ScanEc2InstanceWithFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          malware-protection-data-source-free-trial))
   common-lisp:nil))
(common-lisp:deftype management-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype map-equals ()
   '(trivial-types:proper-list scan-condition-pair))
 (common-lisp:defun make-map-equals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scan-condition-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass master common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-master-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name "accountId")
                        (invitation-id :initarg :invitation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-master-invitation-id :shape "String"
                         :location common-lisp:nil :location-name
                         "invitationId")
                        (relationship-status :initarg :relationship-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-master-relationship-status :shape
                         "String" :location common-lisp:nil :location-name
                         "relationshipStatus")
                        (invited-at :initarg :invited-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-master-invited-at :shape "String"
                         :location common-lisp:nil :location-name "invitedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-master
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'master
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'master 'make-master))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input master))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input master))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "RelationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input master))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name "accountId")
                        (detector-id :initarg :detector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-member-detector-id :shape
                         "DetectorId" :location common-lisp:nil :location-name
                         "detectorId")
                        (master-id :initarg :master-id :initform
                         (common-lisp:error ":master-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-master-id :shape "String"
                         :location common-lisp:nil :location-name "masterId")
                        (email :initarg :email :initform
                         (common-lisp:error ":email is required") :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-member-email :shape "Email" :location
                         common-lisp:nil :location-name "email")
                        (relationship-status :initarg :relationship-status
                         :initform
                         (common-lisp:error ":relationship-status is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-member-relationship-status
                         :shape "String" :location common-lisp:nil
                         :location-name "relationshipStatus")
                        (invited-at :initarg :invited-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-invited-at :shape "String"
                         :location common-lisp:nil :location-name "invitedAt")
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updated-at is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-updated-at :shape "String"
                         :location common-lisp:nil :location-name "updatedAt")
                        (administrator-id :initarg :administrator-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-administrator-id :shape "String"
                         :location common-lisp:nil :location-name
                         "administratorId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "DetectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-status))
      (common-lisp:list
       (common-lisp:cons "RelationshipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-additional-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-additional-configuration-name
                         :shape "OrgFeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-member-additional-configuration-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-additional-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-additional-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-additional-configuration
                    'make-member-additional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-additional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-additional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-additional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-additional-configuration-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-additional-configuration-result-name
                         :shape "OrgFeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-member-additional-configuration-result-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status")
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-additional-configuration-result-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name "updatedAt"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-additional-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-additional-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-additional-configuration-result
                    'make-member-additional-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-additional-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-additional-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-additional-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-additional-configuration-results ()
   '(trivial-types:proper-list member-additional-configuration-result))
 (common-lisp:defun make-member-additional-configuration-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-additional-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype member-additional-configurations ()
   '(trivial-types:proper-list member-additional-configuration))
 (common-lisp:defun make-member-additional-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-additional-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass member-data-source-configuration common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-data-source-configuration-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name "accountId")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configurations-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-data-source-configuration-data-sources
                         :shape "DataSourceConfigurationsResult" :location
                         common-lisp:nil :location-name "dataSources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or member-features-configurations-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-data-source-configuration-features
                         :shape "MemberFeaturesConfigurationsResults" :location
                         common-lisp:nil :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-data-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-data-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-data-source-configuration
                    'make-member-data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-data-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-data-source-configurations ()
   '(trivial-types:proper-list member-data-source-configuration))
 (common-lisp:defun make-member-data-source-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-data-source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass member-features-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature common-lisp:null)
                         :accessor
                         struct-shape-member-features-configuration-name :shape
                         "OrgFeature" :location common-lisp:nil :location-name
                         "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-member-features-configuration-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or member-additional-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-features-configuration-additional-configuration
                         :shape "MemberAdditionalConfigurations" :location
                         common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-features-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-features-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-features-configuration
                    'make-member-features-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-features-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-features-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-features-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass member-features-configuration-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature common-lisp:null)
                         :accessor
                         struct-shape-member-features-configuration-result-name
                         :shape "OrgFeature" :location common-lisp:nil
                         :location-name "name")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or feature-status common-lisp:null)
                         :accessor
                         struct-shape-member-features-configuration-result-status
                         :shape "FeatureStatus" :location common-lisp:nil
                         :location-name "status")
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-member-features-configuration-result-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name "updatedAt")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          member-additional-configuration-results
                          common-lisp:null)
                         :accessor
                         struct-shape-member-features-configuration-result-additional-configuration
                         :shape "MemberAdditionalConfigurationResults"
                         :location common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-features-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'member-features-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-features-configuration-result
                    'make-member-features-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-features-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-features-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-features-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-features-configurations ()
   '(trivial-types:proper-list member-features-configuration))
 (common-lisp:defun make-member-features-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-features-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype member-features-configurations-results ()
   '(trivial-types:proper-list member-features-configuration-result))
 (common-lisp:defun make-member-features-configurations-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            member-features-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype members () '(trivial-types:proper-list member))
 (common-lisp:defun make-members
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype memory-regions-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-memory-regions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype neq () '(trivial-types:proper-list string))
 (common-lisp:defun make-neq
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-connection-action common-lisp:nil
                       ((blocked :initarg :blocked :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-network-connection-action-blocked :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "blocked")
                        (connection-direction :initarg :connection-direction
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-connection-action-connection-direction
                         :shape "String" :location common-lisp:nil
                         :location-name "connectionDirection")
                        (local-port-details :initarg :local-port-details
                         :initform common-lisp:nil :type
                         (common-lisp:or local-port-details common-lisp:null)
                         :accessor
                         struct-shape-network-connection-action-local-port-details
                         :shape "LocalPortDetails" :location common-lisp:nil
                         :location-name "localPortDetails")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-network-connection-action-protocol :shape
                         "String" :location common-lisp:nil :location-name
                         "protocol")
                        (local-ip-details :initarg :local-ip-details :initform
                         common-lisp:nil :type
                         (common-lisp:or local-ip-details common-lisp:null)
                         :accessor
                         struct-shape-network-connection-action-local-ip-details
                         :shape "LocalIpDetails" :location common-lisp:nil
                         :location-name "localIpDetails")
                        (remote-ip-details :initarg :remote-ip-details
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-ip-details common-lisp:null)
                         :accessor
                         struct-shape-network-connection-action-remote-ip-details
                         :shape "RemoteIpDetails" :location common-lisp:nil
                         :location-name "remoteIpDetails")
                        (remote-port-details :initarg :remote-port-details
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-port-details common-lisp:null)
                         :accessor
                         struct-shape-network-connection-action-remote-port-details
                         :shape "RemotePortDetails" :location common-lisp:nil
                         :location-name "remotePortDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-connection-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-connection-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-connection-action
                    'make-network-connection-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-direction))
      (common-lisp:list
       (common-lisp:cons "ConnectionDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-port-details))
      (common-lisp:list
       (common-lisp:cons "LocalPortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-ip-details))
      (common-lisp:list
       (common-lisp:cons "LocalIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-port-details))
      (common-lisp:list
       (common-lisp:cons "RemotePortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((ipv6addresses :initarg :ipv6addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ipv6addresses common-lisp:null)
                         :accessor struct-shape-network-interface-ipv6addresses
                         :shape "Ipv6Addresses" :location common-lisp:nil
                         :location-name "ipv6Addresses")
                        (network-interface-id :initarg :network-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-network-interface-id
                         :shape "String" :location common-lisp:nil
                         :location-name "networkInterfaceId")
                        (private-dns-name :initarg :private-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-private-dns-name :shape
                         "String" :location common-lisp:nil :location-name
                         "privateDnsName")
                        (private-ip-address :initarg :private-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-network-interface-private-ip-address
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name "privateIpAddress")
                        (private-ip-addresses :initarg :private-ip-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or private-ip-addresses common-lisp:null)
                         :accessor
                         struct-shape-network-interface-private-ip-addresses
                         :shape "PrivateIpAddresses" :location common-lisp:nil
                         :location-name "privateIpAddresses")
                        (public-dns-name :initarg :public-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-public-dns-name :shape
                         "String" :location common-lisp:nil :location-name
                         "publicDnsName")
                        (public-ip :initarg :public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-public-ip :shape
                         "String" :location common-lisp:nil :location-name
                         "publicIp")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         struct-shape-network-interface-security-groups :shape
                         "SecurityGroups" :location common-lisp:nil
                         :location-name "securityGroups")
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-subnet-id :shape
                         "String" :location common-lisp:nil :location-name
                         "subnetId")
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-network-interface-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         "vpcId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype not-equals () '(trivial-types:proper-list string))
 (common-lisp:defun make-not-equals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype observation-texts () '(trivial-types:proper-list string))
 (common-lisp:defun make-observation-texts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass observations common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or observation-texts common-lisp:null)
                         :accessor struct-shape-observations-text :shape
                         "ObservationTexts" :location common-lisp:nil
                         :location-name "text"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-observations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'observations
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'observations 'make-observations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input observations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input observations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input observations))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:deftype org-feature () 'common-lisp:string)
(common-lisp:deftype org-feature-additional-configuration ()
  'common-lisp:string)
(common-lisp:deftype org-feature-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass organization common-lisp:nil
                       ((asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-asn :shape "String"
                         :location common-lisp:nil :location-name "asn")
                        (asn-org :initarg :asn-org :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-organization-asn-org :shape
                         "String" :location common-lisp:nil :location-name
                         "asnOrg")
                        (isp :initarg :isp :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-isp :shape "String"
                         :location common-lisp:nil :location-name "isp")
                        (org :initarg :org :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-org :shape "String"
                         :location common-lisp:nil :location-name "org"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'organization 'make-organization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "Asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn-org))
      (common-lisp:list
       (common-lisp:cons "AsnOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'isp))
      (common-lisp:list
       (common-lisp:cons "Isp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org))
      (common-lisp:list
       (common-lisp:cons "Org"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-additional-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-additional-configuration-name
                         :shape "OrgFeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or org-feature-status common-lisp:null)
                         :accessor
                         struct-shape-organization-additional-configuration-auto-enable
                         :shape "OrgFeatureStatus" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-additional-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-additional-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-additional-configuration
                    'make-organization-additional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-additional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-additional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-additional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-additional-configuration-result
                       common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-additional-configuration-result-name
                         :shape "OrgFeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or org-feature-status common-lisp:null)
                         :accessor
                         struct-shape-organization-additional-configuration-result-auto-enable
                         :shape "OrgFeatureStatus" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-additional-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-additional-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-additional-configuration-result
                    'make-organization-additional-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-additional-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-additional-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-additional-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype organization-additional-configuration-results ()
   '(trivial-types:proper-list organization-additional-configuration-result))
 (common-lisp:defun make-organization-additional-configuration-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-additional-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype organization-additional-configurations ()
   '(trivial-types:proper-list organization-additional-configuration))
 (common-lisp:defun make-organization-additional-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-additional-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-data-source-configurations common-lisp:nil
                       ((s3logs :initarg :s3logs :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-s3logs-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-data-source-configurations-s3logs
                         :shape "OrganizationS3LogsConfiguration" :location
                         common-lisp:nil :location-name "s3Logs")
                        (kubernetes :initarg :kubernetes :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-kubernetes-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-data-source-configurations-kubernetes
                         :shape "OrganizationKubernetesConfiguration" :location
                         common-lisp:nil :location-name "kubernetes")
                        (malware-protection :initarg :malware-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          organization-malware-protection-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-data-source-configurations-malware-protection
                         :shape "OrganizationMalwareProtectionConfiguration"
                         :location common-lisp:nil :location-name
                         "malwareProtection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-data-source-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-data-source-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-data-source-configurations
                    'make-organization-data-source-configurations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-data-source-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-data-source-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes))
      (common-lisp:list
       (common-lisp:cons "Kubernetes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-protection))
      (common-lisp:list
       (common-lisp:cons "MalwareProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-data-source-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-data-source-configurations-result
                       common-lisp:nil
                       ((s3logs :initarg :s3logs :initform
                         (common-lisp:error ":s3logs is required") :type
                         (common-lisp:or
                          organization-s3logs-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-data-source-configurations-result-s3logs
                         :shape "OrganizationS3LogsConfigurationResult"
                         :location common-lisp:nil :location-name "s3Logs")
                        (kubernetes :initarg :kubernetes :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-kubernetes-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-data-source-configurations-result-kubernetes
                         :shape "OrganizationKubernetesConfigurationResult"
                         :location common-lisp:nil :location-name "kubernetes")
                        (malware-protection :initarg :malware-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          organization-malware-protection-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-data-source-configurations-result-malware-protection
                         :shape
                         "OrganizationMalwareProtectionConfigurationResult"
                         :location common-lisp:nil :location-name
                         "malwareProtection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-data-source-configurations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-data-source-configurations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-data-source-configurations-result
                    'make-organization-data-source-configurations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-data-source-configurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-data-source-configurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes))
      (common-lisp:list
       (common-lisp:cons "Kubernetes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-protection))
      (common-lisp:list
       (common-lisp:cons "MalwareProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-data-source-configurations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-details common-lisp:nil
                       ((updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-organization-details-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "updatedAt")
                        (organization-statistics :initarg
                         :organization-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-details-organization-statistics
                         :shape "OrganizationStatistics" :location
                         common-lisp:nil :location-name
                         "organizationStatistics"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-details 'make-organization-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-statistics))
      (common-lisp:list
       (common-lisp:cons "OrganizationStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-ebs-volumes common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-ebs-volumes-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-ebs-volumes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization-ebs-volumes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-ebs-volumes 'make-organization-ebs-volumes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-ebs-volumes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-ebs-volumes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-ebs-volumes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-ebs-volumes-result common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-ebs-volumes-result-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-ebs-volumes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-ebs-volumes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-ebs-volumes-result
                    'make-organization-ebs-volumes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-ebs-volumes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-ebs-volumes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-ebs-volumes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-feature-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-configuration-name
                         :shape "OrgFeature" :location common-lisp:nil
                         :location-name "name")
                        (auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or org-feature-status common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-configuration-auto-enable
                         :shape "OrgFeatureStatus" :location common-lisp:nil
                         :location-name "autoEnable")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-additional-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-configuration-additional-configuration
                         :shape "OrganizationAdditionalConfigurations"
                         :location common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-feature-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-feature-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-feature-configuration
                    'make-organization-feature-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-feature-configuration-result
                       common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-configuration-result-name
                         :shape "OrgFeature" :location common-lisp:nil
                         :location-name "name")
                        (auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or org-feature-status common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-configuration-result-auto-enable
                         :shape "OrgFeatureStatus" :location common-lisp:nil
                         :location-name "autoEnable")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          organization-additional-configuration-results
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-configuration-result-additional-configuration
                         :shape "OrganizationAdditionalConfigurationResults"
                         :location common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-feature-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-feature-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-feature-configuration-result
                    'make-organization-feature-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-feature-statistics common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-statistics-name
                         :shape "OrgFeature" :location common-lisp:nil
                         :location-name "name")
                        (enabled-accounts-count :initarg
                         :enabled-accounts-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-statistics-enabled-accounts-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "enabledAccountsCount")
                        (additional-configuration :initarg
                         :additional-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          organization-feature-statistics-additional-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-statistics-additional-configuration
                         :shape
                         "OrganizationFeatureStatisticsAdditionalConfigurations"
                         :location common-lisp:nil :location-name
                         "additionalConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-feature-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-feature-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-feature-statistics
                    'make-organization-feature-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-accounts-count))
      (common-lisp:list
       (common-lisp:cons "EnabledAccountsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-configuration))
      (common-lisp:list
       (common-lisp:cons "AdditionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-feature-statistics-additional-configuration
                       common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or org-feature-additional-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-statistics-additional-configuration-name
                         :shape "OrgFeatureAdditionalConfiguration" :location
                         common-lisp:nil :location-name "name")
                        (enabled-accounts-count :initarg
                         :enabled-accounts-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-organization-feature-statistics-additional-configuration-enabled-accounts-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "enabledAccountsCount"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-feature-statistics-additional-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-feature-statistics-additional-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-feature-statistics-additional-configuration
                    'make-organization-feature-statistics-additional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-statistics-additional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-statistics-additional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-accounts-count))
      (common-lisp:list
       (common-lisp:cons "EnabledAccountsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-feature-statistics-additional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype organization-feature-statistics-additional-configurations
                      ()
   '(trivial-types:proper-list
     organization-feature-statistics-additional-configuration))
 (common-lisp:defun make-organization-feature-statistics-additional-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-feature-statistics-additional-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype organization-feature-statistics-results ()
   '(trivial-types:proper-list organization-feature-statistics))
 (common-lisp:defun make-organization-feature-statistics-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-feature-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype organization-features-configurations ()
   '(trivial-types:proper-list organization-feature-configuration))
 (common-lisp:defun make-organization-features-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-feature-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype organization-features-configurations-results ()
   '(trivial-types:proper-list organization-feature-configuration-result))
 (common-lisp:defun make-organization-features-configurations-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-feature-configuration-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-kubernetes-audit-logs-configuration
                       common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         (common-lisp:error ":auto-enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-kubernetes-audit-logs-configuration-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-kubernetes-audit-logs-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-kubernetes-audit-logs-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-kubernetes-audit-logs-configuration
                    'make-organization-kubernetes-audit-logs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-audit-logs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-audit-logs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-audit-logs-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-kubernetes-audit-logs-configuration-result
                       common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         (common-lisp:error ":auto-enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-kubernetes-audit-logs-configuration-result-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-kubernetes-audit-logs-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-kubernetes-audit-logs-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-kubernetes-audit-logs-configuration-result
                    'make-organization-kubernetes-audit-logs-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-audit-logs-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-audit-logs-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-audit-logs-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-kubernetes-configuration common-lisp:nil
                       ((audit-logs :initarg :audit-logs :initform
                         (common-lisp:error ":audit-logs is required") :type
                         (common-lisp:or
                          organization-kubernetes-audit-logs-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-kubernetes-configuration-audit-logs
                         :shape "OrganizationKubernetesAuditLogsConfiguration"
                         :location common-lisp:nil :location-name "auditLogs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-kubernetes-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-kubernetes-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-kubernetes-configuration
                    'make-organization-kubernetes-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-kubernetes-configuration-result
                       common-lisp:nil
                       ((audit-logs :initarg :audit-logs :initform
                         (common-lisp:error ":audit-logs is required") :type
                         (common-lisp:or
                          organization-kubernetes-audit-logs-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-kubernetes-configuration-result-audit-logs
                         :shape
                         "OrganizationKubernetesAuditLogsConfigurationResult"
                         :location common-lisp:nil :location-name "auditLogs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-kubernetes-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-kubernetes-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-kubernetes-configuration-result
                    'make-organization-kubernetes-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-kubernetes-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-malware-protection-configuration
                       common-lisp:nil
                       ((scan-ec2instance-with-findings :initarg
                         :scan-ec2instance-with-findings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-scan-ec2instance-with-findings
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-malware-protection-configuration-scan-ec2instance-with-findings
                         :shape "OrganizationScanEc2InstanceWithFindings"
                         :location common-lisp:nil :location-name
                         "scanEc2InstanceWithFindings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-malware-protection-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-malware-protection-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-malware-protection-configuration
                    'make-organization-malware-protection-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-malware-protection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-malware-protection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-ec2instance-with-findings))
      (common-lisp:list
       (common-lisp:cons "ScanEc2InstanceWithFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-malware-protection-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-malware-protection-configuration-result
                       common-lisp:nil
                       ((scan-ec2instance-with-findings :initarg
                         :scan-ec2instance-with-findings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-scan-ec2instance-with-findings-result
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-malware-protection-configuration-result-scan-ec2instance-with-findings
                         :shape "OrganizationScanEc2InstanceWithFindingsResult"
                         :location common-lisp:nil :location-name
                         "scanEc2InstanceWithFindings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-malware-protection-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-malware-protection-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-malware-protection-configuration-result
                    'make-organization-malware-protection-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-malware-protection-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-malware-protection-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-ec2instance-with-findings))
      (common-lisp:list
       (common-lisp:cons "ScanEc2InstanceWithFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-malware-protection-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-s3logs-configuration common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         (common-lisp:error ":auto-enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-s3logs-configuration-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-s3logs-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-s3logs-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-s3logs-configuration
                    'make-organization-s3logs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-s3logs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-s3logs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-s3logs-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-s3logs-configuration-result common-lisp:nil
                       ((auto-enable :initarg :auto-enable :initform
                         (common-lisp:error ":auto-enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-s3logs-configuration-result-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-s3logs-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-s3logs-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-s3logs-configuration-result
                    'make-organization-s3logs-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-s3logs-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-s3logs-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-s3logs-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-scan-ec2instance-with-findings
                       common-lisp:nil
                       ((ebs-volumes :initarg :ebs-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-ebs-volumes
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-scan-ec2instance-with-findings-ebs-volumes
                         :shape "OrganizationEbsVolumes" :location
                         common-lisp:nil :location-name "ebsVolumes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-scan-ec2instance-with-findings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-scan-ec2instance-with-findings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-scan-ec2instance-with-findings
                    'make-organization-scan-ec2instance-with-findings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-scan-ec2instance-with-findings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-scan-ec2instance-with-findings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volumes))
      (common-lisp:list
       (common-lisp:cons "EbsVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-scan-ec2instance-with-findings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-scan-ec2instance-with-findings-result
                       common-lisp:nil
                       ((ebs-volumes :initarg :ebs-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-ebs-volumes-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-scan-ec2instance-with-findings-result-ebs-volumes
                         :shape "OrganizationEbsVolumesResult" :location
                         common-lisp:nil :location-name "ebsVolumes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-scan-ec2instance-with-findings-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-scan-ec2instance-with-findings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-scan-ec2instance-with-findings-result
                    'make-organization-scan-ec2instance-with-findings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-scan-ec2instance-with-findings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-scan-ec2instance-with-findings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volumes))
      (common-lisp:list
       (common-lisp:cons "EbsVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-scan-ec2instance-with-findings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-statistics common-lisp:nil
                       ((total-accounts-count :initarg :total-accounts-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-organization-statistics-total-accounts-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "totalAccountsCount")
                        (member-accounts-count :initarg :member-accounts-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-organization-statistics-member-accounts-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "memberAccountsCount")
                        (active-accounts-count :initarg :active-accounts-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-organization-statistics-active-accounts-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "activeAccountsCount")
                        (enabled-accounts-count :initarg
                         :enabled-accounts-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-organization-statistics-enabled-accounts-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "enabledAccountsCount")
                        (count-by-feature :initarg :count-by-feature :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-feature-statistics-results
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-statistics-count-by-feature
                         :shape "OrganizationFeatureStatisticsResults"
                         :location common-lisp:nil :location-name
                         "countByFeature"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-statistics 'make-organization-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-accounts-count))
      (common-lisp:list
       (common-lisp:cons "TotalAccountsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-accounts-count))
      (common-lisp:list
       (common-lisp:cons "MemberAccountsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-accounts-count))
      (common-lisp:list
       (common-lisp:cons "ActiveAccountsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-accounts-count))
      (common-lisp:list
       (common-lisp:cons "EnabledAccountsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-by-feature))
      (common-lisp:list
       (common-lisp:cons "CountByFeature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass owner common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-owner-id :shape "String" :location
                         common-lisp:nil :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-owner
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'owner
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'owner 'make-owner))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input owner))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass permission-configuration common-lisp:nil
                       ((bucket-level-permissions :initarg
                         :bucket-level-permissions :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-level-permissions
                                         common-lisp:null)
                         :accessor
                         struct-shape-permission-configuration-bucket-level-permissions
                         :shape "BucketLevelPermissions" :location
                         common-lisp:nil :location-name
                         "bucketLevelPermissions")
                        (account-level-permissions :initarg
                         :account-level-permissions :initform common-lisp:nil
                         :type
                         (common-lisp:or account-level-permissions
                                         common-lisp:null)
                         :accessor
                         struct-shape-permission-configuration-account-level-permissions
                         :shape "AccountLevelPermissions" :location
                         common-lisp:nil :location-name
                         "accountLevelPermissions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'permission-configuration 'make-permission-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permission-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permission-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-level-permissions))
      (common-lisp:list
       (common-lisp:cons "BucketLevelPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-level-permissions))
      (common-lisp:list
       (common-lisp:cons "AccountLevelPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permission-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass port-probe-action common-lisp:nil
                       ((blocked :initarg :blocked :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-port-probe-action-blocked
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "blocked")
                        (port-probe-details :initarg :port-probe-details
                         :initform common-lisp:nil :type
                         (common-lisp:or port-probe-details common-lisp:null)
                         :accessor
                         struct-shape-port-probe-action-port-probe-details
                         :shape "PortProbeDetails" :location common-lisp:nil
                         :location-name "portProbeDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-probe-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-probe-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'port-probe-action 'make-port-probe-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-probe-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-probe-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-probe-details))
      (common-lisp:list
       (common-lisp:cons "PortProbeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-probe-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass port-probe-detail common-lisp:nil
                       ((local-port-details :initarg :local-port-details
                         :initform common-lisp:nil :type
                         (common-lisp:or local-port-details common-lisp:null)
                         :accessor
                         struct-shape-port-probe-detail-local-port-details
                         :shape "LocalPortDetails" :location common-lisp:nil
                         :location-name "localPortDetails")
                        (local-ip-details :initarg :local-ip-details :initform
                         common-lisp:nil :type
                         (common-lisp:or local-ip-details common-lisp:null)
                         :accessor
                         struct-shape-port-probe-detail-local-ip-details :shape
                         "LocalIpDetails" :location common-lisp:nil
                         :location-name "localIpDetails")
                        (remote-ip-details :initarg :remote-ip-details
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-ip-details common-lisp:null)
                         :accessor
                         struct-shape-port-probe-detail-remote-ip-details
                         :shape "RemoteIpDetails" :location common-lisp:nil
                         :location-name "remoteIpDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-probe-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-probe-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'port-probe-detail 'make-port-probe-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-probe-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-probe-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-port-details))
      (common-lisp:list
       (common-lisp:cons "LocalPortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-ip-details))
      (common-lisp:list
       (common-lisp:cons "LocalIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-probe-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-probe-details ()
   '(trivial-types:proper-list port-probe-detail))
 (common-lisp:defun make-port-probe-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-probe-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype positive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass private-ip-address-details common-lisp:nil
                       ((private-dns-name :initarg :private-dns-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-private-ip-address-details-private-dns-name
                         :shape "String" :location common-lisp:nil
                         :location-name "privateDnsName")
                        (private-ip-address :initarg :private-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-private-ip-address-details-private-ip-address
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name "privateIpAddress"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-private-ip-address-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'private-ip-address-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'private-ip-address-details
                    'make-private-ip-address-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-ip-address-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-ip-address-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-ip-address-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype private-ip-addresses ()
   '(trivial-types:proper-list private-ip-address-details))
 (common-lisp:defun make-private-ip-addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            private-ip-address-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass process-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (executable-path :initarg :executable-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-executable-path :shape
                         "String" :location common-lisp:nil :location-name
                         "executablePath")
                        (executable-sha256 :initarg :executable-sha256
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-executable-sha256 :shape
                         "String" :location common-lisp:nil :location-name
                         "executableSha256")
                        (namespace-pid :initarg :namespace-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-process-details-namespace-pid :shape
                         "Integer" :location common-lisp:nil :location-name
                         "namespacePid")
                        (pwd :initarg :pwd :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-pwd :shape "String"
                         :location common-lisp:nil :location-name "pwd")
                        (pid :initarg :pid :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-process-details-pid :shape "Integer"
                         :location common-lisp:nil :location-name "pid")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-process-details-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "startTime")
                        (uuid :initarg :uuid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-uuid :shape "String"
                         :location common-lisp:nil :location-name "uuid")
                        (parent-uuid :initarg :parent-uuid :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-parent-uuid :shape
                         "String" :location common-lisp:nil :location-name
                         "parentUuid")
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-process-details-user :shape "String"
                         :location common-lisp:nil :location-name "user")
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-process-details-user-id :shape
                         "Integer" :location common-lisp:nil :location-name
                         "userId")
                        (euid :initarg :euid :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-process-details-euid :shape "Integer"
                         :location common-lisp:nil :location-name "euid")
                        (lineage :initarg :lineage :initform common-lisp:nil
                         :type (common-lisp:or lineage common-lisp:null)
                         :accessor struct-shape-process-details-lineage :shape
                         "Lineage" :location common-lisp:nil :location-name
                         "lineage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-process-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'process-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'process-details 'make-process-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input process-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input process-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executable-path))
      (common-lisp:list
       (common-lisp:cons "ExecutablePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executable-sha256))
      (common-lisp:list
       (common-lisp:cons "ExecutableSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-pid))
      (common-lisp:list
       (common-lisp:cons "NamespacePid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pwd))
      (common-lisp:list
       (common-lisp:cons "Pwd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uuid))
      (common-lisp:list
       (common-lisp:cons "Uuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-uuid))
      (common-lisp:list
       (common-lisp:cons "ParentUuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'euid))
      (common-lisp:list
       (common-lisp:cons "Euid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage))
      (common-lisp:list
       (common-lisp:cons "Lineage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input process-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass product-code common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-code-code :shape "String"
                         :location common-lisp:nil :location-name
                         "productCodeId")
                        (product-type :initarg :product-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-product-code-product-type :shape "String"
                         :location common-lisp:nil :location-name
                         "productCodeType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-product-code
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'product-code
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'product-code 'make-product-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-type))
      (common-lisp:list
       (common-lisp:cons "ProductType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-codes ()
   '(trivial-types:proper-list product-code))
 (common-lisp:defun make-product-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profile-subtype () 'common-lisp:string)
(common-lisp:deftype profile-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass public-access common-lisp:nil
                       ((permission-configuration :initarg
                         :permission-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or permission-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-public-access-permission-configuration
                         :shape "PermissionConfiguration" :location
                         common-lisp:nil :location-name
                         "permissionConfiguration")
                        (effective-permission :initarg :effective-permission
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-public-access-effective-permission :shape
                         "String" :location common-lisp:nil :location-name
                         "effectivePermission"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-public-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'public-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'public-access 'make-public-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permission-configuration))
      (common-lisp:list
       (common-lisp:cons "PermissionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'effective-permission))
      (common-lisp:list
       (common-lisp:cons "EffectivePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-access))
   common-lisp:nil))
(common-lisp:deftype publishing-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rds-db-instance-details common-lisp:nil
                       ((db-instance-identifier :initarg
                         :db-instance-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rds-db-instance-details-db-instance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name "dbInstanceIdentifier")
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-instance-details-engine
                         :shape "String" :location common-lisp:nil
                         :location-name "engine")
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-instance-details-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name "engineVersion")
                        (db-cluster-identifier :initarg :db-cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-instance-details-db-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name "dbClusterIdentifier")
                        (db-instance-arn :initarg :db-instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-instance-details-db-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name "dbInstanceArn")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-rds-db-instance-details-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-db-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-db-instance-details 'make-rds-db-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-arn))
      (common-lisp:list
       (common-lisp:cons "DbInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-db-user-details common-lisp:nil
                       ((user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-user-details-user :shape "String"
                         :location common-lisp:nil :location-name "user")
                        (application :initarg :application :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-user-details-application :shape
                         "String" :location common-lisp:nil :location-name
                         "application")
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-user-details-database
                         :shape "String" :location common-lisp:nil
                         :location-name "database")
                        (ssl :initarg :ssl :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-user-details-ssl :shape "String"
                         :location common-lisp:nil :location-name "ssl")
                        (auth-method :initarg :auth-method :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-user-details-auth-method :shape
                         "String" :location common-lisp:nil :location-name
                         "authMethod"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-user-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-db-user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-db-user-details 'make-rds-db-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-db-user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-db-user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl))
      (common-lisp:list
       (common-lisp:cons "Ssl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-method))
      (common-lisp:list
       (common-lisp:cons "AuthMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-db-user-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-login-attempt-action common-lisp:nil
                       ((remote-ip-details :initarg :remote-ip-details
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-ip-details common-lisp:null)
                         :accessor
                         struct-shape-rds-login-attempt-action-remote-ip-details
                         :shape "RemoteIpDetails" :location common-lisp:nil
                         :location-name "remoteIpDetails")
                        (login-attributes :initarg :login-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or login-attributes common-lisp:null)
                         :accessor
                         struct-shape-rds-login-attempt-action-login-attributes
                         :shape "LoginAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-login-attempt-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-login-attempt-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-login-attempt-action 'make-rds-login-attempt-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-login-attempt-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-login-attempt-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-attributes))
      (common-lisp:list
       (common-lisp:cons "LoginAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-login-attempt-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remote-account-details common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remote-account-details-account-id :shape
                         "String" :location common-lisp:nil :location-name
                         "accountId")
                        (affiliated :initarg :affiliated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-remote-account-details-affiliated :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "affiliated"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remote-account-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remote-account-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remote-account-details 'make-remote-account-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remote-account-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remote-account-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affiliated))
      (common-lisp:list
       (common-lisp:cons "Affiliated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remote-account-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remote-ip-details common-lisp:nil
                       ((city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or city common-lisp:null) :accessor
                         struct-shape-remote-ip-details-city :shape "City"
                         :location common-lisp:nil :location-name "city")
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or country common-lisp:null)
                         :accessor struct-shape-remote-ip-details-country
                         :shape "Country" :location common-lisp:nil
                         :location-name "country")
                        (geo-location :initarg :geo-location :initform
                         common-lisp:nil :type
                         (common-lisp:or geo-location common-lisp:null)
                         :accessor struct-shape-remote-ip-details-geo-location
                         :shape "GeoLocation" :location common-lisp:nil
                         :location-name "geoLocation")
                        (ip-address-v4 :initarg :ip-address-v4 :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-remote-ip-details-ip-address-v4
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name "ipAddressV4")
                        (organization :initarg :organization :initform
                         common-lisp:nil :type
                         (common-lisp:or organization common-lisp:null)
                         :accessor struct-shape-remote-ip-details-organization
                         :shape "Organization" :location common-lisp:nil
                         :location-name "organization"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remote-ip-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remote-ip-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remote-ip-details 'make-remote-ip-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remote-ip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remote-ip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-location))
      (common-lisp:list
       (common-lisp:cons "GeoLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "IpAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization))
      (common-lisp:list
       (common-lisp:cons "Organization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remote-ip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remote-port-details common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-remote-port-details-port :shape "Integer"
                         :location common-lisp:nil :location-name "port")
                        (port-name :initarg :port-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remote-port-details-port-name :shape
                         "String" :location common-lisp:nil :location-name
                         "portName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remote-port-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remote-port-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remote-port-details 'make-remote-port-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remote-port-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remote-port-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "PortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remote-port-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((access-key-details :initarg :access-key-details
                         :initform common-lisp:nil :type
                         (common-lisp:or access-key-details common-lisp:null)
                         :accessor struct-shape-resource-access-key-details
                         :shape "AccessKeyDetails" :location common-lisp:nil
                         :location-name "accessKeyDetails")
                        (s3bucket-details :initarg :s3bucket-details :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-details common-lisp:null)
                         :accessor struct-shape-resource-s3bucket-details
                         :shape "S3BucketDetails" :location common-lisp:nil
                         :location-name "s3BucketDetails")
                        (instance-details :initarg :instance-details :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-details common-lisp:null)
                         :accessor struct-shape-resource-instance-details
                         :shape "InstanceDetails" :location common-lisp:nil
                         :location-name "instanceDetails")
                        (eks-cluster-details :initarg :eks-cluster-details
                         :initform common-lisp:nil :type
                         (common-lisp:or eks-cluster-details common-lisp:null)
                         :accessor struct-shape-resource-eks-cluster-details
                         :shape "EksClusterDetails" :location common-lisp:nil
                         :location-name "eksClusterDetails")
                        (kubernetes-details :initarg :kubernetes-details
                         :initform common-lisp:nil :type
                         (common-lisp:or kubernetes-details common-lisp:null)
                         :accessor struct-shape-resource-kubernetes-details
                         :shape "KubernetesDetails" :location common-lisp:nil
                         :location-name "kubernetesDetails")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-resource-type :shape "String"
                         :location common-lisp:nil :location-name
                         "resourceType")
                        (ebs-volume-details :initarg :ebs-volume-details
                         :initform common-lisp:nil :type
                         (common-lisp:or ebs-volume-details common-lisp:null)
                         :accessor struct-shape-resource-ebs-volume-details
                         :shape "EbsVolumeDetails" :location common-lisp:nil
                         :location-name "ebsVolumeDetails")
                        (ecs-cluster-details :initarg :ecs-cluster-details
                         :initform common-lisp:nil :type
                         (common-lisp:or ecs-cluster-details common-lisp:null)
                         :accessor struct-shape-resource-ecs-cluster-details
                         :shape "EcsClusterDetails" :location common-lisp:nil
                         :location-name "ecsClusterDetails")
                        (container-details :initarg :container-details
                         :initform common-lisp:nil :type
                         (common-lisp:or container common-lisp:null) :accessor
                         struct-shape-resource-container-details :shape
                         "Container" :location common-lisp:nil :location-name
                         "containerDetails")
                        (rds-db-instance-details :initarg
                         :rds-db-instance-details :initform common-lisp:nil
                         :type
                         (common-lisp:or rds-db-instance-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-rds-db-instance-details :shape
                         "RdsDbInstanceDetails" :location common-lisp:nil
                         :location-name "rdsDbInstanceDetails")
                        (rds-db-user-details :initarg :rds-db-user-details
                         :initform common-lisp:nil :type
                         (common-lisp:or rds-db-user-details common-lisp:null)
                         :accessor struct-shape-resource-rds-db-user-details
                         :shape "RdsDbUserDetails" :location common-lisp:nil
                         :location-name "rdsDbUserDetails")
                        (lambda-details :initarg :lambda-details :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-details common-lisp:null)
                         :accessor struct-shape-resource-lambda-details :shape
                         "LambdaDetails" :location common-lisp:nil
                         :location-name "lambdaDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-details))
      (common-lisp:list
       (common-lisp:cons "AccessKeyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-details))
      (common-lisp:list
       (common-lisp:cons "S3BucketDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-details))
      (common-lisp:list
       (common-lisp:cons "InstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-cluster-details))
      (common-lisp:list
       (common-lisp:cons "EksClusterDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-details))
      (common-lisp:list
       (common-lisp:cons "KubernetesDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volume-details))
      (common-lisp:list
       (common-lisp:cons "EbsVolumeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-details))
      (common-lisp:list
       (common-lisp:cons "EcsClusterDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-details))
      (common-lisp:list
       (common-lisp:cons "ContainerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-db-instance-details))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-user-details))
      (common-lisp:list
       (common-lisp:cons "RdsDbUserDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-details))
      (common-lisp:list
       (common-lisp:cons "LambdaDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-details common-lisp:nil
                       ((instance-arn :initarg :instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-arn common-lisp:null)
                         :accessor struct-shape-resource-details-instance-arn
                         :shape "InstanceArn" :location common-lisp:nil
                         :location-name "instanceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass runtime-context common-lisp:nil
                       ((modifying-process :initarg :modifying-process
                         :initform common-lisp:nil :type
                         (common-lisp:or process-details common-lisp:null)
                         :accessor
                         struct-shape-runtime-context-modifying-process :shape
                         "ProcessDetails" :location common-lisp:nil
                         :location-name "modifyingProcess")
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-runtime-context-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "modifiedAt")
                        (script-path :initarg :script-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-script-path :shape
                         "String" :location common-lisp:nil :location-name
                         "scriptPath")
                        (library-path :initarg :library-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-library-path :shape
                         "String" :location common-lisp:nil :location-name
                         "libraryPath")
                        (ld-preload-value :initarg :ld-preload-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-ld-preload-value :shape
                         "String" :location common-lisp:nil :location-name
                         "ldPreloadValue")
                        (socket-path :initarg :socket-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-socket-path :shape
                         "String" :location common-lisp:nil :location-name
                         "socketPath")
                        (runc-binary-path :initarg :runc-binary-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-runc-binary-path :shape
                         "String" :location common-lisp:nil :location-name
                         "runcBinaryPath")
                        (release-agent-path :initarg :release-agent-path
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-release-agent-path :shape
                         "String" :location common-lisp:nil :location-name
                         "releaseAgentPath")
                        (mount-source :initarg :mount-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-mount-source :shape
                         "String" :location common-lisp:nil :location-name
                         "mountSource")
                        (mount-target :initarg :mount-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-mount-target :shape
                         "String" :location common-lisp:nil :location-name
                         "mountTarget")
                        (file-system-type :initarg :file-system-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-file-system-type :shape
                         "String" :location common-lisp:nil :location-name
                         "fileSystemType")
                        (flags :initarg :flags :initform common-lisp:nil :type
                         (common-lisp:or flags-list common-lisp:null) :accessor
                         struct-shape-runtime-context-flags :shape "FlagsList"
                         :location common-lisp:nil :location-name "flags")
                        (module-name :initarg :module-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-module-name :shape
                         "String" :location common-lisp:nil :location-name
                         "moduleName")
                        (module-file-path :initarg :module-file-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-module-file-path :shape
                         "String" :location common-lisp:nil :location-name
                         "moduleFilePath")
                        (module-sha256 :initarg :module-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-module-sha256 :shape
                         "String" :location common-lisp:nil :location-name
                         "moduleSha256")
                        (shell-history-file-path :initarg
                         :shell-history-file-path :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-runtime-context-shell-history-file-path
                         :shape "String" :location common-lisp:nil
                         :location-name "shellHistoryFilePath")
                        (target-process :initarg :target-process :initform
                         common-lisp:nil :type
                         (common-lisp:or process-details common-lisp:null)
                         :accessor struct-shape-runtime-context-target-process
                         :shape "ProcessDetails" :location common-lisp:nil
                         :location-name "targetProcess")
                        (address-family :initarg :address-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-runtime-context-address-family :shape
                         "String" :location common-lisp:nil :location-name
                         "addressFamily")
                        (iana-protocol-number :initarg :iana-protocol-number
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-runtime-context-iana-protocol-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name "ianaProtocolNumber")
                        (memory-regions :initarg :memory-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or memory-regions-list common-lisp:null)
                         :accessor struct-shape-runtime-context-memory-regions
                         :shape "MemoryRegionsList" :location common-lisp:nil
                         :location-name "memoryRegions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'runtime-context 'make-runtime-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modifying-process))
      (common-lisp:list
       (common-lisp:cons "ModifyingProcess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "ModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-path))
      (common-lisp:list
       (common-lisp:cons "ScriptPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'library-path))
      (common-lisp:list
       (common-lisp:cons "LibraryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ld-preload-value))
      (common-lisp:list
       (common-lisp:cons "LdPreloadValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'socket-path))
      (common-lisp:list
       (common-lisp:cons "SocketPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runc-binary-path))
      (common-lisp:list
       (common-lisp:cons "RuncBinaryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-agent-path))
      (common-lisp:list
       (common-lisp:cons "ReleaseAgentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-source))
      (common-lisp:list
       (common-lisp:cons "MountSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-target))
      (common-lisp:list
       (common-lisp:cons "MountTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "FileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flags))
      (common-lisp:list
       (common-lisp:cons "Flags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-name))
      (common-lisp:list
       (common-lisp:cons "ModuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-file-path))
      (common-lisp:list
       (common-lisp:cons "ModuleFilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-sha256))
      (common-lisp:list
       (common-lisp:cons "ModuleSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shell-history-file-path))
      (common-lisp:list
       (common-lisp:cons "ShellHistoryFilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-process))
      (common-lisp:list
       (common-lisp:cons "TargetProcess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "AddressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iana-protocol-number))
      (common-lisp:list
       (common-lisp:cons "IanaProtocolNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-regions))
      (common-lisp:list
       (common-lisp:cons "MemoryRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass runtime-details common-lisp:nil
                       ((process :initarg :process :initform common-lisp:nil
                         :type
                         (common-lisp:or process-details common-lisp:null)
                         :accessor struct-shape-runtime-details-process :shape
                         "ProcessDetails" :location common-lisp:nil
                         :location-name "process")
                        (context :initarg :context :initform common-lisp:nil
                         :type
                         (common-lisp:or runtime-context common-lisp:null)
                         :accessor struct-shape-runtime-details-context :shape
                         "RuntimeContext" :location common-lisp:nil
                         :location-name "context"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'runtime-details 'make-runtime-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process))
      (common-lisp:list
       (common-lisp:cons "Process"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3bucket-detail common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3bucket-detail-arn :shape "String"
                         :location common-lisp:nil :location-name "arn")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3bucket-detail-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3bucket-detail-type :shape "String"
                         :location common-lisp:nil :location-name "type")
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-s3bucket-detail-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         "createdAt")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-s3bucket-detail-owner :shape "Owner"
                         :location common-lisp:nil :location-name "owner")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-s3bucket-detail-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (default-server-side-encryption :initarg
                         :default-server-side-encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or default-server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-detail-default-server-side-encryption
                         :shape "DefaultServerSideEncryption" :location
                         common-lisp:nil :location-name
                         "defaultServerSideEncryption")
                        (public-access :initarg :public-access :initform
                         common-lisp:nil :type
                         (common-lisp:or public-access common-lisp:null)
                         :accessor struct-shape-s3bucket-detail-public-access
                         :shape "PublicAccess" :location common-lisp:nil
                         :location-name "publicAccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3bucket-detail 'make-s3bucket-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "DefaultServerSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access))
      (common-lisp:list
       (common-lisp:cons "PublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3bucket-details ()
   '(trivial-types:proper-list s3bucket-detail))
 (common-lisp:defun make-s3bucket-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3logs-configuration common-lisp:nil
                       ((enable :initarg :enable :initform
                         (common-lisp:error ":enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-s3logs-configuration-enable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "enable"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3logs-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3logs-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3logs-configuration 'make-s3logs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3logs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3logs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3logs-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3logs-configuration-result common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or data-source-status common-lisp:null)
                         :accessor
                         struct-shape-s3logs-configuration-result-status :shape
                         "DataSourceStatus" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3logs-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3logs-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3logs-configuration-result
                    'make-s3logs-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3logs-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3logs-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3logs-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-scan-detector-id :shape
                         "DetectorId" :location common-lisp:nil :location-name
                         "detectorId")
                        (admin-detector-id :initarg :admin-detector-id
                         :initform common-lisp:nil :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-scan-admin-detector-id :shape
                         "DetectorId" :location common-lisp:nil :location-name
                         "adminDetectorId")
                        (scan-id :initarg :scan-id :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-scan-scan-id :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name "scanId")
                        (scan-status :initarg :scan-status :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-status common-lisp:null)
                         :accessor struct-shape-scan-scan-status :shape
                         "ScanStatus" :location common-lisp:nil :location-name
                         "scanStatus")
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-scan-failure-reason :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name "failureReason")
                        (scan-start-time :initarg :scan-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-scan-scan-start-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         "scanStartTime")
                        (scan-end-time :initarg :scan-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-scan-scan-end-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         "scanEndTime")
                        (trigger-details :initarg :trigger-details :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-details common-lisp:null)
                         :accessor struct-shape-scan-trigger-details :shape
                         "TriggerDetails" :location common-lisp:nil
                         :location-name "triggerDetails")
                        (resource-details :initarg :resource-details :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor struct-shape-scan-resource-details :shape
                         "ResourceDetails" :location common-lisp:nil
                         :location-name "resourceDetails")
                        (scan-result-details :initarg :scan-result-details
                         :initform common-lisp:nil :type
                         (common-lisp:or scan-result-details common-lisp:null)
                         :accessor struct-shape-scan-scan-result-details :shape
                         "ScanResultDetails" :location common-lisp:nil
                         :location-name "scanResultDetails")
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-scan-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name "accountId")
                        (total-bytes :initarg :total-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor struct-shape-scan-total-bytes :shape
                         "PositiveLong" :location common-lisp:nil
                         :location-name "totalBytes")
                        (file-count :initarg :file-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor struct-shape-scan-file-count :shape
                         "PositiveLong" :location common-lisp:nil
                         :location-name "fileCount")
                        (attached-volumes :initarg :attached-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-details common-lisp:null)
                         :accessor struct-shape-scan-attached-volumes :shape
                         "VolumeDetails" :location common-lisp:nil
                         :location-name "attachedVolumes")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-type common-lisp:null) :accessor
                         struct-shape-scan-scan-type :shape "ScanType"
                         :location common-lisp:nil :location-name "scanType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scan 'make-scan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "DetectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-detector-id))
      (common-lisp:list
       (common-lisp:cons "AdminDetectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-id))
      (common-lisp:list
       (common-lisp:cons "ScanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-status))
      (common-lisp:list
       (common-lisp:cons "ScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-start-time))
      (common-lisp:list
       (common-lisp:cons "ScanStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-end-time))
      (common-lisp:list
       (common-lisp:cons "ScanEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-details))
      (common-lisp:list
       (common-lisp:cons "TriggerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-result-details))
      (common-lisp:list
       (common-lisp:cons "ScanResultDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-count))
      (common-lisp:list
       (common-lisp:cons "FileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-volumes))
      (common-lisp:list
       (common-lisp:cons "AttachedVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-condition common-lisp:nil
                       ((map-equals :initarg :map-equals :initform
                         (common-lisp:error ":map-equals is required") :type
                         (common-lisp:or map-equals common-lisp:null) :accessor
                         struct-shape-scan-condition-map-equals :shape
                         "MapEquals" :location common-lisp:nil :location-name
                         "mapEquals"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scan-condition 'make-scan-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-equals))
      (common-lisp:list
       (common-lisp:cons "MapEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-condition-pair common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-scan-condition-pair-key :shape "TagKey"
                         :location common-lisp:nil :location-name "key")
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-scan-condition-pair-value :shape
                         "TagValue" :location common-lisp:nil :location-name
                         "value"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-condition-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-condition-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scan-condition-pair 'make-scan-condition-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-condition-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-condition-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-condition-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scan-criterion () 'common-lisp:hash-table)
 (common-lisp:defun make-scan-criterion (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype scan-criterion-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scan-detections common-lisp:nil
                       ((scanned-item-count :initarg :scanned-item-count
                         :initform common-lisp:nil :type
                         (common-lisp:or scanned-item-count common-lisp:null)
                         :accessor
                         struct-shape-scan-detections-scanned-item-count :shape
                         "ScannedItemCount" :location common-lisp:nil
                         :location-name "scannedItemCount")
                        (threats-detected-item-count :initarg
                         :threats-detected-item-count :initform common-lisp:nil
                         :type
                         (common-lisp:or threats-detected-item-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-scan-detections-threats-detected-item-count
                         :shape "ThreatsDetectedItemCount" :location
                         common-lisp:nil :location-name
                         "threatsDetectedItemCount")
                        (highest-severity-threat-details :initarg
                         :highest-severity-threat-details :initform
                         common-lisp:nil :type
                         (common-lisp:or highest-severity-threat-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-scan-detections-highest-severity-threat-details
                         :shape "HighestSeverityThreatDetails" :location
                         common-lisp:nil :location-name
                         "highestSeverityThreatDetails")
                        (threat-detected-by-name :initarg
                         :threat-detected-by-name :initform common-lisp:nil
                         :type
                         (common-lisp:or threat-detected-by-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-scan-detections-threat-detected-by-name
                         :shape "ThreatDetectedByName" :location
                         common-lisp:nil :location-name
                         "threatDetectedByName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-detections
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-detections
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scan-detections 'make-scan-detections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-detections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-detections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scanned-item-count))
      (common-lisp:list
       (common-lisp:cons "ScannedItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threats-detected-item-count))
      (common-lisp:list
       (common-lisp:cons "ThreatsDetectedItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'highest-severity-threat-details))
      (common-lisp:list
       (common-lisp:cons "HighestSeverityThreatDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-detected-by-name))
      (common-lisp:list
       (common-lisp:cons "ThreatDetectedByName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-detections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-ec2instance-with-findings common-lisp:nil
                       ((ebs-volumes :initarg :ebs-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-scan-ec2instance-with-findings-ebs-volumes
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "ebsVolumes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-ec2instance-with-findings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scan-ec2instance-with-findings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scan-ec2instance-with-findings
                    'make-scan-ec2instance-with-findings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scan-ec2instance-with-findings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scan-ec2instance-with-findings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volumes))
      (common-lisp:list
       (common-lisp:cons "EbsVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scan-ec2instance-with-findings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-ec2instance-with-findings-result common-lisp:nil
                       ((ebs-volumes :initarg :ebs-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or ebs-volumes-result common-lisp:null)
                         :accessor
                         struct-shape-scan-ec2instance-with-findings-result-ebs-volumes
                         :shape "EbsVolumesResult" :location common-lisp:nil
                         :location-name "ebsVolumes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-ec2instance-with-findings-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scan-ec2instance-with-findings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scan-ec2instance-with-findings-result
                    'make-scan-ec2instance-with-findings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scan-ec2instance-with-findings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scan-ec2instance-with-findings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volumes))
      (common-lisp:list
       (common-lisp:cons "EbsVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scan-ec2instance-with-findings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-file-path common-lisp:nil
                       ((file-path :initarg :file-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scan-file-path-file-path :shape "String"
                         :location common-lisp:nil :location-name "filePath")
                        (volume-arn :initarg :volume-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scan-file-path-volume-arn :shape "String"
                         :location common-lisp:nil :location-name "volumeArn")
                        (hash :initarg :hash :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scan-file-path-hash :shape "String"
                         :location common-lisp:nil :location-name "hash")
                        (file-name :initarg :file-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scan-file-path-file-name :shape "String"
                         :location common-lisp:nil :location-name "fileName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-file-path
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-file-path
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scan-file-path 'make-scan-file-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-file-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-file-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-arn))
      (common-lisp:list
       (common-lisp:cons "VolumeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash))
      (common-lisp:list
       (common-lisp:cons "Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "FileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-file-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-resource-criteria common-lisp:nil
                       ((include :initarg :include :initform common-lisp:nil
                         :type (common-lisp:or scan-criterion common-lisp:null)
                         :accessor struct-shape-scan-resource-criteria-include
                         :shape "ScanCriterion" :location common-lisp:nil
                         :location-name "include")
                        (exclude :initarg :exclude :initform common-lisp:nil
                         :type (common-lisp:or scan-criterion common-lisp:null)
                         :accessor struct-shape-scan-resource-criteria-exclude
                         :shape "ScanCriterion" :location common-lisp:nil
                         :location-name "exclude"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-resource-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-resource-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scan-resource-criteria 'make-scan-resource-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scan-resource-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scan-resource-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "Include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude))
      (common-lisp:list
       (common-lisp:cons "Exclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scan-resource-criteria))
   common-lisp:nil))
(common-lisp:deftype scan-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scan-result-details common-lisp:nil
                       ((scan-result :initarg :scan-result :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-result common-lisp:null)
                         :accessor struct-shape-scan-result-details-scan-result
                         :shape "ScanResult" :location common-lisp:nil
                         :location-name "scanResult"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-result-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-result-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scan-result-details 'make-scan-result-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-result-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-result-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-result))
      (common-lisp:list
       (common-lisp:cons "ScanResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-result-details))
   common-lisp:nil))
(common-lisp:deftype scan-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scan-threat-name common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scan-threat-name-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-scan-threat-name-severity
                         :shape "String" :location common-lisp:nil
                         :location-name "severity")
                        (item-count :initarg :item-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-scan-threat-name-item-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         "itemCount")
                        (file-paths :initarg :file-paths :initform
                         common-lisp:nil :type
                         (common-lisp:or file-paths common-lisp:null) :accessor
                         struct-shape-scan-threat-name-file-paths :shape
                         "FilePaths" :location common-lisp:nil :location-name
                         "filePaths"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-threat-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-threat-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scan-threat-name 'make-scan-threat-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-threat-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-threat-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-paths))
      (common-lisp:list
       (common-lisp:cons "FilePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-threat-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scan-threat-names ()
   '(trivial-types:proper-list scan-threat-name))
 (common-lisp:defun make-scan-threat-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scan-threat-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scanned-item-count common-lisp:nil
                       ((total-gb :initarg :total-gb :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-scanned-item-count-total-gb
                         :shape "Integer" :location common-lisp:nil
                         :location-name "totalGb")
                        (files :initarg :files :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-scanned-item-count-files :shape "Integer"
                         :location common-lisp:nil :location-name "files")
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-scanned-item-count-volumes
                         :shape "Integer" :location common-lisp:nil
                         :location-name "volumes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scanned-item-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scanned-item-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scanned-item-count 'make-scanned-item-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scanned-item-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scanned-item-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-gb))
      (common-lisp:list
       (common-lisp:cons "TotalGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "Files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scanned-item-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scans () '(trivial-types:proper-list scan))
 (common-lisp:defun make-scans
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scan))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass security-context common-lisp:nil
                       ((privileged :initarg :privileged :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-security-context-privileged :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "privileged")
                        (allow-privilege-escalation :initarg
                         :allow-privilege-escalation :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-security-context-allow-privilege-escalation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "allowPrivilegeEscalation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'security-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-context 'make-security-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-privilege-escalation))
      (common-lisp:list
       (common-lisp:cons "AllowPrivilegeEscalation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-group common-lisp:nil
                       ((group-id :initarg :group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-security-group-group-id :shape
                         "String" :location common-lisp:nil :location-name
                         "groupId")
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-security-group-group-name :shape "String"
                         :location common-lisp:nil :location-name "groupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'security-group 'make-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun make-security-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action common-lisp:null)
                         :accessor struct-shape-service-action :shape "Action"
                         :location common-lisp:nil :location-name "action")
                        (evidence :initarg :evidence :initform common-lisp:nil
                         :type (common-lisp:or evidence common-lisp:null)
                         :accessor struct-shape-service-evidence :shape
                         "Evidence" :location common-lisp:nil :location-name
                         "evidence")
                        (archived :initarg :archived :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-service-archived :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "archived")
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-service-count :shape "Integer" :location
                         common-lisp:nil :location-name "count")
                        (detector-id :initarg :detector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor struct-shape-service-detector-id :shape
                         "DetectorId" :location common-lisp:nil :location-name
                         "detectorId")
                        (event-first-seen :initarg :event-first-seen :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-event-first-seen :shape "String"
                         :location common-lisp:nil :location-name
                         "eventFirstSeen")
                        (event-last-seen :initarg :event-last-seen :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-event-last-seen :shape "String"
                         :location common-lisp:nil :location-name
                         "eventLastSeen")
                        (resource-role :initarg :resource-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-resource-role :shape "String"
                         :location common-lisp:nil :location-name
                         "resourceRole")
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-service-name :shape "String"
                         :location common-lisp:nil :location-name
                         "serviceName")
                        (user-feedback :initarg :user-feedback :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-user-feedback :shape "String"
                         :location common-lisp:nil :location-name
                         "userFeedback")
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or service-additional-info
                                         common-lisp:null)
                         :accessor struct-shape-service-additional-info :shape
                         "ServiceAdditionalInfo" :location common-lisp:nil
                         :location-name "additionalInfo")
                        (feature-name :initarg :feature-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-feature-name :shape "String"
                         :location common-lisp:nil :location-name
                         "featureName")
                        (ebs-volume-scan-details :initarg
                         :ebs-volume-scan-details :initform common-lisp:nil
                         :type
                         (common-lisp:or ebs-volume-scan-details
                                         common-lisp:null)
                         :accessor struct-shape-service-ebs-volume-scan-details
                         :shape "EbsVolumeScanDetails" :location
                         common-lisp:nil :location-name "ebsVolumeScanDetails")
                        (runtime-details :initarg :runtime-details :initform
                         common-lisp:nil :type
                         (common-lisp:or runtime-details common-lisp:null)
                         :accessor struct-shape-service-runtime-details :shape
                         "RuntimeDetails" :location common-lisp:nil
                         :location-name "runtimeDetails")
                        (detection :initarg :detection :initform
                         common-lisp:nil :type
                         (common-lisp:or detection common-lisp:null) :accessor
                         struct-shape-service-detection :shape "Detection"
                         :location common-lisp:nil :location-name "detection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evidence))
      (common-lisp:list
       (common-lisp:cons "Evidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archived))
      (common-lisp:list
       (common-lisp:cons "Archived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detector-id))
      (common-lisp:list
       (common-lisp:cons "DetectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-first-seen))
      (common-lisp:list
       (common-lisp:cons "EventFirstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-last-seen))
      (common-lisp:list
       (common-lisp:cons "EventLastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-feedback))
      (common-lisp:list
       (common-lisp:cons "UserFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-volume-scan-details))
      (common-lisp:list
       (common-lisp:cons "EbsVolumeScanDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-details))
      (common-lisp:list
       (common-lisp:cons "RuntimeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detection))
      (common-lisp:list
       (common-lisp:cons "Detection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-additional-info common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-additional-info-value :shape
                         "String" :location common-lisp:nil :location-name
                         "value")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-additional-info-type :shape
                         "String" :location common-lisp:nil :location-name
                         "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-additional-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-additional-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-additional-info 'make-service-additional-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-additional-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-additional-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-additional-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-session-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sort-criteria common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sort-criteria-attribute-name :shape
                         "String" :location common-lisp:nil :location-name
                         "attributeName")
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by common-lisp:null)
                         :accessor struct-shape-sort-criteria-order-by :shape
                         "OrderBy" :location common-lisp:nil :location-name
                         "orderBy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "OrderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-ips () '(trivial-types:proper-list string))
 (common-lisp:defun make-source-ips
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sources () '(trivial-types:proper-list string))
 (common-lisp:defun make-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-malware-scan-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-start-malware-scan-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-malware-scan-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-malware-scan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-malware-scan-request
                    'make-start-malware-scan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-malware-scan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-malware-scan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-malware-scan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-malware-scan-response common-lisp:nil
                       ((scan-id :initarg :scan-id :initform common-lisp:nil
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-start-malware-scan-response-scan-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name "scanId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-malware-scan-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-malware-scan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-malware-scan-response
                    'make-start-malware-scan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-malware-scan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-malware-scan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-id))
      (common-lisp:list
       (common-lisp:cons "ScanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-malware-scan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-monitoring-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-start-monitoring-members-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-start-monitoring-members-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-monitoring-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-monitoring-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-monitoring-members-request
                    'make-start-monitoring-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-monitoring-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-start-monitoring-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-monitoring-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-monitoring-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-monitoring-members-response
                    'make-start-monitoring-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-monitoring-members-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-stop-monitoring-members-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-stop-monitoring-members-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-monitoring-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-monitoring-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-monitoring-members-request
                    'make-stop-monitoring-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-monitoring-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-stop-monitoring-members-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-monitoring-members-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-monitoring-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-monitoring-members-response
                    'make-stop-monitoring-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-members-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name "key")
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name "value"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or guard-duty-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "GuardDutyArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass threat-detected-by-name common-lisp:nil
                       ((item-count :initarg :item-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-threat-detected-by-name-item-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         "itemCount")
                        (unique-threat-name-count :initarg
                         :unique-threat-name-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-threat-detected-by-name-unique-threat-name-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name "uniqueThreatNameCount")
                        (shortened :initarg :shortened :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-threat-detected-by-name-shortened :shape
                         "Boolean" :location common-lisp:nil :location-name
                         "shortened")
                        (threat-names :initarg :threat-names :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-threat-names common-lisp:null)
                         :accessor
                         struct-shape-threat-detected-by-name-threat-names
                         :shape "ScanThreatNames" :location common-lisp:nil
                         :location-name "threatNames"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-threat-detected-by-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'threat-detected-by-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'threat-detected-by-name 'make-threat-detected-by-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          threat-detected-by-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          threat-detected-by-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-threat-name-count))
      (common-lisp:list
       (common-lisp:cons "UniqueThreatNameCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortened))
      (common-lisp:list
       (common-lisp:cons "Shortened"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threat-names))
      (common-lisp:list
       (common-lisp:cons "ThreatNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          threat-detected-by-name))
   common-lisp:nil))
(common-lisp:deftype threat-intel-set-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype threat-intel-set-ids ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-threat-intel-set-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype threat-intel-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass threat-intelligence-detail common-lisp:nil
                       ((threat-list-name :initarg :threat-list-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-threat-intelligence-detail-threat-list-name
                         :shape "String" :location common-lisp:nil
                         :location-name "threatListName")
                        (threat-names :initarg :threat-names :initform
                         common-lisp:nil :type
                         (common-lisp:or threat-names common-lisp:null)
                         :accessor
                         struct-shape-threat-intelligence-detail-threat-names
                         :shape "ThreatNames" :location common-lisp:nil
                         :location-name "threatNames"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-threat-intelligence-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'threat-intelligence-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'threat-intelligence-detail
                    'make-threat-intelligence-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          threat-intelligence-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          threat-intelligence-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threat-list-name))
      (common-lisp:list
       (common-lisp:cons "ThreatListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threat-names))
      (common-lisp:list
       (common-lisp:cons "ThreatNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          threat-intelligence-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype threat-intelligence-details ()
   '(trivial-types:proper-list threat-intelligence-detail))
 (common-lisp:defun make-threat-intelligence-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            threat-intelligence-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype threat-names () '(trivial-types:proper-list string))
 (common-lisp:defun make-threat-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass threats-detected-item-count common-lisp:nil
                       ((files :initarg :files :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-threats-detected-item-count-files :shape
                         "Integer" :location common-lisp:nil :location-name
                         "files"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-threats-detected-item-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'threats-detected-item-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'threats-detected-item-count
                    'make-threats-detected-item-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          threats-detected-item-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          threats-detected-item-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "Files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          threats-detected-item-count))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass total common-lisp:nil
                       ((amount :initarg :amount :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-total-amount :shape "String"
                         :location common-lisp:nil :location-name "amount")
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-total-unit :shape "String" :location
                         common-lisp:nil :location-name "unit"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-total
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'total
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'total 'make-total))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input total))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input total))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input total))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trigger-details common-lisp:nil
                       ((guard-duty-finding-id :initarg :guard-duty-finding-id
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-trigger-details-guard-duty-finding-id
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name "guardDutyFindingId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-trigger-details-description
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name "description"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trigger-details 'make-trigger-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'guard-duty-finding-id))
      (common-lisp:list
       (common-lisp:cons "GuardDutyFindingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unarchive-findings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-unarchive-findings-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-ids :initarg :finding-ids :initform
                         (common-lisp:error ":finding-ids is required") :type
                         (common-lisp:or finding-ids common-lisp:null)
                         :accessor
                         struct-shape-unarchive-findings-request-finding-ids
                         :shape "FindingIds" :location common-lisp:nil
                         :location-name "findingIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unarchive-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unarchive-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unarchive-findings-request
                    'make-unarchive-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "FindingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unarchive-findings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unarchive-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unarchive-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unarchive-findings-response
                    'make-unarchive-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unprocessed-account common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-unprocessed-account-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         "accountId")
                        (result :initarg :result :initform
                         (common-lisp:error ":result is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-account-result :shape
                         "String" :location common-lisp:nil :location-name
                         "result"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-account
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-account
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-account 'make-unprocessed-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unprocessed-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unprocessed-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-accounts ()
   '(trivial-types:proper-list unprocessed-account))
 (common-lisp:defun make-unprocessed-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-data-sources-result common-lisp:nil
                       ((malware-protection :initarg :malware-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          malware-protection-configuration-result
                          common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-data-sources-result-malware-protection
                         :shape "MalwareProtectionConfigurationResult"
                         :location common-lisp:nil :location-name
                         "malwareProtection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-data-sources-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-data-sources-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-data-sources-result
                    'make-unprocessed-data-sources-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-data-sources-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-data-sources-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-protection))
      (common-lisp:list
       (common-lisp:cons "MalwareProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-data-sources-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or guard-duty-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "GuardDutyArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-detector-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (enable :initarg :enable :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-update-detector-request-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "enable")
                        (finding-publishing-frequency :initarg
                         :finding-publishing-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-publishing-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-detector-request-finding-publishing-frequency
                         :shape "FindingPublishingFrequency" :location
                         common-lisp:nil :location-name
                         "findingPublishingFrequency")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-detector-request-data-sources
                         :shape "DataSourceConfigurations" :location
                         common-lisp:nil :location-name "dataSources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or detector-feature-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-detector-request-features :shape
                         "DetectorFeatureConfigurations" :location
                         common-lisp:nil :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-detector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-detector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-detector-request 'make-update-detector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-publishing-frequency))
      (common-lisp:list
       (common-lisp:cons "FindingPublishingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-detector-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-detector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-detector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-detector-response 'make-update-detector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-detector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-filter-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-filter-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filter-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-filter-request-filter-name :shape
                         "String" :location "uri" :location-name "filterName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-description common-lisp:null)
                         :accessor
                         struct-shape-update-filter-request-description :shape
                         "FilterDescription" :location common-lisp:nil
                         :location-name "description")
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or filter-action common-lisp:null)
                         :accessor struct-shape-update-filter-request-action
                         :shape "FilterAction" :location common-lisp:nil
                         :location-name "action")
                        (rank :initarg :rank :initform common-lisp:nil :type
                         (common-lisp:or filter-rank common-lisp:null)
                         :accessor struct-shape-update-filter-request-rank
                         :shape "FilterRank" :location common-lisp:nil
                         :location-name "rank")
                        (finding-criteria :initarg :finding-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-criteria common-lisp:null)
                         :accessor
                         struct-shape-update-filter-request-finding-criteria
                         :shape "FindingCriteria" :location common-lisp:nil
                         :location-name "findingCriteria"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-filter-request 'make-update-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-criteria))
      (common-lisp:list
       (common-lisp:cons "FindingCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-filter-response common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-update-filter-response-name
                         :shape "FilterName" :location common-lisp:nil
                         :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-filter-response 'make-update-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-feedback-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-findings-feedback-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (finding-ids :initarg :finding-ids :initform
                         (common-lisp:error ":finding-ids is required") :type
                         (common-lisp:or finding-ids common-lisp:null)
                         :accessor
                         struct-shape-update-findings-feedback-request-finding-ids
                         :shape "FindingIds" :location common-lisp:nil
                         :location-name "findingIds")
                        (feedback :initarg :feedback :initform
                         (common-lisp:error ":feedback is required") :type
                         (common-lisp:or feedback common-lisp:null) :accessor
                         struct-shape-update-findings-feedback-request-feedback
                         :shape "Feedback" :location common-lisp:nil
                         :location-name "feedback")
                        (comments :initarg :comments :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-findings-feedback-request-comments
                         :shape "String" :location common-lisp:nil
                         :location-name "comments"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-findings-feedback-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-findings-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-findings-feedback-request
                    'make-update-findings-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "FindingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "Comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-feedback-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-findings-feedback-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-findings-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-findings-feedback-response
                    'make-update-findings-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ipset-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-ipset-request-detector-id :shape
                         "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (ip-set-id :initarg :ip-set-id :initform
                         (common-lisp:error ":ip-set-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-ipset-request-ip-set-id :shape
                         "String" :location "uri" :location-name "ipSetId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-ipset-request-name :shape "Name"
                         :location common-lisp:nil :location-name "name")
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-update-ipset-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name "location")
                        (activate :initarg :activate :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-update-ipset-request-activate
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "activate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ipset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-ipset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ipset-request 'make-update-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activate))
      (common-lisp:list
       (common-lisp:cons "Activate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ipset-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ipset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-ipset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ipset-response 'make-update-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-malware-scan-settings-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-malware-scan-settings-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (scan-resource-criteria :initarg
                         :scan-resource-criteria :initform common-lisp:nil
                         :type
                         (common-lisp:or scan-resource-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-malware-scan-settings-request-scan-resource-criteria
                         :shape "ScanResourceCriteria" :location
                         common-lisp:nil :location-name "scanResourceCriteria")
                        (ebs-snapshot-preservation :initarg
                         :ebs-snapshot-preservation :initform common-lisp:nil
                         :type
                         (common-lisp:or ebs-snapshot-preservation
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-malware-scan-settings-request-ebs-snapshot-preservation
                         :shape "EbsSnapshotPreservation" :location
                         common-lisp:nil :location-name
                         "ebsSnapshotPreservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-malware-scan-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-malware-scan-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-malware-scan-settings-request
                    'make-update-malware-scan-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-malware-scan-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-malware-scan-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-resource-criteria))
      (common-lisp:list
       (common-lisp:cons "ScanResourceCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-snapshot-preservation))
      (common-lisp:list
       (common-lisp:cons "EbsSnapshotPreservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-malware-scan-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-malware-scan-settings-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-malware-scan-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-malware-scan-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-malware-scan-settings-response
                    'make-update-malware-scan-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-malware-scan-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-malware-scan-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-malware-scan-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-member-detectors-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-member-detectors-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor
                         struct-shape-update-member-detectors-request-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-member-detectors-request-data-sources
                         :shape "DataSourceConfigurations" :location
                         common-lisp:nil :location-name "dataSources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or member-features-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-member-detectors-request-features
                         :shape "MemberFeaturesConfigurations" :location
                         common-lisp:nil :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-member-detectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-member-detectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-member-detectors-request
                    'make-update-member-detectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-member-detectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-member-detectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-member-detectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-member-detectors-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :initform
                         (common-lisp:error
                          ":unprocessed-accounts is required")
                         :type
                         (common-lisp:or unprocessed-accounts common-lisp:null)
                         :accessor
                         struct-shape-update-member-detectors-response-unprocessed-accounts
                         :shape "UnprocessedAccounts" :location common-lisp:nil
                         :location-name "unprocessedAccounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-member-detectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-member-detectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-member-detectors-response
                    'make-update-member-detectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-member-detectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-member-detectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-member-detectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-request
                       common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-organization-configuration-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (auto-enable :initarg :auto-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-organization-configuration-request-auto-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "autoEnable")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-data-source-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-update-organization-configuration-request-data-sources
                         :shape "OrganizationDataSourceConfigurations"
                         :location common-lisp:nil :location-name
                         "dataSources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-features-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-organization-configuration-request-features
                         :shape "OrganizationFeaturesConfigurations" :location
                         common-lisp:nil :location-name "features")
                        (auto-enable-organization-members :initarg
                         :auto-enable-organization-members :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-enable-members common-lisp:null)
                         :accessor
                         struct-shape-update-organization-configuration-request-auto-enable-organization-members
                         :shape "AutoEnableMembers" :location common-lisp:nil
                         :location-name "autoEnableOrganizationMembers"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-organization-members))
      (common-lisp:list
       (common-lisp:cons "AutoEnableOrganizationMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-organization-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-response
                    'make-update-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-publishing-destination-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-publishing-destination-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (destination-id :initarg :destination-id :initform
                         (common-lisp:error ":destination-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-publishing-destination-request-destination-id
                         :shape "String" :location "uri" :location-name
                         "destinationId")
                        (destination-properties :initarg
                         :destination-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or destination-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-publishing-destination-request-destination-properties
                         :shape "DestinationProperties" :location
                         common-lisp:nil :location-name
                         "destinationProperties"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-publishing-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-publishing-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-publishing-destination-request
                    'make-update-publishing-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-publishing-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-publishing-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-properties))
      (common-lisp:list
       (common-lisp:cons "DestinationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-publishing-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-publishing-destination-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-publishing-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-publishing-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-publishing-destination-response
                    'make-update-publishing-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-publishing-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-publishing-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-publishing-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-threat-intel-set-request common-lisp:nil
                       ((detector-id :initarg :detector-id :initform
                         (common-lisp:error ":detector-id is required") :type
                         (common-lisp:or detector-id common-lisp:null)
                         :accessor
                         struct-shape-update-threat-intel-set-request-detector-id
                         :shape "DetectorId" :location "uri" :location-name
                         "detectorId")
                        (threat-intel-set-id :initarg :threat-intel-set-id
                         :initform
                         (common-lisp:error ":threat-intel-set-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-threat-intel-set-request-threat-intel-set-id
                         :shape "String" :location "uri" :location-name
                         "threatIntelSetId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-threat-intel-set-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         "name")
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor
                         struct-shape-update-threat-intel-set-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name "location")
                        (activate :initarg :activate :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-threat-intel-set-request-activate
                         :shape "Boolean" :location common-lisp:nil
                         :location-name "activate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-threat-intel-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-threat-intel-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-threat-intel-set-request
                    'make-update-threat-intel-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-threat-intel-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-threat-intel-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activate))
      (common-lisp:list
       (common-lisp:cons "Activate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-threat-intel-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-threat-intel-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-threat-intel-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-threat-intel-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-threat-intel-set-response
                    'make-update-threat-intel-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-threat-intel-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-threat-intel-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-threat-intel-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-account-result common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-usage-account-result-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         "accountId")
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or total common-lisp:null) :accessor
                         struct-shape-usage-account-result-total :shape "Total"
                         :location common-lisp:nil :location-name "total"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-account-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-account-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-account-result 'make-usage-account-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-account-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-account-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-account-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-account-result-list ()
   '(trivial-types:proper-list usage-account-result))
 (common-lisp:defun make-usage-account-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-account-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass usage-criteria common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or account-ids common-lisp:null)
                         :accessor struct-shape-usage-criteria-account-ids
                         :shape "AccountIds" :location common-lisp:nil
                         :location-name "accountIds")
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source-list common-lisp:null)
                         :accessor struct-shape-usage-criteria-data-sources
                         :shape "DataSourceList" :location common-lisp:nil
                         :location-name "dataSources")
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor struct-shape-usage-criteria-resources :shape
                         "ResourceList" :location common-lisp:nil
                         :location-name "resources")
                        (features :initarg :features :initform common-lisp:nil
                         :type
                         (common-lisp:or usage-feature-list common-lisp:null)
                         :accessor struct-shape-usage-criteria-features :shape
                         "UsageFeatureList" :location common-lisp:nil
                         :location-name "features"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'usage-criteria 'make-usage-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-data-source-result common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-usage-data-source-result-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name "dataSource")
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or total common-lisp:null) :accessor
                         struct-shape-usage-data-source-result-total :shape
                         "Total" :location common-lisp:nil :location-name
                         "total"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-data-source-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-data-source-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-data-source-result 'make-usage-data-source-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-data-source-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-data-source-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-data-source-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-data-source-result-list ()
   '(trivial-types:proper-list usage-data-source-result))
 (common-lisp:defun make-usage-data-source-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            usage-data-source-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype usage-feature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype usage-feature-list ()
   '(trivial-types:proper-list usage-feature))
 (common-lisp:defun make-usage-feature-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass usage-feature-result common-lisp:nil
                       ((feature :initarg :feature :initform common-lisp:nil
                         :type (common-lisp:or usage-feature common-lisp:null)
                         :accessor struct-shape-usage-feature-result-feature
                         :shape "UsageFeature" :location common-lisp:nil
                         :location-name "feature")
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or total common-lisp:null) :accessor
                         struct-shape-usage-feature-result-total :shape "Total"
                         :location common-lisp:nil :location-name "total"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-feature-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-feature-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-feature-result 'make-usage-feature-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-feature-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-feature-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "Feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-feature-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-feature-result-list ()
   '(trivial-types:proper-list usage-feature-result))
 (common-lisp:defun make-usage-feature-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-feature-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass usage-resource-result common-lisp:nil
                       ((resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-usage-resource-result-resource
                         :shape "String" :location common-lisp:nil
                         :location-name "resource")
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or total common-lisp:null) :accessor
                         struct-shape-usage-resource-result-total :shape
                         "Total" :location common-lisp:nil :location-name
                         "total"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-resource-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-resource-result 'make-usage-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-resource-result-list ()
   '(trivial-types:proper-list usage-resource-result))
 (common-lisp:defun make-usage-resource-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-resource-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype usage-statistic-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-statistics common-lisp:nil
                       ((sum-by-account :initarg :sum-by-account :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-account-result-list
                                         common-lisp:null)
                         :accessor struct-shape-usage-statistics-sum-by-account
                         :shape "UsageAccountResultList" :location
                         common-lisp:nil :location-name "sumByAccount")
                        (top-accounts-by-feature :initarg
                         :top-accounts-by-feature :initform common-lisp:nil
                         :type
                         (common-lisp:or usage-top-accounts-result-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-usage-statistics-top-accounts-by-feature
                         :shape "UsageTopAccountsResultList" :location
                         common-lisp:nil :location-name "topAccountsByFeature")
                        (sum-by-data-source :initarg :sum-by-data-source
                         :initform common-lisp:nil :type
                         (common-lisp:or usage-data-source-result-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-usage-statistics-sum-by-data-source
                         :shape "UsageDataSourceResultList" :location
                         common-lisp:nil :location-name "sumByDataSource")
                        (sum-by-resource :initarg :sum-by-resource :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-resource-result-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-usage-statistics-sum-by-resource :shape
                         "UsageResourceResultList" :location common-lisp:nil
                         :location-name "sumByResource")
                        (top-resources :initarg :top-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-resource-result-list
                                         common-lisp:null)
                         :accessor struct-shape-usage-statistics-top-resources
                         :shape "UsageResourceResultList" :location
                         common-lisp:nil :location-name "topResources")
                        (sum-by-feature :initarg :sum-by-feature :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-feature-result-list
                                         common-lisp:null)
                         :accessor struct-shape-usage-statistics-sum-by-feature
                         :shape "UsageFeatureResultList" :location
                         common-lisp:nil :location-name "sumByFeature"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-statistics 'make-usage-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-by-account))
      (common-lisp:list
       (common-lisp:cons "SumByAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'top-accounts-by-feature))
      (common-lisp:list
       (common-lisp:cons "TopAccountsByFeature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-by-data-source))
      (common-lisp:list
       (common-lisp:cons "SumByDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-by-resource))
      (common-lisp:list
       (common-lisp:cons "SumByResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-resources))
      (common-lisp:list
       (common-lisp:cons "TopResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-by-feature))
      (common-lisp:list
       (common-lisp:cons "SumByFeature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-top-account-result common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-usage-top-account-result-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name "accountId")
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or total common-lisp:null) :accessor
                         struct-shape-usage-top-account-result-total :shape
                         "Total" :location common-lisp:nil :location-name
                         "total"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-top-account-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-top-account-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-top-account-result 'make-usage-top-account-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-top-account-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-top-account-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-top-account-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-top-accounts-by-feature-list ()
   '(trivial-types:proper-list usage-top-account-result))
 (common-lisp:defun make-usage-top-accounts-by-feature-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            usage-top-account-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass usage-top-accounts-result common-lisp:nil
                       ((feature :initarg :feature :initform common-lisp:nil
                         :type (common-lisp:or usage-feature common-lisp:null)
                         :accessor
                         struct-shape-usage-top-accounts-result-feature :shape
                         "UsageFeature" :location common-lisp:nil
                         :location-name "feature")
                        (accounts :initarg :accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or usage-top-accounts-by-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-usage-top-accounts-result-accounts :shape
                         "UsageTopAccountsByFeatureList" :location
                         common-lisp:nil :location-name "accounts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-top-accounts-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-top-accounts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-top-accounts-result
                    'make-usage-top-accounts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-top-accounts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-top-accounts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "Feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-top-accounts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-top-accounts-result-list ()
   '(trivial-types:proper-list usage-top-accounts-result))
 (common-lisp:defun make-usage-top-accounts-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            usage-top-accounts-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass volume common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-name :shape "String" :location
                         common-lisp:nil :location-name "name")
                        (host-path :initarg :host-path :initform
                         common-lisp:nil :type
                         (common-lisp:or host-path common-lisp:null) :accessor
                         struct-shape-volume-host-path :shape "HostPath"
                         :location common-lisp:nil :location-name "hostPath"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-path))
      (common-lisp:list
       (common-lisp:cons "HostPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume-detail common-lisp:nil
                       ((volume-arn :initarg :volume-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-detail-volume-arn :shape "String"
                         :location common-lisp:nil :location-name "volumeArn")
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-detail-volume-type :shape "String"
                         :location common-lisp:nil :location-name "volumeType")
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-detail-device-name :shape "String"
                         :location common-lisp:nil :location-name "deviceName")
                        (volume-size-in-gb :initarg :volume-size-in-gb
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-detail-volume-size-in-gb :shape
                         "Integer" :location common-lisp:nil :location-name
                         "volumeSizeInGB")
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-detail-encryption-type :shape
                         "String" :location common-lisp:nil :location-name
                         "encryptionType")
                        (snapshot-arn :initarg :snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-detail-snapshot-arn :shape
                         "String" :location common-lisp:nil :location-name
                         "snapshotArn")
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-detail-kms-key-arn :shape "String"
                         :location common-lisp:nil :location-name "kmsKeyArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume-detail 'make-volume-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-arn))
      (common-lisp:list
       (common-lisp:cons "VolumeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-details ()
   '(trivial-types:proper-list volume-detail))
 (common-lisp:defun make-volume-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass volume-mount common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-mount-name :shape "String"
                         :location common-lisp:nil :location-name "name")
                        (mount-path :initarg :mount-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-mount-mount-path :shape "String"
                         :location common-lisp:nil :location-name "mountPath"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume-mount
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume-mount
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume-mount 'make-volume-mount))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-mount))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-mount))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-path))
      (common-lisp:list
       (common-lisp:cons "MountPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-mount))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-mounts ()
   '(trivial-types:proper-list volume-mount))
 (common-lisp:defun make-volume-mounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-mount))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype volumes () '(trivial-types:proper-list volume))
 (common-lisp:defun make-volumes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-config common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-vpc-config-subnet-ids :shape "SubnetIds"
                         :location common-lisp:nil :location-name "subnetIds")
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-vpc-config-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         "vpcId")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor struct-shape-vpc-config-security-groups
                         :shape "SecurityGroups" :location common-lisp:nil
                         :location-name "securityGroups"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun accept-administrator-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id administrator-id
                     invitation-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id administrator-id invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-administrator-invitation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/administrator"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "AcceptAdministratorInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-administrator-invitation))
(common-lisp:progn
 (common-lisp:defun accept-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id master-id invitation-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id master-id invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/master"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "AcceptInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-invitation))
(common-lisp:progn
 (common-lisp:defun archive-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id finding-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-archive-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings/archive"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ArchiveFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'archive-findings))
(common-lisp:progn
 (common-lisp:defun create-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enable client-token
                     finding-publishing-frequency data-sources tags features)
   (common-lisp:declare
    (common-lisp:ignorable enable client-token finding-publishing-frequency
     data-sources tags features))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/detector"
                                                        "CreateDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-detector))
(common-lisp:progn
 (common-lisp:defun create-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id name description action rank
                     finding-criteria client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id name description action rank
     finding-criteria client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/filter"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "CreateFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-filter))
(common-lisp:progn
 (common-lisp:defun create-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id name format location activate
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id name format location activate
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/ipset"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "CreateIPSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-ipset))
(common-lisp:progn
 (common-lisp:defun create-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-details)
   (common-lisp:declare (common-lisp:ignorable detector-id account-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "CreateMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-members))
(common-lisp:progn
 (common-lisp:defun create-publishing-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id destination-type
                     destination-properties client-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id destination-type destination-properties
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-publishing-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/publishingDestination"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "CreatePublishingDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-publishing-destination))
(common-lisp:progn
 (common-lisp:defun create-sample-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-types)
   (common-lisp:declare (common-lisp:ignorable detector-id finding-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sample-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings/create"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "CreateSampleFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sample-findings))
(common-lisp:progn
 (common-lisp:defun create-threat-intel-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id name format location activate
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable detector-id name format location activate
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-threat-intel-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/threatintelset"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "CreateThreatIntelSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-threat-intel-set))
(common-lisp:progn
 (common-lisp:defun decline-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decline-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/invitation/decline"
                                                        "DeclineInvitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'decline-invitations))
(common-lisp:progn
 (common-lisp:defun delete-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DeleteDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-detector))
(common-lisp:progn
 (common-lisp:defun delete-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id filter-name)
   (common-lisp:declare (common-lisp:ignorable detector-id filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/filter/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'filter-name))))
                                                        "DeleteFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-filter))
(common-lisp:progn
 (common-lisp:defun delete-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id ip-set-id)
   (common-lisp:declare (common-lisp:ignorable detector-id ip-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/ipset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ip-set-id))))
                                                        "DeleteIPSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-ipset))
(common-lisp:progn
 (common-lisp:defun delete-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/invitation/delete"
                                                        "DeleteInvitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-invitations))
(common-lisp:progn
 (common-lisp:defun delete-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DeleteMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-members))
(common-lisp:progn
 (common-lisp:defun delete-publishing-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id destination-id)
   (common-lisp:declare (common-lisp:ignorable detector-id destination-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-publishing-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/publishingDestination/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'destination-id))))
                                                        "DeletePublishingDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-publishing-destination))
(common-lisp:progn
 (common-lisp:defun delete-threat-intel-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id threat-intel-set-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id threat-intel-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-threat-intel-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/threatintelset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'threat-intel-set-id))))
                                                        "DeleteThreatIntelSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-threat-intel-set))
(common-lisp:progn
 (common-lisp:defun describe-malware-scans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id next-token max-results
                     filter-criteria sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable detector-id next-token max-results filter-criteria
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-malware-scans-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/malware-scans"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DescribeMalwareScans"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-malware-scans))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/admin"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DescribeOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun describe-publishing-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id destination-id)
   (common-lisp:declare (common-lisp:ignorable detector-id destination-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-publishing-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/publishingDestination/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'destination-id))))
                                                        "DescribePublishingDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-publishing-destination))
(common-lisp:progn
 (common-lisp:defun disable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/admin/disable"
                                                        "DisableOrganizationAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-administrator-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-from-administrator-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/administrator/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DisassociateFromAdministratorAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-from-administrator-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-master-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-from-master-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/master/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DisassociateFromMasterAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-from-master-account))
(common-lisp:progn
 (common-lisp:defun disassociate-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "DisassociateMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-members))
(common-lisp:progn
 (common-lisp:defun enable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/admin/enable"
                                                        "EnableOrganizationAdminAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun get-administrator-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-administrator-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/administrator"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetAdministratorAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-administrator-account))
(common-lisp:progn
 (common-lisp:defun get-coverage-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id filter-criteria
                     statistics-type)
   (common-lisp:declare
    (common-lisp:ignorable detector-id filter-criteria statistics-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-coverage-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/coverage/statistics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetCoverageStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-coverage-statistics))
(common-lisp:progn
 (common-lisp:defun get-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-detector))
(common-lisp:progn
 (common-lisp:defun get-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id filter-name)
   (common-lisp:declare (common-lisp:ignorable detector-id filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/filter/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'filter-name))))
                                                        "GetFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-filter))
(common-lisp:progn
 (common-lisp:defun get-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-ids sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable detector-id finding-ids sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings/get"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-findings))
(common-lisp:progn
 (common-lisp:defun get-findings-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-statistic-types
                     finding-criteria)
   (common-lisp:declare
    (common-lisp:ignorable detector-id finding-statistic-types
     finding-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings/statistics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetFindingsStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-findings-statistics))
(common-lisp:progn
 (common-lisp:defun get-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id ip-set-id)
   (common-lisp:declare (common-lisp:ignorable detector-id ip-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/ipset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ip-set-id))))
                                                        "GetIPSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-ipset))
(common-lisp:progn
 (common-lisp:defun get-invitations-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'guardduty-request :method "GET" :path
                                "/invitation/count" :operation
                                "GetInvitationsCount"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-invitations-count))
(common-lisp:progn
 (common-lisp:defun get-malware-scan-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-malware-scan-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/malware-scan-settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetMalwareScanSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-malware-scan-settings))
(common-lisp:progn
 (common-lisp:defun get-master-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id)
   (common-lisp:declare (common-lisp:ignorable detector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-master-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/master"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetMasterAccount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-master-account))
(common-lisp:progn
 (common-lisp:defun get-member-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-member-detectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/detector/get"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetMemberDetectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-member-detectors))
(common-lisp:progn
 (common-lisp:defun get-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/get"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-members))
(common-lisp:progn
 (common-lisp:defun get-organization-statistics ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'guardduty-request :method "GET" :path
                                "/organization/statistics" :operation
                                "GetOrganizationStatistics"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-organization-statistics))
(common-lisp:progn
 (common-lisp:defun get-remaining-free-trial-days
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-remaining-free-trial-days-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/freeTrial/daysRemaining"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetRemainingFreeTrialDays"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-remaining-free-trial-days))
(common-lisp:progn
 (common-lisp:defun get-threat-intel-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id threat-intel-set-id)
   (common-lisp:declare
    (common-lisp:ignorable detector-id threat-intel-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-threat-intel-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/threatintelset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'threat-intel-set-id))))
                                                        "GetThreatIntelSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-threat-intel-set))
(common-lisp:progn
 (common-lisp:defun get-usage-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id usage-statistic-type
                     usage-criteria unit max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id usage-statistic-type usage-criteria unit
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/usage/statistics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "GetUsageStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-usage-statistics))
(common-lisp:progn
 (common-lisp:defun invite-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids
                     disable-email-notification message)
   (common-lisp:declare
    (common-lisp:ignorable detector-id account-ids disable-email-notification
     message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invite-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/invite"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "InviteMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invite-members))
(common-lisp:progn
 (common-lisp:defun list-coverage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id next-token max-results
                     filter-criteria sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable detector-id next-token max-results filter-criteria
     sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-coverage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/coverage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListCoverage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-coverage))
(common-lisp:progn
 (common-lisp:defun list-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-detectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/detector"
                                                        "ListDetectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-detectors))
(common-lisp:progn
 (common-lisp:defun list-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/filter"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListFilters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-filters))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-criteria
                     sort-criteria max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id finding-criteria sort-criteria
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-ipsets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ipsets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/ipset"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListIPSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-ipsets))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/invitation"
                                                        "ListInvitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id max-results next-token
                     only-associated)
   (common-lisp:declare
    (common-lisp:ignorable detector-id max-results next-token only-associated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-organization-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/admin"
                                                        "ListOrganizationAdminAccounts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-organization-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-publishing-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-publishing-destinations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/publishingDestination"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListPublishingDestinations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-publishing-destinations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-threat-intel-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable detector-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-threat-intel-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/threatintelset"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "ListThreatIntelSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-threat-intel-sets))
(common-lisp:progn
 (common-lisp:defun start-malware-scan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-malware-scan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/malware-scan/start"
                                                        "StartMalwareScan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-malware-scan))
(common-lisp:progn
 (common-lisp:defun start-monitoring-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-monitoring-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "StartMonitoringMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-monitoring-members))
(common-lisp:progn
 (common-lisp:defun stop-monitoring-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-monitoring-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "StopMonitoringMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-monitoring-members))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun unarchive-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-ids)
   (common-lisp:declare (common-lisp:ignorable detector-id finding-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unarchive-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings/unarchive"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "UnarchiveFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unarchive-findings))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-detector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id enable
                     finding-publishing-frequency data-sources features)
   (common-lisp:declare
    (common-lisp:ignorable detector-id enable finding-publishing-frequency
     data-sources features))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-detector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "UpdateDetector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-detector))
(common-lisp:progn
 (common-lisp:defun update-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id filter-name description
                     action rank finding-criteria)
   (common-lisp:declare
    (common-lisp:ignorable detector-id filter-name description action rank
     finding-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/filter/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'filter-name))))
                                                        "UpdateFilter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-filter))
(common-lisp:progn
 (common-lisp:defun update-findings-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id finding-ids feedback
                     comments)
   (common-lisp:declare
    (common-lisp:ignorable detector-id finding-ids feedback comments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/findings/feedback"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "UpdateFindingsFeedback"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-findings-feedback))
(common-lisp:progn
 (common-lisp:defun update-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id ip-set-id name location
                     activate)
   (common-lisp:declare
    (common-lisp:ignorable detector-id ip-set-id name location activate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/ipset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ip-set-id))))
                                                        "UpdateIPSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-ipset))
(common-lisp:progn
 (common-lisp:defun update-malware-scan-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id scan-resource-criteria
                     ebs-snapshot-preservation)
   (common-lisp:declare
    (common-lisp:ignorable detector-id scan-resource-criteria
     ebs-snapshot-preservation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-malware-scan-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/malware-scan-settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "UpdateMalwareScanSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-malware-scan-settings))
(common-lisp:progn
 (common-lisp:defun update-member-detectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id account-ids data-sources
                     features)
   (common-lisp:declare
    (common-lisp:ignorable detector-id account-ids data-sources features))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-member-detectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/member/detector/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "UpdateMemberDetectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-member-detectors))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id auto-enable data-sources
                     features auto-enable-organization-members)
   (common-lisp:declare
    (common-lisp:ignorable detector-id auto-enable data-sources features
     auto-enable-organization-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/admin"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))))
                                                        "UpdateOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-organization-configuration))
(common-lisp:progn
 (common-lisp:defun update-publishing-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id destination-id
                     destination-properties)
   (common-lisp:declare
    (common-lisp:ignorable detector-id destination-id destination-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-publishing-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/publishingDestination/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'destination-id))))
                                                        "UpdatePublishingDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-publishing-destination))
(common-lisp:progn
 (common-lisp:defun update-threat-intel-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key detector-id threat-intel-set-id name
                     location activate)
   (common-lisp:declare
    (common-lisp:ignorable detector-id threat-intel-set-id name location
     activate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-threat-intel-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'guardduty-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detector/~A/threatintelset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'detector-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'threat-intel-set-id))))
                                                        "UpdateThreatIntelSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-threat-intel-set))
