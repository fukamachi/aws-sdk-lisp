;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudhsmv2/api
  (:use)
  (:nicknames #:aws/cloudhsmv2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudhsmv2/api)
(common-lisp:progn
 (common-lisp:define-condition cloudhsmv2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudhsmv2-error))
(common-lisp:progn
 (common-lisp:defclass cloudhsmv2-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "cloudhsmv2" :api-version
                        "2017-04-28" :host-prefix "cloudhsmv2" :signing-name
                        "cloudhsm" :global-host common-lisp:nil :target-prefix
                        "BaldrApiService" :json-version "1.1"))
 (common-lisp:export 'cloudhsmv2-request))
(common-lisp:defvar *error-map*
  '(("CloudHsmAccessDeniedException" . cloud-hsm-access-denied-exception)
    ("CloudHsmInternalFailureException" . cloud-hsm-internal-failure-exception)
    ("CloudHsmInvalidRequestException" . cloud-hsm-invalid-request-exception)
    ("CloudHsmResourceNotFoundException"
     . cloud-hsm-resource-not-found-exception)
    ("CloudHsmServiceException" . cloud-hsm-service-exception)
    ("CloudHsmTagException" . cloud-hsm-tag-exception)))
(common-lisp:progn
 (common-lisp:defclass backup common-lisp:nil
                       ((backup-id :initarg :backup-id :initform
                         (common-lisp:error ":backup-id is required") :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-backup-backup-id :shape "BackupId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (backup-state :initarg :backup-state :initform
                         common-lisp:nil :type
                         (common-lisp:or backup-state common-lisp:null)
                         :accessor struct-shape-backup-backup-state :shape
                         "BackupState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-backup-cluster-id :shape "ClusterId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-timestamp :initarg :create-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-backup-create-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (copy-timestamp :initarg :copy-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-backup-copy-timestamp :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (never-expires :initarg :never-expires :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-backup-never-expires :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-backup-source-region :shape "Region"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-backup :initarg :source-backup :initform
                         common-lisp:nil :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-backup-source-backup :shape "BackupId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-cluster :initarg :source-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-backup-source-cluster :shape "ClusterId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delete-timestamp :initarg :delete-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-backup-delete-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-backup-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backup
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'backup 'make-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-state))
      (common-lisp:list
       (common-lisp:cons "BackupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-timestamp))
      (common-lisp:list
       (common-lisp:cons "CopyTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'never-expires))
      (common-lisp:list
       (common-lisp:cons "NeverExpires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup))
      (common-lisp:list
       (common-lisp:cons "SourceBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-cluster))
      (common-lisp:list
       (common-lisp:cons "SourceCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-timestamp))
      (common-lisp:list
       (common-lisp:cons "DeleteTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup))
   common-lisp:nil))
(common-lisp:deftype backup-id () 'common-lisp:string)
(common-lisp:deftype backup-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass backup-retention-policy common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or backup-retention-type
                                         common-lisp:null)
                         :accessor struct-shape-backup-retention-policy-type
                         :shape "BackupRetentionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or backup-retention-value
                                         common-lisp:null)
                         :accessor struct-shape-backup-retention-policy-value
                         :shape "BackupRetentionValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backup-retention-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backup-retention-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backup-retention-policy 'make-backup-retention-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-retention-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-retention-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-retention-policy))
   common-lisp:nil))
(common-lisp:deftype backup-retention-type () 'common-lisp:string)
(common-lisp:deftype backup-retention-value () 'common-lisp:string)
(common-lisp:deftype backup-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backups () '(trivial-types:proper-list backup))
 (common-lisp:defun make-backups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype backups-max-size () 'common-lisp:integer)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype cert () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificates common-lisp:nil
                       ((cluster-csr :initarg :cluster-csr :initform
                         common-lisp:nil :type
                         (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-certificates-cluster-csr :shape "Cert"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsm-certificate :initarg :hsm-certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-certificates-hsm-certificate :shape
                         "Cert" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-hardware-certificate :initarg
                         :aws-hardware-certificate :initform common-lisp:nil
                         :type (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-certificates-aws-hardware-certificate
                         :shape "Cert" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manufacturer-hardware-certificate :initarg
                         :manufacturer-hardware-certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-certificates-manufacturer-hardware-certificate
                         :shape "Cert" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-certificate :initarg :cluster-certificate
                         :initform common-lisp:nil :type
                         (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-certificates-cluster-certificate :shape
                         "Cert" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificates
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificates 'make-certificates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-csr))
      (common-lisp:list
       (common-lisp:cons "ClusterCsr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-certificate))
      (common-lisp:list
       (common-lisp:cons "HsmCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-hardware-certificate))
      (common-lisp:list
       (common-lisp:cons "AwsHardwareCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-hardware-certificate))
      (common-lisp:list
       (common-lisp:cons "ManufacturerHardwareCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-certificate))
      (common-lisp:list
       (common-lisp:cons "ClusterCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-access-denied-exception
     (cloudhsmv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-access-denied-exception
                    'cloud-hsm-access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-internal-failure-exception
     (cloudhsmv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-internal-failure-exception
                    'cloud-hsm-internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-invalid-request-exception
     (cloudhsmv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-invalid-request-exception
                    'cloud-hsm-invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-resource-not-found-exception
     (cloudhsmv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-resource-not-found-exception
                    'cloud-hsm-resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-service-exception
     (cloudhsmv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-service-exception
                    'cloud-hsm-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-tag-exception
     (cloudhsmv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-tag-exception 'cloud-hsm-tag-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((backup-policy :initarg :backup-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or backup-policy common-lisp:null)
                         :accessor struct-shape-cluster-backup-policy :shape
                         "BackupPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-policy :initarg
                         :backup-retention-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or backup-retention-policy
                                         common-lisp:null)
                         :accessor struct-shape-cluster-backup-retention-policy
                         :shape "BackupRetentionPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-cluster-cluster-id :shape "ClusterId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-timestamp :initarg :create-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cluster-create-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsms :initarg :hsms :initform common-lisp:nil :type
                         (common-lisp:or hsms common-lisp:null) :accessor
                         struct-shape-cluster-hsms :shape "Hsms" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hsm-type :initarg :hsm-type :initform common-lisp:nil
                         :type (common-lisp:or hsm-type common-lisp:null)
                         :accessor struct-shape-cluster-hsm-type :shape
                         "HsmType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pre-co-password :initarg :pre-co-password :initform
                         common-lisp:nil :type
                         (common-lisp:or pre-co-password common-lisp:null)
                         :accessor struct-shape-cluster-pre-co-password :shape
                         "PreCoPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group :initarg :security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or security-group common-lisp:null)
                         :accessor struct-shape-cluster-security-group :shape
                         "SecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-backup-id :initarg :source-backup-id :initform
                         common-lisp:nil :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-cluster-source-backup-id :shape
                         "BackupId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-cluster-state :shape
                         "ClusterState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-message :initarg :state-message :initform
                         common-lisp:nil :type
                         (common-lisp:or state-message common-lisp:null)
                         :accessor struct-shape-cluster-state-message :shape
                         "StateMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-mapping :initarg :subnet-mapping :initform
                         common-lisp:nil :type
                         (common-lisp:or external-subnet-mapping
                                         common-lisp:null)
                         :accessor struct-shape-cluster-subnet-mapping :shape
                         "ExternalSubnetMapping" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-cluster-vpc-id :shape "VpcId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificates common-lisp:null)
                         :accessor struct-shape-cluster-certificates :shape
                         "Certificates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-cluster-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-policy))
      (common-lisp:list
       (common-lisp:cons "BackupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-policy))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsms))
      (common-lisp:list
       (common-lisp:cons "Hsms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-type))
      (common-lisp:list
       (common-lisp:cons "HsmType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-co-password))
      (common-lisp:list
       (common-lisp:cons "PreCoPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup-id))
      (common-lisp:list
       (common-lisp:cons "SourceBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-message))
      (common-lisp:list
       (common-lisp:cons "StateMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mapping))
      (common-lisp:list
       (common-lisp:cons "SubnetMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype clusters () '(trivial-types:proper-list cluster))
 (common-lisp:defun make-clusters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:deftype clusters-max-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass copy-backup-to-region-request common-lisp:nil
                       ((destination-region :initarg :destination-region
                         :initform
                         (common-lisp:error ":destination-region is required")
                         :type (common-lisp:or region common-lisp:null)
                         :accessor
                         struct-shape-copy-backup-to-region-request-destination-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-id :initarg :backup-id :initform
                         (common-lisp:error ":backup-id is required") :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-copy-backup-to-region-request-backup-id
                         :shape "BackupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor
                         struct-shape-copy-backup-to-region-request-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-backup-to-region-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-backup-to-region-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-backup-to-region-request
                    'make-copy-backup-to-region-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-backup-to-region-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-backup-to-region-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-backup-to-region-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-backup-to-region-response common-lisp:nil
                       ((destination-backup :initarg :destination-backup
                         :initform common-lisp:nil :type
                         (common-lisp:or destination-backup common-lisp:null)
                         :accessor
                         struct-shape-copy-backup-to-region-response-destination-backup
                         :shape "DestinationBackup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-backup-to-region-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-backup-to-region-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-backup-to-region-response
                    'make-copy-backup-to-region-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-backup-to-region-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-backup-to-region-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-backup))
      (common-lisp:list
       (common-lisp:cons "DestinationBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-backup-to-region-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((backup-retention-policy :initarg
                         :backup-retention-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or backup-retention-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-backup-retention-policy
                         :shape "BackupRetentionPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hsm-type :initarg :hsm-type :initform
                         (common-lisp:error ":hsm-type is required") :type
                         (common-lisp:or hsm-type common-lisp:null) :accessor
                         struct-shape-create-cluster-request-hsm-type :shape
                         "HsmType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-backup-id :initarg :source-backup-id :initform
                         common-lisp:nil :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-create-cluster-request-source-backup-id
                         :shape "BackupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-create-cluster-request-subnet-ids :shape
                         "SubnetIds" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-create-cluster-request-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-policy))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-type))
      (common-lisp:list
       (common-lisp:cons "HsmType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup-id))
      (common-lisp:list
       (common-lisp:cons "SourceBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-create-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hsm-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-create-hsm-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availability-zone is required")
                         :type (common-lisp:or external-az common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-request-availability-zone
                         :shape "ExternalAz" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-create-hsm-request-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hsm-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-hsm-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hsm-request 'make-create-hsm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-hsm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-hsm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-hsm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hsm-response common-lisp:nil
                       ((hsm :initarg :hsm :initform common-lisp:nil :type
                         (common-lisp:or hsm common-lisp:null) :accessor
                         struct-shape-create-hsm-response-hsm :shape "Hsm"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hsm-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-hsm-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hsm-response 'make-create-hsm-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-hsm-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-hsm-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm))
      (common-lisp:list
       (common-lisp:cons "Hsm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-hsm-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-request common-lisp:nil
                       ((backup-id :initarg :backup-id :initform
                         (common-lisp:error ":backup-id is required") :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-delete-backup-request-backup-id :shape
                         "BackupId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backup-request 'make-delete-backup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-response common-lisp:nil
                       ((backup :initarg :backup :initform common-lisp:nil
                         :type (common-lisp:or backup common-lisp:null)
                         :accessor struct-shape-delete-backup-response-backup
                         :shape "Backup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backup-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backup-response 'make-delete-backup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup))
      (common-lisp:list
       (common-lisp:cons "Backup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-delete-cluster-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-delete-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-hsm-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-delete-hsm-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsm-id :initarg :hsm-id :initform common-lisp:nil
                         :type (common-lisp:or hsm-id common-lisp:null)
                         :accessor struct-shape-delete-hsm-request-hsm-id
                         :shape "HsmId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eni-id :initarg :eni-id :initform common-lisp:nil
                         :type (common-lisp:or eni-id common-lisp:null)
                         :accessor struct-shape-delete-hsm-request-eni-id
                         :shape "EniId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eni-ip :initarg :eni-ip :initform common-lisp:nil
                         :type (common-lisp:or ip-address common-lisp:null)
                         :accessor struct-shape-delete-hsm-request-eni-ip
                         :shape "IpAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hsm-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-hsm-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hsm-request 'make-delete-hsm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-hsm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-hsm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-id))
      (common-lisp:list
       (common-lisp:cons "HsmId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eni-id))
      (common-lisp:list
       (common-lisp:cons "EniId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eni-ip))
      (common-lisp:list
       (common-lisp:cons "EniIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-hsm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-hsm-response common-lisp:nil
                       ((hsm-id :initarg :hsm-id :initform common-lisp:nil
                         :type (common-lisp:or hsm-id common-lisp:null)
                         :accessor struct-shape-delete-hsm-response-hsm-id
                         :shape "HsmId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hsm-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-hsm-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hsm-response 'make-delete-hsm-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-hsm-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-hsm-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-id))
      (common-lisp:list
       (common-lisp:cons "HsmId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-hsm-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-backups-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or backups-max-size common-lisp:null)
                         :accessor
                         struct-shape-describe-backups-request-max-results
                         :shape "BackupsMaxSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-describe-backups-request-filters :shape
                         "Filters" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-ascending :initarg :sort-ascending :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-backups-request-sort-ascending
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-backups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-backups-request 'make-describe-backups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-ascending))
      (common-lisp:list
       (common-lisp:cons "SortAscending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backups-response common-lisp:nil
                       ((backups :initarg :backups :initform common-lisp:nil
                         :type (common-lisp:or backups common-lisp:null)
                         :accessor
                         struct-shape-describe-backups-response-backups :shape
                         "Backups" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-backups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-backups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-backups-response
                    'make-describe-backups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backups))
      (common-lisp:list
       (common-lisp:cons "Backups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-request-filters :shape
                         "Filters" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-clusters-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or clusters-max-size common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-request-max-results
                         :shape "ClustersMaxSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-request
                    'make-describe-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-response common-lisp:nil
                       ((clusters :initarg :clusters :initform common-lisp:nil
                         :type (common-lisp:or clusters common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-response-clusters
                         :shape "Clusters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-clusters-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-clusters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-response
                    'make-describe-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-backup common-lisp:nil
                       ((create-timestamp :initarg :create-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-destination-backup-create-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-destination-backup-source-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-backup :initarg :source-backup :initform
                         common-lisp:nil :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-destination-backup-source-backup :shape
                         "BackupId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-cluster :initarg :source-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-destination-backup-source-cluster :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-backup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-backup 'make-destination-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup))
      (common-lisp:list
       (common-lisp:cons "SourceBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-cluster))
      (common-lisp:list
       (common-lisp:cons "SourceCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-backup))
   common-lisp:nil))
(common-lisp:deftype eni-id () 'common-lisp:string)
(common-lisp:deftype external-az () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype external-subnet-mapping () 'common-lisp:hash-table)
 (common-lisp:defun make-external-subnet-mapping
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filters () 'common-lisp:hash-table)
 (common-lisp:defun make-filters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass hsm common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or external-az common-lisp:null)
                         :accessor struct-shape-hsm-availability-zone :shape
                         "ExternalAz" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-hsm-cluster-id :shape "ClusterId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         struct-shape-hsm-subnet-id :shape "SubnetId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (eni-id :initarg :eni-id :initform common-lisp:nil
                         :type (common-lisp:or eni-id common-lisp:null)
                         :accessor struct-shape-hsm-eni-id :shape "EniId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (eni-ip :initarg :eni-ip :initform common-lisp:nil
                         :type (common-lisp:or ip-address common-lisp:null)
                         :accessor struct-shape-hsm-eni-ip :shape "IpAddress"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsm-id :initarg :hsm-id :initform
                         (common-lisp:error ":hsm-id is required") :type
                         (common-lisp:or hsm-id common-lisp:null) :accessor
                         struct-shape-hsm-hsm-id :shape "HsmId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or hsm-state common-lisp:null) :accessor
                         struct-shape-hsm-state :shape "HsmState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-message :initarg :state-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-state-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hsm (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hsm
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hsm 'make-hsm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hsm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hsm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eni-id))
      (common-lisp:list
       (common-lisp:cons "EniId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eni-ip))
      (common-lisp:list
       (common-lisp:cons "EniIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-id))
      (common-lisp:list
       (common-lisp:cons "HsmId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-message))
      (common-lisp:list
       (common-lisp:cons "StateMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hsm))
   common-lisp:nil))
(common-lisp:deftype hsm-id () 'common-lisp:string)
(common-lisp:deftype hsm-state () 'common-lisp:string)
(common-lisp:deftype hsm-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hsms () '(trivial-types:proper-list hsm))
 (common-lisp:defun make-hsms
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hsm))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass initialize-cluster-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-initialize-cluster-request-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signed-cert :initarg :signed-cert :initform
                         (common-lisp:error ":signed-cert is required") :type
                         (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-initialize-cluster-request-signed-cert
                         :shape "Cert" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-anchor :initarg :trust-anchor :initform
                         (common-lisp:error ":trust-anchor is required") :type
                         (common-lisp:or cert common-lisp:null) :accessor
                         struct-shape-initialize-cluster-request-trust-anchor
                         :shape "Cert" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initialize-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initialize-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initialize-cluster-request
                    'make-initialize-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initialize-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initialize-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-cert))
      (common-lisp:list
       (common-lisp:cons "SignedCert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-anchor))
      (common-lisp:list
       (common-lisp:cons "TrustAnchor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initialize-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initialize-cluster-response common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor
                         struct-shape-initialize-cluster-response-state :shape
                         "ClusterState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-message :initarg :state-message :initform
                         common-lisp:nil :type
                         (common-lisp:or state-message common-lisp:null)
                         :accessor
                         struct-shape-initialize-cluster-response-state-message
                         :shape "StateMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initialize-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initialize-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initialize-cluster-response
                    'make-initialize-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initialize-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initialize-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-message))
      (common-lisp:list
       (common-lisp:cons "StateMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initialize-cluster-response))
   common-lisp:nil))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-list-tags-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-size common-lisp:null) :accessor
                         struct-shape-list-tags-request-max-results :shape
                         "MaxSize" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tag-list :initarg :tag-list :initform
                         (common-lisp:error ":tag-list is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-response-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:deftype max-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass modify-backup-attributes-request common-lisp:nil
                       ((backup-id :initarg :backup-id :initform
                         (common-lisp:error ":backup-id is required") :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-modify-backup-attributes-request-backup-id
                         :shape "BackupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (never-expires :initarg :never-expires :initform
                         (common-lisp:error ":never-expires is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-backup-attributes-request-never-expires
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-backup-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-backup-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-backup-attributes-request
                    'make-modify-backup-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-backup-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-backup-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'never-expires))
      (common-lisp:list
       (common-lisp:cons "NeverExpires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-backup-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-backup-attributes-response common-lisp:nil
                       ((backup :initarg :backup :initform common-lisp:nil
                         :type (common-lisp:or backup common-lisp:null)
                         :accessor
                         struct-shape-modify-backup-attributes-response-backup
                         :shape "Backup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-backup-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-backup-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-backup-attributes-response
                    'make-modify-backup-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-backup-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-backup-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup))
      (common-lisp:list
       (common-lisp:cons "Backup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-backup-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-request common-lisp:nil
                       ((backup-retention-policy :initarg
                         :backup-retention-policy :initform
                         (common-lisp:error
                          ":backup-retention-policy is required")
                         :type
                         (common-lisp:or backup-retention-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-request-backup-retention-policy
                         :shape "BackupRetentionPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-modify-cluster-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-request 'make-modify-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-policy))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-modify-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-response 'make-modify-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype pre-co-password () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-backup-request common-lisp:nil
                       ((backup-id :initarg :backup-id :initform
                         (common-lisp:error ":backup-id is required") :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         struct-shape-restore-backup-request-backup-id :shape
                         "BackupId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-backup-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-backup-request 'make-restore-backup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-backup-response common-lisp:nil
                       ((backup :initarg :backup :initform common-lisp:nil
                         :type (common-lisp:or backup common-lisp:null)
                         :accessor struct-shape-restore-backup-response-backup
                         :shape "Backup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-backup-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-backup-response 'make-restore-backup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup))
      (common-lisp:list
       (common-lisp:cons "Backup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-backup-response))
   common-lisp:nil))
(common-lisp:deftype security-group () 'common-lisp:string)
(common-lisp:deftype state-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype strings () '(trivial-types:proper-list string))
 (common-lisp:defun make-strings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform
                         (common-lisp:error ":tag-list is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-key-list :initarg :tag-key-list :initform
                         (common-lisp:error ":tag-key-list is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-tag-key-list
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key-list))
      (common-lisp:list
       (common-lisp:cons "TagKeyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun copy-backup-to-region
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-region backup-id tag-list)
   (common-lisp:declare
    (common-lisp:ignorable destination-region backup-id tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-backup-to-region-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyBackupToRegion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'copy-backup-to-region))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-retention-policy hsm-type
                     source-backup-id subnet-ids tag-list)
   (common-lisp:declare
    (common-lisp:ignorable backup-retention-policy hsm-type source-backup-id
     subnet-ids tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-hsm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id availability-zone ip-address)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id availability-zone ip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hsm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHsm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-hsm))
(common-lisp:progn
 (common-lisp:defun delete-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id)
   (common-lisp:declare (common-lisp:ignorable backup-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBackup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-backup))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-hsm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id hsm-id eni-id eni-ip)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id hsm-id eni-id eni-ip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hsm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHsm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-hsm))
(common-lisp:progn
 (common-lisp:defun describe-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-ascending)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-ascending))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-backups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBackups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-backups))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun initialize-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id signed-cert trust-anchor)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id signed-cert trust-anchor))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-initialize-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "InitializeCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'initialize-cluster))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun modify-backup-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id never-expires)
   (common-lisp:declare (common-lisp:ignorable backup-id never-expires))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-backup-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyBackupAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-backup-attributes))
(common-lisp:progn
 (common-lisp:defun modify-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-retention-policy cluster-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-retention-policy cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-cluster))
(common-lisp:progn
 (common-lisp:defun restore-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id)
   (common-lisp:declare (common-lisp:ignorable backup-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-backup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreBackup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'restore-backup))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-list)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-key-list)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-key-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudhsmv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
