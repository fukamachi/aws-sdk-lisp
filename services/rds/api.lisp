;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rds/api
  (:use)
  (:nicknames #:aws/rds)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/rds/api)
(common-lisp:progn
 (common-lisp:define-condition rds-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'rds-error))
(common-lisp:progn
 (common-lisp:defclass rds-request (aws-sdk/query-request:query-request)
                       common-lisp:nil
                       (:default-initargs :service "rds" :api-version
                        "2014-10-31" :host-prefix "rds" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'rds-request))
(common-lisp:defvar *error-map*
  '(("AuthorizationAlreadyExistsFault" . authorization-already-exists-fault)
    ("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("AuthorizationQuotaExceededFault" . authorization-quota-exceeded-fault)
    ("BackupPolicyNotFoundFault" . backup-policy-not-found-fault)
    ("BlueGreenDeploymentAlreadyExistsFault"
     . blue-green-deployment-already-exists-fault)
    ("BlueGreenDeploymentNotFoundFault"
     . blue-green-deployment-not-found-fault)
    ("CertificateNotFoundFault" . certificate-not-found-fault)
    ("CreateCustomDBEngineVersionFault" . create-custom-dbengine-version-fault)
    ("CustomAvailabilityZoneNotFoundFault"
     . custom-availability-zone-not-found-fault)
    ("CustomDBEngineVersionAlreadyExistsFault"
     . custom-dbengine-version-already-exists-fault)
    ("CustomDBEngineVersionNotFoundFault"
     . custom-dbengine-version-not-found-fault)
    ("CustomDBEngineVersionQuotaExceededFault"
     . custom-dbengine-version-quota-exceeded-fault)
    ("DBClusterAlreadyExistsFault" . dbcluster-already-exists-fault)
    ("DBClusterAutomatedBackupNotFoundFault"
     . dbcluster-automated-backup-not-found-fault)
    ("DBClusterAutomatedBackupQuotaExceededFault"
     . dbcluster-automated-backup-quota-exceeded-fault)
    ("DBClusterBacktrackNotFoundFault" . dbcluster-backtrack-not-found-fault)
    ("DBClusterEndpointAlreadyExistsFault"
     . dbcluster-endpoint-already-exists-fault)
    ("DBClusterEndpointNotFoundFault" . dbcluster-endpoint-not-found-fault)
    ("DBClusterEndpointQuotaExceededFault"
     . dbcluster-endpoint-quota-exceeded-fault)
    ("DBClusterNotFoundFault" . dbcluster-not-found-fault)
    ("DBClusterParameterGroupNotFoundFault"
     . dbcluster-parameter-group-not-found-fault)
    ("DBClusterQuotaExceededFault" . dbcluster-quota-exceeded-fault)
    ("DBClusterRoleAlreadyExistsFault" . dbcluster-role-already-exists-fault)
    ("DBClusterRoleNotFoundFault" . dbcluster-role-not-found-fault)
    ("DBClusterRoleQuotaExceededFault" . dbcluster-role-quota-exceeded-fault)
    ("DBClusterSnapshotAlreadyExistsFault"
     . dbcluster-snapshot-already-exists-fault)
    ("DBClusterSnapshotNotFoundFault" . dbcluster-snapshot-not-found-fault)
    ("DBInstanceAlreadyExistsFault" . dbinstance-already-exists-fault)
    ("DBInstanceAutomatedBackupNotFoundFault"
     . dbinstance-automated-backup-not-found-fault)
    ("DBInstanceAutomatedBackupQuotaExceededFault"
     . dbinstance-automated-backup-quota-exceeded-fault)
    ("DBInstanceNotFoundFault" . dbinstance-not-found-fault)
    ("DBInstanceRoleAlreadyExistsFault" . dbinstance-role-already-exists-fault)
    ("DBInstanceRoleNotFoundFault" . dbinstance-role-not-found-fault)
    ("DBInstanceRoleQuotaExceededFault" . dbinstance-role-quota-exceeded-fault)
    ("DBLogFileNotFoundFault" . dblog-file-not-found-fault)
    ("DBParameterGroupAlreadyExistsFault"
     . dbparameter-group-already-exists-fault)
    ("DBParameterGroupNotFoundFault" . dbparameter-group-not-found-fault)
    ("DBParameterGroupQuotaExceededFault"
     . dbparameter-group-quota-exceeded-fault)
    ("DBProxyAlreadyExistsFault" . dbproxy-already-exists-fault)
    ("DBProxyEndpointAlreadyExistsFault"
     . dbproxy-endpoint-already-exists-fault)
    ("DBProxyEndpointNotFoundFault" . dbproxy-endpoint-not-found-fault)
    ("DBProxyEndpointQuotaExceededFault"
     . dbproxy-endpoint-quota-exceeded-fault)
    ("DBProxyNotFoundFault" . dbproxy-not-found-fault)
    ("DBProxyQuotaExceededFault" . dbproxy-quota-exceeded-fault)
    ("DBProxyTargetAlreadyRegisteredFault"
     . dbproxy-target-already-registered-fault)
    ("DBProxyTargetGroupNotFoundFault" . dbproxy-target-group-not-found-fault)
    ("DBProxyTargetNotFoundFault" . dbproxy-target-not-found-fault)
    ("DBSecurityGroupAlreadyExistsFault"
     . dbsecurity-group-already-exists-fault)
    ("DBSecurityGroupNotFoundFault" . dbsecurity-group-not-found-fault)
    ("DBSecurityGroupNotSupportedFault" . dbsecurity-group-not-supported-fault)
    ("DBSecurityGroupQuotaExceededFault"
     . dbsecurity-group-quota-exceeded-fault)
    ("DBShardGroupAlreadyExistsFault" . dbshard-group-already-exists-fault)
    ("DBShardGroupNotFoundFault" . dbshard-group-not-found-fault)
    ("DBSnapshotAlreadyExistsFault" . dbsnapshot-already-exists-fault)
    ("DBSnapshotNotFoundFault" . dbsnapshot-not-found-fault)
    ("DBSnapshotTenantDatabaseNotFoundFault"
     . dbsnapshot-tenant-database-not-found-fault)
    ("DBSubnetGroupAlreadyExistsFault" . dbsubnet-group-already-exists-fault)
    ("DBSubnetGroupDoesNotCoverEnoughAZs"
     . dbsubnet-group-does-not-cover-enough-azs)
    ("DBSubnetGroupNotAllowedFault" . dbsubnet-group-not-allowed-fault)
    ("DBSubnetGroupNotFoundFault" . dbsubnet-group-not-found-fault)
    ("DBSubnetGroupQuotaExceededFault" . dbsubnet-group-quota-exceeded-fault)
    ("DBSubnetQuotaExceededFault" . dbsubnet-quota-exceeded-fault)
    ("DBUpgradeDependencyFailureFault" . dbupgrade-dependency-failure-fault)
    ("DomainNotFoundFault" . domain-not-found-fault)
    ("Ec2ImagePropertiesNotSupportedFault"
     . ec2image-properties-not-supported-fault)
    ("EventSubscriptionQuotaExceededFault"
     . event-subscription-quota-exceeded-fault)
    ("ExportTaskAlreadyExistsFault" . export-task-already-exists-fault)
    ("ExportTaskNotFoundFault" . export-task-not-found-fault)
    ("GlobalClusterAlreadyExistsFault" . global-cluster-already-exists-fault)
    ("GlobalClusterNotFoundFault" . global-cluster-not-found-fault)
    ("GlobalClusterQuotaExceededFault" . global-cluster-quota-exceeded-fault)
    ("IamRoleMissingPermissionsFault" . iam-role-missing-permissions-fault)
    ("IamRoleNotFoundFault" . iam-role-not-found-fault)
    ("InstanceQuotaExceededFault" . instance-quota-exceeded-fault)
    ("InsufficientAvailableIPsInSubnetFault"
     . insufficient-available-ips-in-subnet-fault)
    ("InsufficientDBClusterCapacityFault"
     . insufficient-dbcluster-capacity-fault)
    ("InsufficientDBInstanceCapacityFault"
     . insufficient-dbinstance-capacity-fault)
    ("InsufficientStorageClusterCapacityFault"
     . insufficient-storage-cluster-capacity-fault)
    ("IntegrationAlreadyExistsFault" . integration-already-exists-fault)
    ("IntegrationConflictOperationFault"
     . integration-conflict-operation-fault)
    ("IntegrationNotFoundFault" . integration-not-found-fault)
    ("IntegrationQuotaExceededFault" . integration-quota-exceeded-fault)
    ("InvalidBlueGreenDeploymentStateFault"
     . invalid-blue-green-deployment-state-fault)
    ("InvalidCustomDBEngineVersionStateFault"
     . invalid-custom-dbengine-version-state-fault)
    ("InvalidDBClusterAutomatedBackupStateFault"
     . invalid-dbcluster-automated-backup-state-fault)
    ("InvalidDBClusterCapacityFault" . invalid-dbcluster-capacity-fault)
    ("InvalidDBClusterEndpointStateFault"
     . invalid-dbcluster-endpoint-state-fault)
    ("InvalidDBClusterSnapshotStateFault"
     . invalid-dbcluster-snapshot-state-fault)
    ("InvalidDBClusterStateFault" . invalid-dbcluster-state-fault)
    ("InvalidDBInstanceAutomatedBackupStateFault"
     . invalid-dbinstance-automated-backup-state-fault)
    ("InvalidDBInstanceStateFault" . invalid-dbinstance-state-fault)
    ("InvalidDBParameterGroupStateFault"
     . invalid-dbparameter-group-state-fault)
    ("InvalidDBProxyEndpointStateFault" . invalid-dbproxy-endpoint-state-fault)
    ("InvalidDBProxyStateFault" . invalid-dbproxy-state-fault)
    ("InvalidDBSecurityGroupStateFault" . invalid-dbsecurity-group-state-fault)
    ("InvalidDBShardGroupStateFault" . invalid-dbshard-group-state-fault)
    ("InvalidDBSnapshotStateFault" . invalid-dbsnapshot-state-fault)
    ("InvalidDBSubnetGroupFault" . invalid-dbsubnet-group-fault)
    ("InvalidDBSubnetGroupStateFault" . invalid-dbsubnet-group-state-fault)
    ("InvalidDBSubnetStateFault" . invalid-dbsubnet-state-fault)
    ("InvalidEventSubscriptionStateFault"
     . invalid-event-subscription-state-fault)
    ("InvalidExportOnlyFault" . invalid-export-only-fault)
    ("InvalidExportSourceStateFault" . invalid-export-source-state-fault)
    ("InvalidExportTaskStateFault" . invalid-export-task-state-fault)
    ("InvalidGlobalClusterStateFault" . invalid-global-cluster-state-fault)
    ("InvalidIntegrationStateFault" . invalid-integration-state-fault)
    ("InvalidMaxAcuFault" . invalid-max-acu-fault)
    ("InvalidOptionGroupStateFault" . invalid-option-group-state-fault)
    ("InvalidResourceStateFault" . invalid-resource-state-fault)
    ("InvalidRestoreFault" . invalid-restore-fault)
    ("InvalidS3BucketFault" . invalid-s3bucket-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("KMSKeyNotAccessibleFault" . kmskey-not-accessible-fault)
    ("MaxDBShardGroupLimitReached" . max-dbshard-group-limit-reached)
    ("NetworkTypeNotSupported" . network-type-not-supported)
    ("OptionGroupAlreadyExistsFault" . option-group-already-exists-fault)
    ("OptionGroupNotFoundFault" . option-group-not-found-fault)
    ("OptionGroupQuotaExceededFault" . option-group-quota-exceeded-fault)
    ("PointInTimeRestoreNotEnabledFault"
     . point-in-time-restore-not-enabled-fault)
    ("ProvisionedIopsNotAvailableInAZFault"
     . provisioned-iops-not-available-in-azfault)
    ("ReservedDBInstanceAlreadyExistsFault"
     . reserved-dbinstance-already-exists-fault)
    ("ReservedDBInstanceNotFoundFault" . reserved-dbinstance-not-found-fault)
    ("ReservedDBInstanceQuotaExceededFault"
     . reserved-dbinstance-quota-exceeded-fault)
    ("ReservedDBInstancesOfferingNotFoundFault"
     . reserved-dbinstances-offering-not-found-fault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("SNSTopicArnNotFoundFault" . snstopic-arn-not-found-fault)
    ("SharedSnapshotQuotaExceededFault" . shared-snapshot-quota-exceeded-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SourceClusterNotSupportedFault" . source-cluster-not-supported-fault)
    ("SourceDatabaseNotSupportedFault" . source-database-not-supported-fault)
    ("SourceNotFoundFault" . source-not-found-fault)
    ("StorageQuotaExceededFault" . storage-quota-exceeded-fault)
    ("StorageTypeNotAvailableFault" . storage-type-not-available-fault)
    ("StorageTypeNotSupportedFault" . storage-type-not-supported-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("SubscriptionAlreadyExistFault" . subscription-already-exist-fault)
    ("SubscriptionCategoryNotFoundFault"
     . subscription-category-not-found-fault)
    ("SubscriptionNotFoundFault" . subscription-not-found-fault)
    ("TenantDatabaseAlreadyExistsFault" . tenant-database-already-exists-fault)
    ("TenantDatabaseNotFoundFault" . tenant-database-not-found-fault)
    ("TenantDatabaseQuotaExceededFault" . tenant-database-quota-exceeded-fault)
    ("UnsupportedDBEngineVersionFault" . unsupported-dbengine-version-fault)))
(common-lisp:progn
 (common-lisp:defclass account-attributes-message common-lisp:nil
                       ((account-quotas :initarg :account-quotas :initform
                         common-lisp:nil :type
                         (common-lisp:or account-quota-list common-lisp:null)
                         :accessor
                         struct-shape-account-attributes-message-account-quotas
                         :shape "AccountQuotaList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-attributes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-attributes-message
                    'make-account-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-quotas))
      (common-lisp:list
       (common-lisp:cons "AccountQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-quota common-lisp:nil
                       ((account-quota-name :initarg :account-quota-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-account-quota-account-quota-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (used :initarg :used :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-quota-used :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-quota-max :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-quota
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-quota
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-quota 'make-account-quota))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-quota))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-quota))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-quota-name))
      (common-lisp:list
       (common-lisp:cons "AccountQuotaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used))
      (common-lisp:list
       (common-lisp:cons "Used"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-quota))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-quota-list ()
   '(trivial-types:proper-list account-quota))
 (common-lisp:defun make-account-quota-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-quota))
   aws-sdk/generator/shape::members))
(common-lisp:deftype activity-stream-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype activity-stream-mode-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-activity-stream-mode-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype activity-stream-policy-status () 'common-lisp:string)
(common-lisp:deftype activity-stream-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-role-to-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-add-role-to-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-role-to-dbcluster-message-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-name :initarg :feature-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-role-to-dbcluster-message-feature-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-role-to-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-role-to-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-role-to-dbcluster-message
                    'make-add-role-to-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-role-to-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-add-role-to-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-role-to-dbinstance-message-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-name :initarg :feature-name :initform
                         (common-lisp:error ":feature-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-role-to-dbinstance-message-feature-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-role-to-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-role-to-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-role-to-dbinstance-message
                    'make-add-role-to-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-source-identifier-to-subscription-message
                       common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-add-source-identifier-to-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-identifier :initarg :source-identifier
                         :initform
                         (common-lisp:error ":source-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-add-source-identifier-to-subscription-message-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-source-identifier-to-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-source-identifier-to-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-message
                    'make-add-source-identifier-to-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-source-identifier-to-subscription-result
                       common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-add-source-identifier-to-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-source-identifier-to-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-source-identifier-to-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-result
                    'make-add-source-identifier-to-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-tags-to-resource-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-add-tags-to-resource-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-to-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:deftype apply-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass apply-pending-maintenance-action-message common-lisp:nil
                       ((resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resource-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-apply-pending-maintenance-action-message-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-action :initarg :apply-action :initform
                         (common-lisp:error ":apply-action is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-apply-pending-maintenance-action-message-apply-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (opt-in-type :initarg :opt-in-type :initform
                         (common-lisp:error ":opt-in-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-apply-pending-maintenance-action-message-opt-in-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-apply-pending-maintenance-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-pending-maintenance-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-message
                    'make-apply-pending-maintenance-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-action))
      (common-lisp:list
       (common-lisp:cons "ApplyAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-type))
      (common-lisp:list
       (common-lisp:cons "OptInType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-pending-maintenance-action-result common-lisp:nil
                       ((resource-pending-maintenance-actions :initarg
                         :resource-pending-maintenance-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-pending-maintenance-actions
                                         common-lisp:null)
                         :accessor
                         struct-shape-apply-pending-maintenance-action-result-resource-pending-maintenance-actions
                         :shape "ResourcePendingMaintenanceActions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-apply-pending-maintenance-action-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-pending-maintenance-action-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-result
                    'make-apply-pending-maintenance-action-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "ResourcePendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-attribute-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-policy-state () 'common-lisp:string)
(common-lisp:deftype auth-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition authorization-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass authorize-dbsecurity-group-ingress-message
                       common-lisp:nil
                       ((dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform
                         (common-lisp:error
                          ":dbsecurity-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-dbsecurity-group-ingress-message-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrip :initarg :cidrip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-dbsecurity-group-ingress-message-cidrip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-dbsecurity-group-ingress-message-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-id :initarg :ec2security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authorize-dbsecurity-group-ingress-message-ec2security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-dbsecurity-group-ingress-message-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-dbsecurity-group-ingress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-dbsecurity-group-ingress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-dbsecurity-group-ingress-message
                    'make-authorize-dbsecurity-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-dbsecurity-group-ingress-result
                       common-lisp:nil
                       ((dbsecurity-group :initarg :dbsecurity-group :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsecurity-group common-lisp:null)
                         :accessor
                         struct-shape-authorize-dbsecurity-group-ingress-result-dbsecurity-group
                         :shape "DBSecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-dbsecurity-group-ingress-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-dbsecurity-group-ingress-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-dbsecurity-group-ingress-result
                    'make-authorize-dbsecurity-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-group))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-result))
   common-lisp:nil))
(common-lisp:deftype automation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-availability-zone-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-availability-zones
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass available-processor-feature common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-available-processor-feature-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-available-processor-feature-default-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-available-processor-feature-allowed-values
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-available-processor-feature
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'available-processor-feature
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'available-processor-feature
                    'make-available-processor-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          available-processor-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          available-processor-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          available-processor-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype available-processor-feature-list ()
   '(trivial-types:proper-list available-processor-feature))
 (common-lisp:defun make-available-processor-feature-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            available-processor-feature))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-backup-recovery-point-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass backtrack-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-backtrack-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-to :initarg :backtrack-to :initform
                         (common-lisp:error ":backtrack-to is required") :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-backtrack-dbcluster-message-backtrack-to
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-backtrack-dbcluster-message-force :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-earliest-time-on-point-in-time-unavailable
                         :initarg
                         :use-earliest-time-on-point-in-time-unavailable
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-backtrack-dbcluster-message-use-earliest-time-on-point-in-time-unavailable
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backtrack-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backtrack-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backtrack-dbcluster-message
                    'make-backtrack-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backtrack-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backtrack-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-to))
      (common-lisp:list
       (common-lisp:cons "BacktrackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-earliest-time-on-point-in-time-unavailable))
      (common-lisp:list
       (common-lisp:cons "UseEarliestTimeOnPointInTimeUnavailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backtrack-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition backup-policy-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'backup-policy-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass blue-green-deployment common-lisp:nil
                       ((blue-green-deployment-identifier :initarg
                         :blue-green-deployment-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or blue-green-deployment-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-blue-green-deployment-blue-green-deployment-identifier
                         :shape "BlueGreenDeploymentIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (blue-green-deployment-name :initarg
                         :blue-green-deployment-name :initform common-lisp:nil
                         :type
                         (common-lisp:or blue-green-deployment-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-blue-green-deployment-blue-green-deployment-name
                         :shape "BlueGreenDeploymentName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or database-arn common-lisp:null)
                         :accessor struct-shape-blue-green-deployment-source
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type (common-lisp:or database-arn common-lisp:null)
                         :accessor struct-shape-blue-green-deployment-target
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (switchover-details :initarg :switchover-details
                         :initform common-lisp:nil :type
                         (common-lisp:or switchover-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-blue-green-deployment-switchover-details
                         :shape "SwitchoverDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or blue-green-deployment-task-list
                                         common-lisp:null)
                         :accessor struct-shape-blue-green-deployment-tasks
                         :shape "BlueGreenDeploymentTaskList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or blue-green-deployment-status
                                         common-lisp:null)
                         :accessor struct-shape-blue-green-deployment-status
                         :shape "BlueGreenDeploymentStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-details :initarg :status-details :initform
                         common-lisp:nil :type
                         (common-lisp:or blue-green-deployment-status-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-blue-green-deployment-status-details
                         :shape "BlueGreenDeploymentStatusDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-blue-green-deployment-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delete-time :initarg :delete-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-blue-green-deployment-delete-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-blue-green-deployment-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blue-green-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blue-green-deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment 'make-blue-green-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-name))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'switchover-details))
      (common-lisp:list
       (common-lisp:cons "SwitchoverDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "Tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-time))
      (common-lisp:list
       (common-lisp:cons "DeleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition blue-green-deployment-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment-already-exists-fault)))
(common-lisp:deftype blue-green-deployment-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blue-green-deployment-list ()
   '(trivial-types:proper-list blue-green-deployment))
 (common-lisp:defun make-blue-green-deployment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blue-green-deployment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blue-green-deployment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition blue-green-deployment-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'blue-green-deployment-not-found-fault)))
(common-lisp:deftype blue-green-deployment-status () 'common-lisp:string)
(common-lisp:deftype blue-green-deployment-status-details ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass blue-green-deployment-task common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or blue-green-deployment-task-name
                                         common-lisp:null)
                         :accessor struct-shape-blue-green-deployment-task-name
                         :shape "BlueGreenDeploymentTaskName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or blue-green-deployment-task-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-blue-green-deployment-task-status :shape
                         "BlueGreenDeploymentTaskStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blue-green-deployment-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blue-green-deployment-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment-task
                    'make-blue-green-deployment-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blue-green-deployment-task-list ()
   '(trivial-types:proper-list blue-green-deployment-task))
 (common-lisp:defun make-blue-green-deployment-task-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            blue-green-deployment-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blue-green-deployment-task-name () 'common-lisp:string)
(common-lisp:deftype blue-green-deployment-task-status () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cacertificate-identifiers-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-cacertificate-identifiers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-export-task-message common-lisp:nil
                       ((export-task-identifier :initarg
                         :export-task-identifier :initform
                         (common-lisp:error
                          ":export-task-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-export-task-message-export-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-export-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-export-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-export-task-message
                    'make-cancel-export-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((certificate-identifier :initarg
                         :certificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-certificate-certificate-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-type :initarg :certificate-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-certificate-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thumbprint :initarg :thumbprint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-thumbprint :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-from :initarg :valid-from :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-valid-from :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-till :initarg :valid-till :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-valid-till :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-certificate-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-override :initarg :customer-override
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-certificate-customer-override
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-override-valid-till :initarg
                         :customer-override-valid-till :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-customer-override-valid-till
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-type))
      (common-lisp:list
       (common-lisp:cons "CertificateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "Thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from))
      (common-lisp:list
       (common-lisp:cons "ValidFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-till))
      (common-lisp:list
       (common-lisp:cons "ValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-override))
      (common-lisp:list
       (common-lisp:cons "CustomerOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-override-valid-till))
      (common-lisp:list
       (common-lisp:cons "CustomerOverrideValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate-details common-lisp:nil
                       ((caidentifier :initarg :caidentifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-details-caidentifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-till :initarg :valid-till :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-details-valid-till :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-details 'make-certificate-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caidentifier))
      (common-lisp:list
       (common-lisp:cons "CAIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-till))
      (common-lisp:list
       (common-lisp:cons "ValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate))
 (common-lisp:defun make-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass certificate-message common-lisp:nil
                       ((default-certificate-for-new-launches :initarg
                         :default-certificate-for-new-launches :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-message-default-certificate-for-new-launches
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-certificate-message-certificates :shape
                         "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-certificate-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-message 'make-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-certificate-for-new-launches))
      (common-lisp:list
       (common-lisp:cons "DefaultCertificateForNewLaunches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass character-set common-lisp:nil
                       ((character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-character-set-character-set-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (character-set-description :initarg
                         :character-set-description :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-character-set-character-set-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-character-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'character-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'character-set 'make-character-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input character-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input character-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'character-set-description))
      (common-lisp:list
       (common-lisp:cons "CharacterSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input character-set))
   common-lisp:nil))
(common-lisp:deftype client-password-auth-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloudwatch-logs-export-configuration common-lisp:nil
                       ((enable-log-types :initarg :enable-log-types :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-cloudwatch-logs-export-configuration-enable-log-types
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-log-types :initarg :disable-log-types
                         :initform common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-cloudwatch-logs-export-configuration-disable-log-types
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloudwatch-logs-export-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloudwatch-logs-export-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-logs-export-configuration
                    'make-cloudwatch-logs-export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-log-types))
      (common-lisp:list
       (common-lisp:cons "EnableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-log-types))
      (common-lisp:list
       (common-lisp:cons "DisableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-pending-modified-values common-lisp:nil
                       ((pending-cloudwatch-logs-exports :initarg
                         :pending-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-cloudwatch-logs-exports
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-pending-cloudwatch-logs-exports
                         :shape "PendingCloudwatchLogsExports" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-pending-modified-values-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-pending-modified-values-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-iamdatabase-authentication-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-pending-modified-values-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rds-custom-cluster-configuration :initarg
                         :rds-custom-cluster-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-custom-cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-rds-custom-cluster-configuration
                         :shape "RdsCustomClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-pending-modified-values-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-details :initarg :certificate-details
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-details common-lisp:null)
                         :accessor
                         struct-shape-cluster-pending-modified-values-certificate-details
                         :shape "CertificateDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-pending-modified-values
                    'make-cluster-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-custom-cluster-configuration))
      (common-lisp:list
       (common-lisp:cons "RdsCustomClusterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-details))
      (common-lisp:list
       (common-lisp:cons "CertificateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-pool-configuration common-lisp:nil
                       ((max-connections-percent :initarg
                         :max-connections-percent :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-max-connections-percent
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-idle-connections-percent :initarg
                         :max-idle-connections-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-max-idle-connections-percent
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-borrow-timeout :initarg
                         :connection-borrow-timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-connection-borrow-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-pinning-filters :initarg
                         :session-pinning-filters :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-session-pinning-filters
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (init-query :initarg :init-query :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connection-pool-configuration-init-query
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection-pool-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-pool-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connection-pool-configuration
                    'make-connection-pool-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-idle-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxIdleConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-borrow-timeout))
      (common-lisp:list
       (common-lisp:cons "ConnectionBorrowTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-pinning-filters))
      (common-lisp:list
       (common-lisp:cons "SessionPinningFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'init-query))
      (common-lisp:list
       (common-lisp:cons "InitQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-pool-configuration-info common-lisp:nil
                       ((max-connections-percent :initarg
                         :max-connections-percent :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-info-max-connections-percent
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-idle-connections-percent :initarg
                         :max-idle-connections-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-connection-pool-configuration-info-max-idle-connections-percent
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-borrow-timeout :initarg
                         :connection-borrow-timeout :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-info-connection-borrow-timeout
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-pinning-filters :initarg
                         :session-pinning-filters :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-connection-pool-configuration-info-session-pinning-filters
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (init-query :initarg :init-query :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connection-pool-configuration-info-init-query
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection-pool-configuration-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-pool-configuration-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connection-pool-configuration-info
                    'make-connection-pool-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-idle-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxIdleConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-borrow-timeout))
      (common-lisp:list
       (common-lisp:cons "ConnectionBorrowTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-pinning-filters))
      (common-lisp:list
       (common-lisp:cons "SessionPinningFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'init-query))
      (common-lisp:list
       (common-lisp:cons "InitQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass context-attribute common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-context-attribute-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-context-attribute-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-context-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'context-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'context-attribute 'make-context-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype context-attribute-list ()
   '(trivial-types:proper-list context-attribute))
 (common-lisp:defun make-context-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-parameter-group-message common-lisp:nil
                       ((source-dbcluster-parameter-group-identifier :initarg
                         :source-dbcluster-parameter-group-identifier :initform
                         (common-lisp:error
                          ":source-dbcluster-parameter-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-parameter-group-message-source-dbcluster-parameter-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbcluster-parameter-group-identifier :initarg
                         :target-dbcluster-parameter-group-identifier :initform
                         (common-lisp:error
                          ":target-dbcluster-parameter-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-parameter-group-message-target-dbcluster-parameter-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbcluster-parameter-group-description :initarg
                         :target-dbcluster-parameter-group-description
                         :initform
                         (common-lisp:error
                          ":target-dbcluster-parameter-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-parameter-group-message-target-dbcluster-parameter-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-dbcluster-parameter-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbcluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-message
                    'make-copy-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-parameter-group-result common-lisp:nil
                       ((dbcluster-parameter-group :initarg
                         :dbcluster-parameter-group :initform common-lisp:nil
                         :type
                         (common-lisp:or dbcluster-parameter-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-parameter-group-result-dbcluster-parameter-group
                         :shape "DBClusterParameterGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbcluster-parameter-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-parameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-result
                    'make-copy-dbcluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-snapshot-message common-lisp:nil
                       ((source-dbcluster-snapshot-identifier :initarg
                         :source-dbcluster-snapshot-identifier :initform
                         (common-lisp:error
                          ":source-dbcluster-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-snapshot-message-source-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbcluster-snapshot-identifier :initarg
                         :target-dbcluster-snapshot-identifier :initform
                         (common-lisp:error
                          ":target-dbcluster-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-snapshot-message-target-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-dbcluster-snapshot-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-dbcluster-snapshot-message-pre-signed-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-snapshot-message-copy-tags
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-dbcluster-snapshot-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbcluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-message
                    'make-copy-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-snapshot-result common-lisp:nil
                       ((dbcluster-snapshot :initarg :dbcluster-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot common-lisp:null)
                         :accessor
                         struct-shape-copy-dbcluster-snapshot-result-dbcluster-snapshot
                         :shape "DBClusterSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbcluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-result
                    'make-copy-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbparameter-group-message common-lisp:nil
                       ((source-dbparameter-group-identifier :initarg
                         :source-dbparameter-group-identifier :initform
                         (common-lisp:error
                          ":source-dbparameter-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbparameter-group-message-source-dbparameter-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbparameter-group-identifier :initarg
                         :target-dbparameter-group-identifier :initform
                         (common-lisp:error
                          ":target-dbparameter-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbparameter-group-message-target-dbparameter-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbparameter-group-description :initarg
                         :target-dbparameter-group-description :initform
                         (common-lisp:error
                          ":target-dbparameter-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbparameter-group-message-target-dbparameter-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-dbparameter-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbparameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbparameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbparameter-group-message
                    'make-copy-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbparameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbparameter-group-result common-lisp:nil
                       ((dbparameter-group :initarg :dbparameter-group
                         :initform common-lisp:nil :type
                         (common-lisp:or dbparameter-group common-lisp:null)
                         :accessor
                         struct-shape-copy-dbparameter-group-result-dbparameter-group
                         :shape "DBParameterGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbparameter-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbparameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbparameter-group-result
                    'make-copy-dbparameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-group))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbsnapshot-message common-lisp:nil
                       ((source-dbsnapshot-identifier :initarg
                         :source-dbsnapshot-identifier :initform
                         (common-lisp:error
                          ":source-dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbsnapshot-message-source-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbsnapshot-identifier :initarg
                         :target-dbsnapshot-identifier :initform
                         (common-lisp:error
                          ":target-dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-dbsnapshot-message-target-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-dbsnapshot-message-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-dbsnapshot-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-copy-dbsnapshot-message-copy-tags :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-dbsnapshot-message-pre-signed-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-dbsnapshot-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-custom-availability-zone :initarg
                         :target-custom-availability-zone :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-dbsnapshot-message-target-custom-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-option-group :initarg :copy-option-group
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-copy-dbsnapshot-message-copy-option-group
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbsnapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-dbsnapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbsnapshot-message 'make-copy-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-custom-availability-zone))
      (common-lisp:list
       (common-lisp:cons "TargetCustomAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-option-group))
      (common-lisp:list
       (common-lisp:cons "CopyOptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbsnapshot-result common-lisp:nil
                       ((dbsnapshot :initarg :dbsnapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot common-lisp:null) :accessor
                         struct-shape-copy-dbsnapshot-result-dbsnapshot :shape
                         "DBSnapshot" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-dbsnapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-dbsnapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-dbsnapshot-result 'make-copy-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-option-group-message common-lisp:nil
                       ((source-option-group-identifier :initarg
                         :source-option-group-identifier :initform
                         (common-lisp:error
                          ":source-option-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-option-group-message-source-option-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-option-group-identifier :initarg
                         :target-option-group-identifier :initform
                         (common-lisp:error
                          ":target-option-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-option-group-message-target-option-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-option-group-description :initarg
                         :target-option-group-description :initform
                         (common-lisp:error
                          ":target-option-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-option-group-message-target-option-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-copy-option-group-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-option-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-option-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-option-group-message
                    'make-copy-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-option-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceOptionGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-option-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetOptionGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-option-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetOptionGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-option-group-result common-lisp:nil
                       ((option-group :initarg :option-group :initform
                         common-lisp:nil :type
                         (common-lisp:or option-group common-lisp:null)
                         :accessor
                         struct-shape-copy-option-group-result-option-group
                         :shape "OptionGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-option-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-option-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-option-group-result 'make-copy-option-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group))
      (common-lisp:list
       (common-lisp:cons "OptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-blue-green-deployment-request common-lisp:nil
                       ((blue-green-deployment-name :initarg
                         :blue-green-deployment-name :initform
                         (common-lisp:error
                          ":blue-green-deployment-name is required")
                         :type
                         (common-lisp:or blue-green-deployment-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-blue-green-deployment-name
                         :shape "BlueGreenDeploymentName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or database-arn common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-source
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-engine-version :initarg :target-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or target-engine-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-target-engine-version
                         :shape "TargetEngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbparameter-group-name :initarg
                         :target-dbparameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or target-dbparameter-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-target-dbparameter-group-name
                         :shape "TargetDBParameterGroupName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-dbcluster-parameter-group-name :initarg
                         :target-dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or target-dbcluster-parameter-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-target-dbcluster-parameter-group-name
                         :shape "TargetDBClusterParameterGroupName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-blue-green-deployment-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbinstance-class :initarg
                         :target-dbinstance-class :initform common-lisp:nil
                         :type
                         (common-lisp:or target-dbinstance-class
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-target-dbinstance-class
                         :shape "TargetDBInstanceClass" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (upgrade-target-storage-config :initarg
                         :upgrade-target-storage-config :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-request-upgrade-target-storage-config
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-blue-green-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-blue-green-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-blue-green-deployment-request
                    'make-create-blue-green-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-name))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-engine-version))
      (common-lisp:list
       (common-lisp:cons "TargetEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upgrade-target-storage-config))
      (common-lisp:list
       (common-lisp:cons "UpgradeTargetStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-blue-green-deployment-response common-lisp:nil
                       ((blue-green-deployment :initarg :blue-green-deployment
                         :initform common-lisp:nil :type
                         (common-lisp:or blue-green-deployment
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blue-green-deployment-response-blue-green-deployment
                         :shape "BlueGreenDeployment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-blue-green-deployment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-blue-green-deployment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-blue-green-deployment-response
                    'make-create-blue-green-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-custom-dbengine-version-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'create-custom-dbengine-version-fault)))
(common-lisp:progn
 (common-lisp:defclass create-custom-dbengine-version-message common-lisp:nil
                       ((engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or custom-engine-name common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-engine
                         :shape "CustomEngineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         (common-lisp:error ":engine-version is required")
                         :type
                         (common-lisp:or custom-engine-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-engine-version
                         :shape "CustomEngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-installation-files-s3bucket-name :initarg
                         :database-installation-files-s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-database-installation-files-s3bucket-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-installation-files-s3prefix :initarg
                         :database-installation-files-s3prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string255 common-lisp:null) :accessor
                         struct-shape-create-custom-dbengine-version-message-database-installation-files-s3prefix
                         :shape "String255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type (common-lisp:or string255 common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-image-id
                         :shape "String255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id-or-arn common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-kmskey-id
                         :shape "KmsKeyIdOrArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manifest :initarg :manifest :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-dbengine-version-manifest
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-manifest
                         :shape "CustomDBEngineVersionManifest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-custom-dbengine-version-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-custom-db-engine-version-identifier :initarg
                         :source-custom-db-engine-version-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string255 common-lisp:null) :accessor
                         struct-shape-create-custom-dbengine-version-message-source-custom-db-engine-version-identifier
                         :shape "String255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-aws-provided-latest-image :initarg
                         :use-aws-provided-latest-image :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-custom-dbengine-version-message-use-aws-provided-latest-image
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-dbengine-version-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-dbengine-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-dbengine-version-message
                    'make-create-custom-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3prefix))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-custom-db-engine-version-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceCustomDbEngineVersionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-aws-provided-latest-image))
      (common-lisp:list
       (common-lisp:cons "UseAwsProvidedLatestImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-endpoint-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-endpoint-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-endpoint-identifier :initarg
                         :dbcluster-endpoint-identifier :initform
                         (common-lisp:error
                          ":dbcluster-endpoint-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-endpoint-message-dbcluster-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         (common-lisp:error ":endpoint-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-endpoint-message-endpoint-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (static-members :initarg :static-members :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-endpoint-message-static-members
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (excluded-members :initarg :excluded-members :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-endpoint-message-excluded-members
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbcluster-endpoint-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-endpoint-message
                    'make-create-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-message common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-create-dbcluster-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-source-identifier :initarg
                         :replication-source-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-replication-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-storage-encrypted
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-pre-signed-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-window :initarg :backtrack-window :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-backtrack-window
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-engine-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-configuration :initarg :scaling-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-scaling-configuration
                         :shape "ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rds-custom-cluster-configuration :initarg
                         :rds-custom-cluster-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-custom-cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-rds-custom-cluster-configuration
                         :shape "RdsCustomClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-cluster-identifier :initarg
                         :global-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-http-endpoint :initarg :enable-http-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-http-endpoint
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-dbcluster-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-global-write-forwarding :initarg
                         :enable-global-write-forwarding :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-global-write-forwarding
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-instance-class :initarg
                         :dbcluster-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-dbcluster-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-create-dbcluster-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-monitoring-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-performance-insights
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-limitless-database :initarg
                         :enable-limitless-database :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-limitless-database
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-v2scaling-configuration :initarg
                         :serverless-v2scaling-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-v2scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-serverless-v2scaling-configuration
                         :shape "ServerlessV2ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsystem-id :initarg :dbsystem-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-dbsystem-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-user-password :initarg
                         :manage-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-manage-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-secret-kms-key-id :initarg
                         :master-user-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-message-master-user-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-local-write-forwarding :initarg
                         :enable-local-write-forwarding :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-enable-local-write-forwarding
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-message-cacertificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-message 'make-create-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-custom-cluster-configuration))
      (common-lisp:list
       (common-lisp:cons "RdsCustomClusterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-http-endpoint))
      (common-lisp:list
       (common-lisp:cons "EnableHttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-global-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "EnableGlobalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-limitless-database))
      (common-lisp:list
       (common-lisp:cons "EnableLimitlessDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-local-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "EnableLocalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-parameter-group-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :initform
                         (common-lisp:error
                          ":dbparameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-parameter-group-message-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbcluster-parameter-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbcluster-parameter-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-message
                    'make-create-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-parameter-group-result common-lisp:nil
                       ((dbcluster-parameter-group :initarg
                         :dbcluster-parameter-group :initform common-lisp:nil
                         :type
                         (common-lisp:or dbcluster-parameter-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-parameter-group-result-dbcluster-parameter-group
                         :shape "DBClusterParameterGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-parameter-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-parameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-result
                    'make-create-dbcluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-create-dbcluster-result-dbcluster :shape
                         "DBCluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-result 'make-create-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-snapshot-message common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-snapshot-message-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-snapshot-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbcluster-snapshot-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-message
                    'make-create-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-snapshot-result common-lisp:nil
                       ((dbcluster-snapshot :initarg :dbcluster-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot common-lisp:null)
                         :accessor
                         struct-shape-create-dbcluster-snapshot-result-dbcluster-snapshot
                         :shape "DBClusterSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbcluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-result
                    'make-create-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbinstance-message common-lisp:nil
                       ((dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-dbname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         (common-lisp:error ":dbinstance-class is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-groups :initarg :dbsecurity-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbsecurity-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-dbsecurity-groups
                         :shape "DBSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-create-dbinstance-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-multi-az :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-create-dbinstance-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nchar-character-set-name :initarg
                         :nchar-character-set-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-nchar-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-tde-credential-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-password :initarg
                         :tde-credential-password :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-tde-credential-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-storage-encrypted
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-domain :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-fqdn :initarg :domain-fqdn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-domain-fqdn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-ou :initarg :domain-ou :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-domain-ou
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-auth-secret-arn :initarg
                         :domain-auth-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-domain-auth-secret-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-dns-ips :initarg :domain-dns-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-domain-dns-ips
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-monitoring-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-promotion-tier
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-timezone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-enable-performance-insights
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-max-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-customer-owned-ip :initarg
                         :enable-customer-owned-ip :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-enable-customer-owned-ip
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-iam-instance-profile :initarg
                         :custom-iam-instance-profile :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-custom-iam-instance-profile
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-target :initarg :backup-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-backup-target
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-user-password :initarg
                         :manage-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-manage-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-secret-kms-key-id :initarg
                         :master-user-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-master-user-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-cacertificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsystem-id :initarg :dbsystem-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-message-dbsystem-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-tenant :initarg :multi-tenant :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-message-multi-tenant
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-message
                    'make-create-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-fqdn))
      (common-lisp:list
       (common-lisp:cons "DomainFqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-ou))
      (common-lisp:list
       (common-lisp:cons "DomainOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-auth-secret-arn))
      (common-lisp:list
       (common-lisp:cons "DomainAuthSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-dns-ips))
      (common-lisp:list
       (common-lisp:cons "DomainDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-tenant))
      (common-lisp:list
       (common-lisp:cons "MultiTenant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbinstance-read-replica-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbinstance-identifier :initarg
                         :source-dbinstance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-source-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-monitoring-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-pre-signed-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-enable-performance-insights
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-default-processor-features :initarg
                         :use-default-processor-features :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-use-default-processor-features
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-fqdn :initarg :domain-fqdn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-domain-fqdn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-ou :initarg :domain-ou :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-domain-ou
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-auth-secret-arn :initarg
                         :domain-auth-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-domain-auth-secret-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-dns-ips :initarg :domain-dns-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-domain-dns-ips
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-mode :initarg :replica-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-mode common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-replica-mode
                         :shape "ReplicaMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-max-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-iam-instance-profile :initarg
                         :custom-iam-instance-profile :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-custom-iam-instance-profile
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-customer-owned-ip :initarg
                         :enable-customer-owned-ip :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-enable-customer-owned-ip
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbcluster-identifier :initarg
                         :source-dbcluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-source-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upgrade-storage-config :initarg
                         :upgrade-storage-config :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbinstance-read-replica-message-upgrade-storage-config
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbinstance-read-replica-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbinstance-read-replica-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-read-replica-message
                    'make-create-dbinstance-read-replica-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-fqdn))
      (common-lisp:list
       (common-lisp:cons "DomainFqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-ou))
      (common-lisp:list
       (common-lisp:cons "DomainOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-auth-secret-arn))
      (common-lisp:list
       (common-lisp:cons "DomainAuthSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-dns-ips))
      (common-lisp:list
       (common-lisp:cons "DomainDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upgrade-storage-config))
      (common-lisp:list
       (common-lisp:cons "UpgradeStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbinstance-read-replica-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-create-dbinstance-read-replica-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbinstance-read-replica-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbinstance-read-replica-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-read-replica-result
                    'make-create-dbinstance-read-replica-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-create-dbinstance-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbinstance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-result 'make-create-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbparameter-group-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform
                         (common-lisp:error
                          ":dbparameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbparameter-group-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :initform
                         (common-lisp:error
                          ":dbparameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbparameter-group-message-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbparameter-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbparameter-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbparameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbparameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbparameter-group-message
                    'make-create-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbparameter-group-result common-lisp:nil
                       ((dbparameter-group :initarg :dbparameter-group
                         :initform common-lisp:nil :type
                         (common-lisp:or dbparameter-group common-lisp:null)
                         :accessor
                         struct-shape-create-dbparameter-group-result-dbparameter-group
                         :shape "DBParameterGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbparameter-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbparameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbparameter-group-result
                    'make-create-dbparameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-group))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbproxy-endpoint-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or dbproxy-name common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-endpoint-request-dbproxy-name
                         :shape "DBProxyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbproxy-endpoint-name :initarg :dbproxy-endpoint-name
                         :initform
                         (common-lisp:error
                          ":dbproxy-endpoint-name is required")
                         :type
                         (common-lisp:or dbproxy-endpoint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-endpoint-request-dbproxy-endpoint-name
                         :shape "DBProxyEndpointName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-subnet-ids :initarg :vpc-subnet-ids :initform
                         (common-lisp:error ":vpc-subnet-ids is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-endpoint-request-vpc-subnet-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-endpoint-request-vpc-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-role :initarg :target-role :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint-target-role
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-endpoint-request-target-role
                         :shape "DBProxyEndpointTargetRole" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbproxy-endpoint-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbproxy-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbproxy-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-endpoint-request
                    'make-create-dbproxy-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-role))
      (common-lisp:list
       (common-lisp:cons "TargetRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbproxy-endpoint-response common-lisp:nil
                       ((dbproxy-endpoint :initarg :dbproxy-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-endpoint-response-dbproxy-endpoint
                         :shape "DBProxyEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbproxy-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbproxy-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-endpoint-response
                    'make-create-dbproxy-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbproxy-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbproxy-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-family :initarg :engine-family :initform
                         (common-lisp:error ":engine-family is required") :type
                         (common-lisp:or engine-family common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-request-engine-family
                         :shape "EngineFamily" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth :initarg :auth :initform
                         (common-lisp:error ":auth is required") :type
                         (common-lisp:or user-auth-config-list
                                         common-lisp:null)
                         :accessor struct-shape-create-dbproxy-request-auth
                         :shape "UserAuthConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-dbproxy-request-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-subnet-ids :initarg :vpc-subnet-ids :initform
                         (common-lisp:error ":vpc-subnet-ids is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-request-vpc-subnet-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-request-vpc-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-tls :initarg :require-tls :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-dbproxy-request-require-tls :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idle-client-timeout :initarg :idle-client-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbproxy-request-idle-client-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (debug-logging :initarg :debug-logging :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-dbproxy-request-debug-logging
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbproxy-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbproxy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbproxy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-request 'make-create-dbproxy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-family))
      (common-lisp:list
       (common-lisp:cons "EngineFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-tls))
      (common-lisp:list
       (common-lisp:cons "RequireTLS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-client-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleClientTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-logging))
      (common-lisp:list
       (common-lisp:cons "DebugLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbproxy-response common-lisp:nil
                       ((dbproxy :initarg :dbproxy :initform common-lisp:nil
                         :type (common-lisp:or dbproxy common-lisp:null)
                         :accessor struct-shape-create-dbproxy-response-dbproxy
                         :shape "DBProxy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbproxy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbproxy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-response 'make-create-dbproxy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy))
      (common-lisp:list
       (common-lisp:cons "DBProxy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsecurity-group-message common-lisp:nil
                       ((dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform
                         (common-lisp:error
                          ":dbsecurity-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbsecurity-group-message-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-group-description :initarg
                         :dbsecurity-group-description :initform
                         (common-lisp:error
                          ":dbsecurity-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbsecurity-group-message-dbsecurity-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbsecurity-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbsecurity-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbsecurity-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbsecurity-group-message
                    'make-create-dbsecurity-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsecurity-group-result common-lisp:nil
                       ((dbsecurity-group :initarg :dbsecurity-group :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsecurity-group common-lisp:null)
                         :accessor
                         struct-shape-create-dbsecurity-group-result-dbsecurity-group
                         :shape "DBSecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbsecurity-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbsecurity-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbsecurity-group-result
                    'make-create-dbsecurity-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-group))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbshard-group-message common-lisp:nil
                       ((dbshard-group-identifier :initarg
                         :dbshard-group-identifier :initform
                         (common-lisp:error
                          ":dbshard-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbshard-group-message-dbshard-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbshard-group-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compute-redundancy :initarg :compute-redundancy
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbshard-group-message-compute-redundancy
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-acu :initarg :max-acu :initform
                         (common-lisp:error ":max-acu is required") :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbshard-group-message-max-acu
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-dbshard-group-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbshard-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbshard-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbshard-group-message
                    'make-create-dbshard-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbshard-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbshard-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-identifier))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-redundancy))
      (common-lisp:list
       (common-lisp:cons "ComputeRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-acu))
      (common-lisp:list
       (common-lisp:cons "MaxACU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbshard-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsnapshot-message common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbsnapshot-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbsnapshot-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbsnapshot-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbsnapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbsnapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbsnapshot-message
                    'make-create-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsnapshot-result common-lisp:nil
                       ((dbsnapshot :initarg :dbsnapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot common-lisp:null) :accessor
                         struct-shape-create-dbsnapshot-result-dbsnapshot
                         :shape "DBSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbsnapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbsnapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbsnapshot-result 'make-create-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsubnet-group-message common-lisp:nil
                       ((dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform
                         (common-lisp:error ":dbsubnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbsubnet-group-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-description :initarg
                         :dbsubnet-group-description :initform
                         (common-lisp:error
                          ":dbsubnet-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-dbsubnet-group-message-dbsubnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dbsubnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dbsubnet-group-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbsubnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-message
                    'make-create-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsubnet-group-result common-lisp:nil
                       ((dbsubnet-group :initarg :dbsubnet-group :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsubnet-group common-lisp:null)
                         :accessor
                         struct-shape-create-dbsubnet-group-result-dbsubnet-group
                         :shape "DBSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dbsubnet-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbsubnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-result
                    'make-create-dbsubnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         (common-lisp:error ":sns-topic-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-sns-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-ids :initarg :source-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-source-ids
                         :shape "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-result
                    'make-create-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-global-cluster-message-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbcluster-identifier :initarg
                         :source-dbcluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-global-cluster-message-source-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-global-cluster-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-global-cluster-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-global-cluster-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-global-cluster-message-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-global-cluster-message-storage-encrypted
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-global-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-message
                    'make-create-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         struct-shape-create-global-cluster-result-global-cluster
                         :shape "GlobalCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-global-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-result
                    'make-create-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-integration-message common-lisp:nil
                       ((source-arn :initarg :source-arn :initform
                         (common-lisp:error ":source-arn is required") :type
                         (common-lisp:or source-arn common-lisp:null) :accessor
                         struct-shape-create-integration-message-source-arn
                         :shape "SourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         (common-lisp:error ":target-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-integration-message-target-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (integration-name :initarg :integration-name :initform
                         (common-lisp:error ":integration-name is required")
                         :type
                         (common-lisp:or integration-name common-lisp:null)
                         :accessor
                         struct-shape-create-integration-message-integration-name
                         :shape "IntegrationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-integration-message-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-encryption-context :initarg
                         :additional-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-integration-message-additional-encryption-context
                         :shape "EncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-integration-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-integration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-integration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-integration-message
                    'make-create-integration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-name))
      (common-lisp:list
       (common-lisp:cons "IntegrationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-option-group-message common-lisp:nil
                       ((option-group-name :initarg :option-group-name
                         :initform
                         (common-lisp:error ":option-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-option-group-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         (common-lisp:error ":engine-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-option-group-message-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform
                         (common-lisp:error
                          ":major-engine-version is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-option-group-message-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-description :initarg
                         :option-group-description :initform
                         (common-lisp:error
                          ":option-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-option-group-message-option-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-option-group-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-option-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-option-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-option-group-message
                    'make-create-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-description))
      (common-lisp:list
       (common-lisp:cons "OptionGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-option-group-result common-lisp:nil
                       ((option-group :initarg :option-group :initform
                         common-lisp:nil :type
                         (common-lisp:or option-group common-lisp:null)
                         :accessor
                         struct-shape-create-option-group-result-option-group
                         :shape "OptionGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-option-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-option-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-option-group-result
                    'make-create-option-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group))
      (common-lisp:list
       (common-lisp:cons "OptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tenant-database-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-tenant-database-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         (common-lisp:error ":tenant-dbname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-tenant-database-message-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         (common-lisp:error ":master-username is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-tenant-database-message-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform
                         (common-lisp:error
                          ":master-user-password is required")
                         :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-create-tenant-database-message-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-tenant-database-message-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nchar-character-set-name :initarg
                         :nchar-character-set-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-tenant-database-message-nchar-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-tenant-database-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-tenant-database-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-tenant-database-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-tenant-database-message
                    'make-create-tenant-database-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-tenant-database-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-tenant-database-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-tenant-database-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tenant-database-result common-lisp:nil
                       ((tenant-database :initarg :tenant-database :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-database common-lisp:null)
                         :accessor
                         struct-shape-create-tenant-database-result-tenant-database
                         :shape "TenantDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-tenant-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-tenant-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-tenant-database-result
                    'make-create-tenant-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-tenant-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-tenant-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-database))
      (common-lisp:list
       (common-lisp:cons "TenantDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-tenant-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-availability-zone-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-availability-zone-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass custom-dbengine-version-ami common-lisp:nil
                       ((image-id :initarg :image-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-custom-dbengine-version-ami-image-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-custom-dbengine-version-ami-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-dbengine-version-ami
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-dbengine-version-ami
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-ami
                    'make-custom-dbengine-version-ami))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-dbengine-version-ami))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-dbengine-version-ami))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-dbengine-version-ami))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-dbengine-version-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-already-exists-fault)))
(common-lisp:deftype custom-dbengine-version-manifest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-dbengine-version-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition custom-dbengine-version-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-quota-exceeded-fault)))
(common-lisp:deftype custom-engine-name () 'common-lisp:string)
(common-lisp:deftype custom-engine-version () 'common-lisp:string)
(common-lisp:deftype custom-engine-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dbcluster common-lisp:nil
                       ((allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor struct-shape-dbcluster-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-backup-retention-period :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-character-set-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-database-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-dbcluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-parameter-group :initarg
                         :dbcluster-parameter-group :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-dbcluster-parameter-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group :initarg :dbsubnet-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-dbsubnet-group :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (automatic-restart-time :initarg
                         :automatic-restart-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automatic-restart-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (percent-progress :initarg :percent-progress :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-percent-progress :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (earliest-restorable-time :initarg
                         :earliest-restorable-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-earliest-restorable-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reader-endpoint :initarg :reader-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-reader-endpoint :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-endpoints :initarg :custom-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-dbcluster-custom-endpoints
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-multi-az :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-engine-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (latest-restorable-time :initarg
                         :latest-restorable-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-latest-restorable-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-master-username :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-option-group-memberships :initarg
                         :dbcluster-option-group-memberships :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-option-group-memberships
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-dbcluster-option-group-memberships
                         :shape "DBClusterOptionGroupMemberships" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-preferred-backup-window :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-source-identifier :initarg
                         :replication-source-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-replication-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-replica-identifiers :initarg
                         :read-replica-identifiers :initform common-lisp:nil
                         :type
                         (common-lisp:or read-replica-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-read-replica-identifiers :shape
                         "ReadReplicaIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-infos :initarg :status-infos :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-status-info-list
                                         common-lisp:null)
                         :accessor struct-shape-dbcluster-status-infos :shape
                         "DBClusterStatusInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-members :initarg :dbcluster-members
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-member-list
                                         common-lisp:null)
                         :accessor struct-shape-dbcluster-dbcluster-members
                         :shape "DBClusterMemberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-dbcluster-vpc-security-groups
                         :shape "VpcSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hosted-zone-id :initarg :hosted-zone-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-hosted-zone-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbcluster-storage-encrypted :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (db-cluster-resource-id :initarg
                         :db-cluster-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-db-cluster-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-arn :initarg :dbcluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-dbcluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associated-roles :initarg :associated-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-roles common-lisp:null)
                         :accessor struct-shape-dbcluster-associated-roles
                         :shape "DBClusterRoles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-iamdatabase-authentication-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clone-group-id :initarg :clone-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-clone-group-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-cluster-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (earliest-backtrack-time :initarg
                         :earliest-backtrack-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-earliest-backtrack-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (backtrack-window :initarg :backtrack-window :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-backtrack-window
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-consumed-change-records :initarg
                         :backtrack-consumed-change-records :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-backtrack-consumed-change-records
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-cloudwatch-logs-exports :initarg
                         :enabled-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-enabled-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity :initarg :capacity :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-capacity :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-engine-mode :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scaling-configuration-info :initarg
                         :scaling-configuration-info :initform common-lisp:nil
                         :type
                         (common-lisp:or scaling-configuration-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-scaling-configuration-info
                         :shape "ScalingConfigurationInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rds-custom-cluster-configuration :initarg
                         :rds-custom-cluster-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-custom-cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-rds-custom-cluster-configuration
                         :shape "RdsCustomClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-endpoint-enabled :initarg :http-endpoint-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-http-endpoint-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-mode :initarg :activity-stream-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or activity-stream-mode common-lisp:null)
                         :accessor struct-shape-dbcluster-activity-stream-mode
                         :shape "ActivityStreamMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-status :initarg
                         :activity-stream-status :initform common-lisp:nil
                         :type
                         (common-lisp:or activity-stream-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-activity-stream-status :shape
                         "ActivityStreamStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-kms-key-id :initarg
                         :activity-stream-kms-key-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-activity-stream-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-kinesis-stream-name :initarg
                         :activity-stream-kinesis-stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-activity-stream-kinesis-stream-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-account-clone :initarg :cross-account-clone
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-cross-account-clone
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-memberships :initarg :domain-memberships
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-dbcluster-domain-memberships
                         :shape "DomainMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-dbcluster-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (global-write-forwarding-status :initarg
                         :global-write-forwarding-status :initform
                         common-lisp:nil :type
                         (common-lisp:or write-forwarding-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-global-write-forwarding-status
                         :shape "WriteForwardingStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (global-write-forwarding-requested :initarg
                         :global-write-forwarding-requested :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-global-write-forwarding-requested
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-pending-modified-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-pending-modified-values :shape
                         "ClusterPendingModifiedValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbcluster-instance-class :initarg
                         :dbcluster-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-dbcluster-instance-class :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-storage-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-iops :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-auto-minor-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-monitoring-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (performance-insights-enabled :initarg
                         :performance-insights-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-performance-insights-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-v2scaling-configuration :initarg
                         :serverless-v2scaling-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          serverless-v2scaling-configuration-info
                          common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-serverless-v2scaling-configuration
                         :shape "ServerlessV2ScalingConfigurationInfo"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-network-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbsystem-id :initarg :dbsystem-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-dbsystem-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-user-secret :initarg :master-user-secret
                         :initform common-lisp:nil :type
                         (common-lisp:or master-user-secret common-lisp:null)
                         :accessor struct-shape-dbcluster-master-user-secret
                         :shape "MasterUserSecret" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iooptimized-next-allowed-modification-time :initarg
                         :iooptimized-next-allowed-modification-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-iooptimized-next-allowed-modification-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (local-write-forwarding-status :initarg
                         :local-write-forwarding-status :initform
                         common-lisp:nil :type
                         (common-lisp:or local-write-forwarding-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-local-write-forwarding-status
                         :shape "LocalWriteForwardingStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aws-backup-recovery-point-arn :initarg
                         :aws-backup-recovery-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-aws-backup-recovery-point-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limitless-database :initarg :limitless-database
                         :initform common-lisp:nil :type
                         (common-lisp:or limitless-database common-lisp:null)
                         :accessor struct-shape-dbcluster-limitless-database
                         :shape "LimitlessDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-details :initarg :certificate-details
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-details common-lisp:null)
                         :accessor struct-shape-dbcluster-certificate-details
                         :shape "CertificateDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbcluster 'make-dbcluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-restart-time))
      (common-lisp:list
       (common-lisp:cons "AutomaticRestartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "EarliestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoints))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBClusterOptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-members))
      (common-lisp:list
       (common-lisp:cons "DBClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-group-id))
      (common-lisp:list
       (common-lisp:cons "CloneGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-backtrack-time))
      (common-lisp:list
       (common-lisp:cons "EarliestBacktrackTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-consumed-change-records))
      (common-lisp:list
       (common-lisp:cons "BacktrackConsumedChangeRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration-info))
      (common-lisp:list
       (common-lisp:cons "ScalingConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-custom-cluster-configuration))
      (common-lisp:list
       (common-lisp:cons "RdsCustomClusterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "HttpEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-mode))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-account-clone))
      (common-lisp:list
       (common-lisp:cons "CrossAccountClone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-write-forwarding-status))
      (common-lisp:list
       (common-lisp:cons "GlobalWriteForwardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-write-forwarding-requested))
      (common-lisp:list
       (common-lisp:cons "GlobalWriteForwardingRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-secret))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iooptimized-next-allowed-modification-time))
      (common-lisp:list
       (common-lisp:cons "IOOptimizedNextAllowedModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-write-forwarding-status))
      (common-lisp:list
       (common-lisp:cons "LocalWriteForwardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limitless-database))
      (common-lisp:list
       (common-lisp:cons "LimitlessDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-details))
      (common-lisp:list
       (common-lisp:cons "CertificateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-automated-backup common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-automated-backups-arn :initarg
                         :dbcluster-automated-backups-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-dbcluster-automated-backups-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-window :initarg :restore-window :initform
                         common-lisp:nil :type
                         (common-lisp:or restore-window common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-restore-window
                         :shape "RestoreWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-cluster-resource-id :initarg
                         :db-cluster-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-db-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-iamdatabase-authentication-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-cluster-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-storage-encrypted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-arn :initarg :dbcluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-dbcluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-engine-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-port :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-automated-backup-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-backup-recovery-point-arn :initarg
                         :aws-backup-recovery-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-automated-backup-aws-backup-recovery-point-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-automated-backup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-automated-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-automated-backup
                    'make-dbcluster-automated-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-automated-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-automated-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-window))
      (common-lisp:list
       (common-lisp:cons "RestoreWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-automated-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-automated-backup-list ()
   '(trivial-types:proper-list dbcluster-automated-backup))
 (common-lisp:defun make-dbcluster-automated-backup-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-automated-backup))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-automated-backup-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-automated-backups :initarg
                         :dbcluster-automated-backups :initform common-lisp:nil
                         :type
                         (common-lisp:or dbcluster-automated-backup-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-automated-backup-message-dbcluster-automated-backups
                         :shape "DBClusterAutomatedBackupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-automated-backup-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-automated-backup-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-automated-backup-message
                    'make-dbcluster-automated-backup-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-automated-backup-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-automated-backup-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-automated-backups))
      (common-lisp:list
       (common-lisp:cons "DBClusterAutomatedBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-automated-backup-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-automated-backup-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-automated-backup-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-automated-backup-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-automated-backup-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-backtrack common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-backtrack-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-identifier :initarg :backtrack-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-backtrack-backtrack-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-to :initarg :backtrack-to :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-backtrack-backtrack-to :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (backtracked-from :initarg :backtracked-from :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-backtrack-backtracked-from
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-request-creation-time :initarg
                         :backtrack-request-creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-backtrack-backtrack-request-creation-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-backtrack-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-backtrack
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-backtrack
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-backtrack 'make-dbcluster-backtrack))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-backtrack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-backtrack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-identifier))
      (common-lisp:list
       (common-lisp:cons "BacktrackIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-to))
      (common-lisp:list
       (common-lisp:cons "BacktrackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtracked-from))
      (common-lisp:list
       (common-lisp:cons "BacktrackedFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-request-creation-time))
      (common-lisp:list
       (common-lisp:cons "BacktrackRequestCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-backtrack))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-backtrack-list ()
   '(trivial-types:proper-list dbcluster-backtrack))
 (common-lisp:defun make-dbcluster-backtrack-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-backtrack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-backtrack-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-backtrack-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-backtracks :initarg :dbcluster-backtracks
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-backtrack-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-backtrack-message-dbcluster-backtracks
                         :shape "DBClusterBacktrackList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-backtrack-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-backtrack-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-backtrack-message
                    'make-dbcluster-backtrack-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-backtrack-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-backtrack-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-backtracks))
      (common-lisp:list
       (common-lisp:cons "DBClusterBacktracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-backtrack-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-backtrack-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-backtrack-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-capacity-info common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-capacity-info-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-capacity :initarg :pending-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-capacity-info-pending-capacity
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-capacity :initarg :current-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-capacity-info-current-capacity
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-before-timeout :initarg
                         :seconds-before-timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-capacity-info-seconds-before-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-action :initarg :timeout-action :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-capacity-info-timeout-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-capacity-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-capacity-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-capacity-info 'make-dbcluster-capacity-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-capacity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-capacity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-capacity))
      (common-lisp:list
       (common-lisp:cons "PendingCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-capacity))
      (common-lisp:list
       (common-lisp:cons "CurrentCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-capacity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbcluster-endpoint common-lisp:nil
                       ((dbcluster-endpoint-identifier :initarg
                         :dbcluster-endpoint-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-endpoint-dbcluster-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-endpoint-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-endpoint-resource-identifier :initarg
                         :dbcluster-endpoint-resource-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-endpoint-dbcluster-endpoint-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-endpoint-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-endpoint-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-endpoint-endpoint-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-endpoint-type :initarg :custom-endpoint-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-endpoint-custom-endpoint-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (static-members :initarg :static-members :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-endpoint-static-members :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (excluded-members :initarg :excluded-members :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-endpoint-excluded-members
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-endpoint-arn :initarg
                         :dbcluster-endpoint-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-endpoint-dbcluster-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint 'make-dbcluster-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-endpoint-list ()
   '(trivial-types:proper-list dbcluster-endpoint))
 (common-lisp:defun make-dbcluster-endpoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-endpoint-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-endpoint-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-endpoints :initarg :dbcluster-endpoints
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-endpoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-endpoint-message-dbcluster-endpoints
                         :shape "DBClusterEndpointList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-message
                    'make-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-endpoints))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-endpoint-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-quota-exceeded-fault)))
(common-lisp:deftype dbcluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dbcluster-list () '(trivial-types:proper-list dbcluster))
 (common-lisp:defun make-dbcluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-member common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-member-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-cluster-writer :initarg :is-cluster-writer
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbcluster-member-is-cluster-writer :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-parameter-group-status :initarg
                         :dbcluster-parameter-group-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-member-dbcluster-parameter-group-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbcluster-member-promotion-tier
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-member 'make-dbcluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-cluster-writer))
      (common-lisp:list
       (common-lisp:cons "IsClusterWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-member-list ()
   '(trivial-types:proper-list dbcluster-member))
 (common-lisp:defun make-dbcluster-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbclusters :initarg :dbclusters :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-list common-lisp:null)
                         :accessor struct-shape-dbcluster-message-dbclusters
                         :shape "DBClusterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-message 'make-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbclusters))
      (common-lisp:list
       (common-lisp:cons "DBClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-option-group-memberships ()
   '(trivial-types:proper-list dbcluster-option-group-status))
 (common-lisp:defun make-dbcluster-option-group-memberships
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-option-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-option-group-status common-lisp:nil
                       ((dbcluster-option-group-name :initarg
                         :dbcluster-option-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-option-group-status-dbcluster-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-option-group-status-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-option-group-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-option-group-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-option-group-status
                    'make-dbcluster-option-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-option-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterOptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-group common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-parameter-group-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-parameter-group-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-parameter-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-parameter-group-arn :initarg
                         :dbcluster-parameter-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-parameter-group-dbcluster-parameter-group-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-parameter-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group
                    'make-dbcluster-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-group-details common-lisp:nil
                       ((parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-parameter-group-details-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-parameter-group-details-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-parameter-group-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-parameter-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-details
                    'make-dbcluster-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-parameter-group-list ()
   '(trivial-types:proper-list dbcluster-parameter-group))
 (common-lisp:defun make-dbcluster-parameter-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-group-name-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-parameter-group-name-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-parameter-group-name-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-parameter-group-name-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-name-message
                    'make-dbcluster-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-parameter-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-groups-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-parameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-parameter-groups :initarg
                         :dbcluster-parameter-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or dbcluster-parameter-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-parameter-groups-message-dbcluster-parameter-groups
                         :shape "DBClusterParameterGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-parameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-groups-message
                    'make-dbcluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-role common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-role-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-role-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (feature-name :initarg :feature-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-role-feature-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-role
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-role
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbcluster-role 'make-dbcluster-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-roles ()
   '(trivial-types:proper-list dbcluster-role))
 (common-lisp:defun make-dbcluster-roles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-snapshot-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-snapshot-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-engine-mode :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-snapshot-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-port :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-snapshot-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-cluster-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-master-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-license-model :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-snapshot-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (percent-progress :initarg :percent-progress :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-percent-progress
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-storage-encrypted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-snapshot-arn :initarg
                         :dbcluster-snapshot-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-dbcluster-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbcluster-snapshot-arn :initarg
                         :source-dbcluster-snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-source-dbcluster-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-iamdatabase-authentication-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-dbcluster-snapshot-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsystem-id :initarg :dbsystem-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-dbsystem-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-storage-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (db-cluster-resource-id :initarg
                         :db-cluster-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-db-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot 'make-dbcluster-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot-attribute common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-attribute-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-values :initarg :attribute-values :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-attribute-attribute-values
                         :shape "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-snapshot-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-snapshot-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attribute
                    'make-dbcluster-snapshot-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-attribute-list ()
   '(trivial-types:proper-list dbcluster-snapshot-attribute))
 (common-lisp:defun make-dbcluster-snapshot-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-snapshot-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot-attributes-result common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-snapshot-attributes-result-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-snapshot-attributes :initarg
                         :dbcluster-snapshot-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot-attribute-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-attributes-result-dbcluster-snapshot-attributes
                         :shape "DBClusterSnapshotAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-snapshot-attributes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-snapshot-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attributes-result
                    'make-dbcluster-snapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-list ()
   '(trivial-types:proper-list dbcluster-snapshot))
 (common-lisp:defun make-dbcluster-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-snapshots :initarg :dbcluster-snapshots
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbcluster-snapshot-message-dbcluster-snapshots
                         :shape "DBClusterSnapshotList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-message
                    'make-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshots))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-status-info common-lisp:nil
                       ((status-type :initarg :status-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbcluster-status-info-status-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (normal :initarg :normal :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-dbcluster-status-info-normal
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-status-info-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbcluster-status-info-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbcluster-status-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-status-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbcluster-status-info 'make-dbcluster-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-status-info-list ()
   '(trivial-types:proper-list dbcluster-status-info))
 (common-lisp:defun make-dbcluster-status-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbengine-version common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbengine-version-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbengine-description :initarg :dbengine-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-dbengine-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbengine-version-description :initarg
                         :dbengine-version-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-dbengine-version-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-character-set :initarg :default-character-set
                         :initform common-lisp:nil :type
                         (common-lisp:or character-set common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-default-character-set
                         :shape "CharacterSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or custom-dbengine-version-ami
                                         common-lisp:null)
                         :accessor struct-shape-dbengine-version-image :shape
                         "CustomDBEngineVersionAMI" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbengine-media-type :initarg :dbengine-media-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-dbengine-media-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-character-sets :initarg
                         :supported-character-sets :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-character-sets-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supported-character-sets
                         :shape "SupportedCharacterSetsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-nchar-character-sets :initarg
                         :supported-nchar-character-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or supported-character-sets-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supported-nchar-character-sets
                         :shape "SupportedCharacterSetsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (valid-upgrade-target :initarg :valid-upgrade-target
                         :initform common-lisp:nil :type
                         (common-lisp:or valid-upgrade-target-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-valid-upgrade-target
                         :shape "ValidUpgradeTargetList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-timezones :initarg :supported-timezones
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-timezones-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supported-timezones
                         :shape "SupportedTimezonesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exportable-log-types :initarg :exportable-log-types
                         :initform common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-exportable-log-types
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-log-exports-to-cloudwatch-logs :initarg
                         :supports-log-exports-to-cloudwatch-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbengine-version-supports-log-exports-to-cloudwatch-logs
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-read-replica :initarg :supports-read-replica
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbengine-version-supports-read-replica
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-engine-modes :initarg
                         :supported-engine-modes :initform common-lisp:nil
                         :type
                         (common-lisp:or engine-mode-list common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supported-engine-modes
                         :shape "EngineModeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-feature-names :initarg
                         :supported-feature-names :initform common-lisp:nil
                         :type
                         (common-lisp:or feature-name-list common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supported-feature-names
                         :shape "FeatureNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbengine-version-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supports-parallel-query :initarg
                         :supports-parallel-query :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supports-parallel-query
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-global-databases :initarg
                         :supports-global-databases :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supports-global-databases
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-installation-files-s3bucket-name :initarg
                         :database-installation-files-s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-database-installation-files-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-installation-files-s3prefix :initarg
                         :database-installation-files-s3prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-database-installation-files-s3prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbengine-version-arn :initarg :dbengine-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-dbengine-version-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbengine-version-kmskey-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbengine-version-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-dbengine-version-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-babelfish :initarg :supports-babelfish
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbengine-version-supports-babelfish
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-dbengine-version-manifest :initarg
                         :custom-dbengine-version-manifest :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-dbengine-version-manifest
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-custom-dbengine-version-manifest
                         :shape "CustomDBEngineVersionManifest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supports-certificate-rotation-without-restart :initarg
                         :supports-certificate-rotation-without-restart
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supports-certificate-rotation-without-restart
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-cacertificate-identifiers :initarg
                         :supported-cacertificate-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or cacertificate-identifiers-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supported-cacertificate-identifiers
                         :shape "CACertificateIdentifiersList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supports-local-write-forwarding :initarg
                         :supports-local-write-forwarding :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-supports-local-write-forwarding
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-integrations :initarg :supports-integrations
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbengine-version-supports-integrations
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbengine-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbengine-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbengine-version 'make-dbengine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-version-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-character-set))
      (common-lisp:list
       (common-lisp:cons "DefaultCharacterSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbengine-media-type))
      (common-lisp:list
       (common-lisp:cons "DBEngineMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "SupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-nchar-character-sets))
      (common-lisp:list
       (common-lisp:cons "SupportedNcharCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-upgrade-target))
      (common-lisp:list
       (common-lisp:cons "ValidUpgradeTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-timezones))
      (common-lisp:list
       (common-lisp:cons "SupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exportable-log-types))
      (common-lisp:list
       (common-lisp:cons "ExportableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-log-exports-to-cloudwatch-logs))
      (common-lisp:list
       (common-lisp:cons "SupportsLogExportsToCloudwatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-read-replica))
      (common-lisp:list
       (common-lisp:cons "SupportsReadReplica"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-feature-names))
      (common-lisp:list
       (common-lisp:cons "SupportedFeatureNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-parallel-query))
      (common-lisp:list
       (common-lisp:cons "SupportsParallelQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3prefix))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-version-arn))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-babelfish))
      (common-lisp:list
       (common-lisp:cons "SupportsBabelfish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dbengine-version-manifest))
      (common-lisp:list
       (common-lisp:cons "CustomDBEngineVersionManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-certificate-rotation-without-restart))
      (common-lisp:list
       (common-lisp:cons "SupportsCertificateRotationWithoutRestart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-cacertificate-identifiers))
      (common-lisp:list
       (common-lisp:cons "SupportedCACertificateIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-local-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "SupportsLocalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-integrations))
      (common-lisp:list
       (common-lisp:cons "SupportsIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbengine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbengine-version-list ()
   '(trivial-types:proper-list dbengine-version))
 (common-lisp:defun make-dbengine-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbengine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbengine-version-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbengine-version-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbengine-versions :initarg :dbengine-versions
                         :initform common-lisp:nil :type
                         (common-lisp:or dbengine-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbengine-version-message-dbengine-versions
                         :shape "DBEngineVersionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbengine-version-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbengine-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbengine-version-message 'make-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbengine-versions))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbinstance common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbinstance-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbinstance-class :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-status :initarg :dbinstance-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbinstance-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (automatic-restart-time :initarg
                         :automatic-restart-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automatic-restart-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-master-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-dbname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor struct-shape-dbinstance-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbinstance-allocated-storage :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbinstance-instance-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-preferred-backup-window :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-backup-retention-period :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbsecurity-groups :initarg :dbsecurity-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbsecurity-group-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-dbinstance-dbsecurity-groups
                         :shape "DBSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-dbinstance-vpc-security-groups
                         :shape "VpcSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbparameter-groups :initarg :dbparameter-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbparameter-group-status-list
                                         common-lisp:null)
                         :accessor struct-shape-dbinstance-dbparameter-groups
                         :shape "DBParameterGroupStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbsubnet-group :initarg :dbsubnet-group :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsubnet-group common-lisp:null)
                         :accessor struct-shape-dbinstance-dbsubnet-group
                         :shape "DBSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-modified-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-pending-modified-values :shape
                         "PendingModifiedValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-restorable-time :initarg
                         :latest-restorable-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-latest-restorable-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-dbinstance-multi-az :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-engine-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-auto-minor-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-replica-source-dbinstance-identifier :initarg
                         :read-replica-source-dbinstance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-read-replica-source-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-replica-dbinstance-identifiers :initarg
                         :read-replica-dbinstance-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          read-replica-dbinstance-identifier-list
                          common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-read-replica-dbinstance-identifiers
                         :shape "ReadReplicaDBInstanceIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (read-replica-dbcluster-identifiers :initarg
                         :read-replica-dbcluster-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or read-replica-dbcluster-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-read-replica-dbcluster-identifiers
                         :shape "ReadReplicaDBClusterIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-mode :initarg :replica-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-mode common-lisp:null)
                         :accessor struct-shape-dbinstance-replica-mode :shape
                         "ReplicaMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-license-model :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbinstance-iops :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-memberships :initarg
                         :option-group-memberships :initform common-lisp:nil
                         :type
                         (common-lisp:or option-group-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-option-group-memberships
                         :shape "OptionGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-character-set-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nchar-character-set-name :initarg
                         :nchar-character-set-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-nchar-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secondary-availability-zone :initarg
                         :secondary-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-secondary-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-publicly-accessible :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-infos :initarg :status-infos :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance-status-info-list
                                         common-lisp:null)
                         :accessor struct-shape-dbinstance-status-infos :shape
                         "DBInstanceStatusInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-storage-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-tde-credential-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (db-instance-port :initarg :db-instance-port :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbinstance-db-instance-port :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbcluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-storage-encrypted :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbi-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-cacertificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-memberships :initarg :domain-memberships
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-dbinstance-domain-memberships
                         :shape "DomainMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-copy-tags-to-snapshot :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbinstance-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-monitoring-resource-arn :initarg
                         :enhanced-monitoring-resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-enhanced-monitoring-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-monitoring-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbinstance-promotion-tier
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-arn :initarg :dbinstance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbinstance-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-timezone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-iamdatabase-authentication-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-enabled :initarg
                         :performance-insights-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-performance-insights-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled-cloudwatch-logs-exports :initarg
                         :enabled-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-enabled-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor struct-shape-dbinstance-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-deletion-protection :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associated-roles :initarg :associated-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance-roles common-lisp:null)
                         :accessor struct-shape-dbinstance-associated-roles
                         :shape "DBInstanceRoles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listener-endpoint :initarg :listener-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-dbinstance-listener-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-max-allocated-storage :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-dbinstance-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-automated-backups-replications :initarg
                         :dbinstance-automated-backups-replications :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          dbinstance-automated-backups-replication-list
                          common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-dbinstance-automated-backups-replications
                         :shape "DBInstanceAutomatedBackupsReplicationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-owned-ip-enabled :initarg
                         :customer-owned-ip-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-customer-owned-ip-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-backup-recovery-point-arn :initarg
                         :aws-backup-recovery-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-aws-backup-recovery-point-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-status :initarg
                         :activity-stream-status :initform common-lisp:nil
                         :type
                         (common-lisp:or activity-stream-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-activity-stream-status :shape
                         "ActivityStreamStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-kms-key-id :initarg
                         :activity-stream-kms-key-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-activity-stream-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-kinesis-stream-name :initarg
                         :activity-stream-kinesis-stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-activity-stream-kinesis-stream-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-mode :initarg :activity-stream-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or activity-stream-mode common-lisp:null)
                         :accessor struct-shape-dbinstance-activity-stream-mode
                         :shape "ActivityStreamMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (activity-stream-engine-native-audit-fields-included
                         :initarg
                         :activity-stream-engine-native-audit-fields-included
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-activity-stream-engine-native-audit-fields-included
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automation-mode :initarg :automation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or automation-mode common-lisp:null)
                         :accessor struct-shape-dbinstance-automation-mode
                         :shape "AutomationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resume-full-automation-mode-time :initarg
                         :resume-full-automation-mode-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbinstance-resume-full-automation-mode-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-iam-instance-profile :initarg
                         :custom-iam-instance-profile :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-custom-iam-instance-profile
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-target :initarg :backup-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-backup-target :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-network-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (activity-stream-policy-status :initarg
                         :activity-stream-policy-status :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-stream-policy-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-activity-stream-policy-status
                         :shape "ActivityStreamPolicyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbinstance-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsystem-id :initarg :dbsystem-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-dbsystem-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-user-secret :initarg :master-user-secret
                         :initform common-lisp:nil :type
                         (common-lisp:or master-user-secret common-lisp:null)
                         :accessor struct-shape-dbinstance-master-user-secret
                         :shape "MasterUserSecret" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-details :initarg :certificate-details
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-details common-lisp:null)
                         :accessor struct-shape-dbinstance-certificate-details
                         :shape "CertificateDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-replica-source-dbcluster-identifier :initarg
                         :read-replica-source-dbcluster-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-read-replica-source-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percent-progress :initarg :percent-progress :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-percent-progress :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-dedicated-log-volume :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-storage-config-upgrade-available :initarg
                         :is-storage-config-upgrade-available :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-is-storage-config-upgrade-available
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-tenant :initarg :multi-tenant :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbinstance-multi-tenant :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbinstance 'make-dbinstance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-status))
      (common-lisp:list
       (common-lisp:cons "DBInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-restart-time))
      (common-lisp:list
       (common-lisp:cons "AutomaticRestartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaSourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "OptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SecondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-port))
      (common-lisp:list
       (common-lisp:cons "DbInstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-monitoring-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoringResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-endpoint))
      (common-lisp:list
       (common-lisp:cons "ListenerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-replications))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsReplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-owned-ip-enabled))
      (common-lisp:list
       (common-lisp:cons "CustomerOwnedIpEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-mode))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamEngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-mode))
      (common-lisp:list
       (common-lisp:cons "AutomationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resume-full-automation-mode-time))
      (common-lisp:list
       (common-lisp:cons "ResumeFullAutomationModeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-policy-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamPolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-secret))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-details))
      (common-lisp:list
       (common-lisp:cons "CertificateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaSourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-storage-config-upgrade-available))
      (common-lisp:list
       (common-lisp:cons "IsStorageConfigUpgradeAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-tenant))
      (common-lisp:list
       (common-lisp:cons "MultiTenant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbinstance-automated-backup common-lisp:nil
                       ((dbinstance-arn :initarg :dbinstance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-dbinstance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-window :initarg :restore-window :initform
                         common-lisp:nil :type
                         (common-lisp:or restore-window common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-restore-window
                         :shape "RestoreWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-port :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-instance-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-iops :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-tde-credential-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-encrypted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-timezone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-iamdatabase-authentication-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-automated-backups-arn :initarg
                         :dbinstance-automated-backups-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-dbinstance-automated-backups-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-automated-backups-replications :initarg
                         :dbinstance-automated-backups-replications :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          dbinstance-automated-backups-replication-list
                          common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-dbinstance-automated-backups-replications
                         :shape "DBInstanceAutomatedBackupsReplicationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (backup-target :initarg :backup-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-backup-target
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-backup-recovery-point-arn :initarg
                         :aws-backup-recovery-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backup-aws-backup-recovery-point-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-tenant :initarg :multi-tenant :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-multi-tenant
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance-automated-backup
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance-automated-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup
                    'make-dbinstance-automated-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-window))
      (common-lisp:list
       (common-lisp:cons "RestoreWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-replications))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsReplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-tenant))
      (common-lisp:list
       (common-lisp:cons "MultiTenant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-automated-backup-list ()
   '(trivial-types:proper-list dbinstance-automated-backup))
 (common-lisp:defun make-dbinstance-automated-backup-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbinstance-automated-backup))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbinstance-automated-backup-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-automated-backups :initarg
                         :dbinstance-automated-backups :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance-automated-backup-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbinstance-automated-backup-message-dbinstance-automated-backups
                         :shape "DBInstanceAutomatedBackupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance-automated-backup-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbinstance-automated-backup-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup-message
                    'make-dbinstance-automated-backup-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-automated-backup-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-automated-backup-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass dbinstance-automated-backups-replication common-lisp:nil
                       ((dbinstance-automated-backups-arn :initarg
                         :dbinstance-automated-backups-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-automated-backups-replication-dbinstance-automated-backups-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance-automated-backups-replication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbinstance-automated-backups-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backups-replication
                    'make-dbinstance-automated-backups-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backups-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backups-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backups-replication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-automated-backups-replication-list ()
   '(trivial-types:proper-list dbinstance-automated-backups-replication))
 (common-lisp:defun make-dbinstance-automated-backups-replication-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbinstance-automated-backups-replication))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dbinstance-list ()
   '(trivial-types:proper-list dbinstance))
 (common-lisp:defun make-dbinstance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbinstance-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstances :initarg :dbinstances :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance-list common-lisp:null)
                         :accessor struct-shape-dbinstance-message-dbinstances
                         :shape "DBInstanceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbinstance-message 'make-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstances))
      (common-lisp:list
       (common-lisp:cons "DBInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbinstance-role common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-role-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (feature-name :initarg :feature-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-role-feature-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-role-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance-role
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance-role
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbinstance-role 'make-dbinstance-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-role-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-role-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-role-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-role-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-role-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbinstance-roles ()
   '(trivial-types:proper-list dbinstance-role))
 (common-lisp:defun make-dbinstance-roles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbinstance-status-info common-lisp:nil
                       ((status-type :initarg :status-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbinstance-status-info-status-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (normal :initarg :normal :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-dbinstance-status-info-normal
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-status-info-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbinstance-status-info-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbinstance-status-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance-status-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbinstance-status-info 'make-dbinstance-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-status-info-list ()
   '(trivial-types:proper-list dbinstance-status-info))
 (common-lisp:defun make-dbinstance-status-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dblog-file-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dblog-file-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbparameter-group common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbparameter-group-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbparameter-group-arn :initarg :dbparameter-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbparameter-group-dbparameter-group-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbparameter-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbparameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group 'make-dbparameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbparameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbparameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbparameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbparameter-group-details common-lisp:nil
                       ((parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-details-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-details-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbparameter-group-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbparameter-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-details
                    'make-dbparameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbparameter-group-list ()
   '(trivial-types:proper-list dbparameter-group))
 (common-lisp:defun make-dbparameter-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbparameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbparameter-group-name-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-name-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbparameter-group-name-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbparameter-group-name-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-name-message
                    'make-dbparameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbparameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass dbparameter-group-status common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-status-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-group-status-parameter-apply-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbparameter-group-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbparameter-group-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-status 'make-dbparameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbparameter-group-status-list ()
   '(trivial-types:proper-list dbparameter-group-status))
 (common-lisp:defun make-dbparameter-group-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbparameter-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbparameter-groups-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-groups-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbparameter-groups :initarg :dbparameter-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbparameter-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbparameter-groups-message-dbparameter-groups
                         :shape "DBParameterGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbparameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbparameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbparameter-groups-message
                    'make-dbparameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbproxy common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-dbproxy-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbproxy-arn :initarg :dbproxy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-dbproxy-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dbproxy-status common-lisp:null)
                         :accessor struct-shape-dbproxy-status :shape
                         "DBProxyStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-family :initarg :engine-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-engine-family :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-vpc-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-dbproxy-vpc-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-subnet-ids :initarg :vpc-subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-dbproxy-vpc-subnet-ids :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth :initarg :auth :initform common-lisp:nil :type
                         (common-lisp:or user-auth-config-info-list
                                         common-lisp:null)
                         :accessor struct-shape-dbproxy-auth :shape
                         "UserAuthConfigInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (require-tls :initarg :require-tls :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbproxy-require-tls :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idle-client-timeout :initarg :idle-client-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbproxy-idle-client-timeout :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (debug-logging :initarg :debug-logging :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbproxy-debug-logging :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbproxy-created-date :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-date :initarg :updated-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbproxy-updated-date :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbproxy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbproxy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbproxy 'make-dbproxy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-arn))
      (common-lisp:list
       (common-lisp:cons "DBProxyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-family))
      (common-lisp:list
       (common-lisp:cons "EngineFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-tls))
      (common-lisp:list
       (common-lisp:cons "RequireTLS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-client-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleClientTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-logging))
      (common-lisp:list
       (common-lisp:cons "DebugLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-date))
      (common-lisp:list
       (common-lisp:cons "UpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbproxy-endpoint common-lisp:nil
                       ((dbproxy-endpoint-name :initarg :dbproxy-endpoint-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-endpoint-dbproxy-endpoint-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbproxy-endpoint-arn :initarg :dbproxy-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-endpoint-dbproxy-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbproxy-name :initarg :dbproxy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-endpoint-dbproxy-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or dbproxy-endpoint-status
                                         common-lisp:null)
                         :accessor struct-shape-dbproxy-endpoint-status :shape
                         "DBProxyEndpointStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-endpoint-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-dbproxy-endpoint-vpc-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-subnet-ids :initarg :vpc-subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-dbproxy-endpoint-vpc-subnet-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-endpoint-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbproxy-endpoint-created-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-role :initarg :target-role :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint-target-role
                                         common-lisp:null)
                         :accessor struct-shape-dbproxy-endpoint-target-role
                         :shape "DBProxyEndpointTargetRole" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbproxy-endpoint-is-default :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbproxy-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbproxy-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbproxy-endpoint 'make-dbproxy-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-role))
      (common-lisp:list
       (common-lisp:cons "TargetRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-endpoint-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-endpoint-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbproxy-endpoint-list ()
   '(trivial-types:proper-list dbproxy-endpoint))
 (common-lisp:defun make-dbproxy-endpoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dbproxy-endpoint-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition dbproxy-endpoint-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-endpoint-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-endpoint-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-endpoint-quota-exceeded-fault)))
(common-lisp:deftype dbproxy-endpoint-status () 'common-lisp:string)
(common-lisp:deftype dbproxy-endpoint-target-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dbproxy-list () '(trivial-types:proper-list dbproxy))
 (common-lisp:defun make-dbproxy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dbproxy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition dbproxy-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-quota-exceeded-fault)))
(common-lisp:deftype dbproxy-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dbproxy-target common-lisp:nil
                       ((target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-target-target-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-target-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tracked-cluster-id :initarg :tracked-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-target-tracked-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rds-resource-id :initarg :rds-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-target-rds-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbproxy-target-port :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor struct-shape-dbproxy-target-type :shape
                         "TargetType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or target-role common-lisp:null)
                         :accessor struct-shape-dbproxy-target-role :shape
                         "TargetRole" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-health :initarg :target-health :initform
                         common-lisp:nil :type
                         (common-lisp:or target-health common-lisp:null)
                         :accessor struct-shape-dbproxy-target-target-health
                         :shape "TargetHealth" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbproxy-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbproxy-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbproxy-target 'make-dbproxy-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracked-cluster-id))
      (common-lisp:list
       (common-lisp:cons "TrackedClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-resource-id))
      (common-lisp:list
       (common-lisp:cons "RdsResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-health))
      (common-lisp:list
       (common-lisp:cons "TargetHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-target-already-registered-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbproxy-target-already-registered-fault)))
(common-lisp:progn
 (common-lisp:defclass dbproxy-target-group common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-target-group-dbproxy-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-group-name :initarg :target-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-target-group-target-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbproxy-target-group-target-group-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbproxy-target-group-is-default :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbproxy-target-group-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-pool-config :initarg
                         :connection-pool-config :initform common-lisp:nil
                         :type
                         (common-lisp:or connection-pool-configuration-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbproxy-target-group-connection-pool-config
                         :shape "ConnectionPoolConfigurationInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbproxy-target-group-created-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-date :initarg :updated-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbproxy-target-group-updated-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbproxy-target-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbproxy-target-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbproxy-target-group 'make-dbproxy-target-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy-target-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy-target-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-pool-config))
      (common-lisp:list
       (common-lisp:cons "ConnectionPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-date))
      (common-lisp:list
       (common-lisp:cons "UpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy-target-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-target-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-target-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-target-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-target-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbrecommendation common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-recommendation-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-id :initarg :type-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-type-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-severity
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-resource-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbrecommendation-created-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-time :initarg :updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbrecommendation-updated-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (detection :initarg :detection :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-detection :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-recommendation :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommended-actions :initarg :recommended-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or recommended-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbrecommendation-recommended-actions
                         :shape "RecommendedActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-category
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-source :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-detection :initarg :type-detection :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-type-detection :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-recommendation :initarg :type-recommendation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-type-recommendation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact :initarg :impact :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbrecommendation-impact :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbrecommendation-additional-info :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (links :initarg :links :initform common-lisp:nil :type
                         (common-lisp:or doc-link-list common-lisp:null)
                         :accessor struct-shape-dbrecommendation-links :shape
                         "DocLinkList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (issue-details :initarg :issue-details :initform
                         common-lisp:nil :type
                         (common-lisp:or issue-details common-lisp:null)
                         :accessor struct-shape-dbrecommendation-issue-details
                         :shape "IssueDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbrecommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbrecommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbrecommendation 'make-dbrecommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbrecommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbrecommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-id))
      (common-lisp:list
       (common-lisp:cons "TypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detection))
      (common-lisp:list
       (common-lisp:cons "Detection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "Recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "RecommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-detection))
      (common-lisp:list
       (common-lisp:cons "TypeDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-recommendation))
      (common-lisp:list
       (common-lisp:cons "TypeRecommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "Impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'links))
      (common-lisp:list
       (common-lisp:cons "Links"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-details))
      (common-lisp:list
       (common-lisp:cons "IssueDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbrecommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbrecommendation-list ()
   '(trivial-types:proper-list dbrecommendation))
 (common-lisp:defun make-dbrecommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbrecommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbrecommendation-message common-lisp:nil
                       ((dbrecommendation :initarg :dbrecommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or dbrecommendation common-lisp:null)
                         :accessor
                         struct-shape-dbrecommendation-message-dbrecommendation
                         :shape "DBRecommendation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbrecommendation-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbrecommendation-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbrecommendation-message 'make-dbrecommendation-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbrecommendation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbrecommendation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbrecommendation))
      (common-lisp:list
       (common-lisp:cons "DBRecommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbrecommendation-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbrecommendations-message common-lisp:nil
                       ((dbrecommendations :initarg :dbrecommendations
                         :initform common-lisp:nil :type
                         (common-lisp:or dbrecommendation-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbrecommendations-message-dbrecommendations
                         :shape "DBRecommendationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbrecommendations-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbrecommendations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbrecommendations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbrecommendations-message
                    'make-dbrecommendations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbrecommendations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbrecommendations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbrecommendations))
      (common-lisp:list
       (common-lisp:cons "DBRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbrecommendations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbsecurity-group common-lisp:nil
                       ((owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsecurity-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsecurity-group-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-group-description :initarg
                         :dbsecurity-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsecurity-group-dbsecurity-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsecurity-group-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-groups :initarg :ec2security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2security-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbsecurity-group-ec2security-groups
                         :shape "EC2SecurityGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ipranges :initarg :ipranges :initform common-lisp:nil
                         :type (common-lisp:or iprange-list common-lisp:null)
                         :accessor struct-shape-dbsecurity-group-ipranges
                         :shape "IPRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-group-arn :initarg :dbsecurity-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsecurity-group-dbsecurity-group-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsecurity-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsecurity-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group 'make-dbsecurity-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsecurity-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsecurity-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipranges))
      (common-lisp:list
       (common-lisp:cons "IPRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsecurity-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbsecurity-group-membership common-lisp:nil
                       ((dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsecurity-group-membership-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbsecurity-group-membership-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsecurity-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsecurity-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group-membership
                    'make-dbsecurity-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-group-membership-list ()
   '(trivial-types:proper-list dbsecurity-group-membership))
 (common-lisp:defun make-dbsecurity-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbsecurity-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbsecurity-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsecurity-group-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-groups :initarg :dbsecurity-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbsecurity-groups common-lisp:null)
                         :accessor
                         struct-shape-dbsecurity-group-message-dbsecurity-groups
                         :shape "DBSecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsecurity-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsecurity-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group-message 'make-dbsecurity-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-dbsecurity-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-not-supported-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-groups ()
   '(trivial-types:proper-list dbsecurity-group))
 (common-lisp:defun make-dbsecurity-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsecurity-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbshard-group common-lisp:nil
                       ((dbshard-group-resource-id :initarg
                         :dbshard-group-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbshard-group-dbshard-group-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbshard-group-identifier :initarg
                         :dbshard-group-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or dbshard-group-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbshard-group-dbshard-group-identifier
                         :shape "DBShardGroupIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbshard-group-dbcluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-acu :initarg :max-acu :initform common-lisp:nil
                         :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor struct-shape-dbshard-group-max-acu :shape
                         "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compute-redundancy :initarg :compute-redundancy
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-dbshard-group-compute-redundancy :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbshard-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-dbshard-group-publicly-accessible :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbshard-group-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbshard-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbshard-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbshard-group 'make-dbshard-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbshard-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbshard-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-resource-id))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-identifier))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-acu))
      (common-lisp:list
       (common-lisp:cons "MaxACU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-redundancy))
      (common-lisp:list
       (common-lisp:cons "ComputeRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbshard-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbshard-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbshard-group-already-exists-fault)))
(common-lisp:deftype dbshard-group-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition dbshard-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbshard-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype dbshard-groups-list ()
   '(trivial-types:proper-list dbshard-group))
 (common-lisp:defun make-dbshard-groups-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbshard-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbsnapshot common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-dbsnapshot-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-dbinstance-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbsnapshot-snapshot-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsnapshot-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbsnapshot-allocated-storage :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsnapshot-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbsnapshot-port :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsnapshot-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbsnapshot-instance-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-master-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-engine-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-license-model :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-snapshot-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbsnapshot-iops :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-option-group-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (percent-progress :initarg :percent-progress :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-dbsnapshot-percent-progress :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-source-region :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-dbsnapshot-identifier :initarg
                         :source-dbsnapshot-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-source-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-storage-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tde-credential-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbsnapshot-encrypted :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbsnapshot-arn :initarg :dbsnapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-dbsnapshot-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsnapshot-timezone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbsnapshot-iamdatabase-authentication-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor struct-shape-dbsnapshot-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-dbi-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-dbsnapshot-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (original-snapshot-create-time :initarg
                         :original-snapshot-create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-dbsnapshot-original-snapshot-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-database-time :initarg
                         :snapshot-database-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-snapshot-database-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-target :initarg :snapshot-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-snapshot-target :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-dbsnapshot-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsystem-id :initarg :dbsystem-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-dbsystem-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dbsnapshot-dedicated-log-volume :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-tenant :initarg :multi-tenant :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-dbsnapshot-multi-tenant :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsnapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsnapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbsnapshot 'make-dbsnapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsnapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsnapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot-arn))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "OriginalSnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-database-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotDatabaseTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-target))
      (common-lisp:list
       (common-lisp:cons "SnapshotTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-tenant))
      (common-lisp:list
       (common-lisp:cons "MultiTenant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsnapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbsnapshot-attribute common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-attribute-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-values :initarg :attribute-values :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-attribute-attribute-values
                         :shape "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsnapshot-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsnapshot-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-attribute 'make-dbsnapshot-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsnapshot-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsnapshot-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsnapshot-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsnapshot-attribute-list ()
   '(trivial-types:proper-list dbsnapshot-attribute))
 (common-lisp:defun make-dbsnapshot-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsnapshot-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbsnapshot-attributes-result common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-attributes-result-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-attributes :initarg :dbsnapshot-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or dbsnapshot-attribute-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-attributes-result-dbsnapshot-attributes
                         :shape "DBSnapshotAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsnapshot-attributes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsnapshot-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-attributes-result
                    'make-dbsnapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-attributes))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsnapshot-list ()
   '(trivial-types:proper-list dbsnapshot))
 (common-lisp:defun make-dbsnapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsnapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbsnapshot-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsnapshot-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshots :initarg :dbsnapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot-list common-lisp:null)
                         :accessor struct-shape-dbsnapshot-message-dbsnapshots
                         :shape "DBSnapshotList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsnapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsnapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-message 'make-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshots))
      (common-lisp:list
       (common-lisp:cons "DBSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbsnapshot-tenant-database common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-database-create-time :initarg
                         :tenant-database-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-tenant-database-tenant-database-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-database-resource-id :initarg
                         :tenant-database-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-tenant-database-tenant-database-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-tenant-database-arn :initarg
                         :dbsnapshot-tenant-database-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsnapshot-tenant-database-dbsnapshot-tenant-database-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nchar-character-set-name :initarg
                         :nchar-character-set-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-tenant-database-nchar-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-tenant-database-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsnapshot-tenant-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsnapshot-tenant-database
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-tenant-database
                    'make-dbsnapshot-tenant-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-tenant-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-tenant-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tenant-database-create-time))
      (common-lisp:list
       (common-lisp:cons "TenantDatabaseCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tenant-database-resource-id))
      (common-lisp:list
       (common-lisp:cons "TenantDatabaseResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-tenant-database-arn))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotTenantDatabaseARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-tenant-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-tenant-database-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-tenant-database-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsnapshot-tenant-databases-list ()
   '(trivial-types:proper-list dbsnapshot-tenant-database))
 (common-lisp:defun make-dbsnapshot-tenant-databases-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbsnapshot-tenant-database))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbsnapshot-tenant-databases-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-tenant-databases-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-tenant-databases :initarg
                         :dbsnapshot-tenant-databases :initform common-lisp:nil
                         :type
                         (common-lisp:or dbsnapshot-tenant-databases-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-dbsnapshot-tenant-databases-message-dbsnapshot-tenant-databases
                         :shape "DBSnapshotTenantDatabasesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsnapshot-tenant-databases-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbsnapshot-tenant-databases-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-tenant-databases-message
                    'make-dbsnapshot-tenant-databases-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-tenant-databases-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-tenant-databases-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-tenant-databases))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotTenantDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-tenant-databases-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbsubnet-group common-lisp:nil
                       ((dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsubnet-group-dbsubnet-group-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbsubnet-group-description :initarg
                         :dbsubnet-group-description :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dbsubnet-group-dbsubnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsubnet-group-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-group-status :initarg :subnet-group-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsubnet-group-subnet-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or subnet-list common-lisp:null)
                         :accessor struct-shape-dbsubnet-group-subnets :shape
                         "SubnetList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbsubnet-group-arn :initarg :dbsubnet-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dbsubnet-group-dbsubnet-group-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-network-types :initarg
                         :supported-network-types :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-dbsubnet-group-supported-network-types
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsubnet-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsubnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dbsubnet-group 'make-dbsubnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-does-not-cover-enough-azs
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-does-not-cover-enough-azs)))
(common-lisp:progn
 (common-lisp:defclass dbsubnet-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-dbsubnet-group-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-groups :initarg :dbsubnet-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsubnet-groups common-lisp:null)
                         :accessor
                         struct-shape-dbsubnet-group-message-dbsubnet-groups
                         :shape "DBSubnetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dbsubnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-message 'make-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-groups))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-not-allowed-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-not-allowed-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsubnet-groups ()
   '(trivial-types:proper-list dbsubnet-group))
 (common-lisp:defun make-dbsubnet-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsubnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbupgrade-dependency-failure-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbupgrade-dependency-failure-fault)))
(common-lisp:deftype database-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-blue-green-deployment-request common-lisp:nil
                       ((blue-green-deployment-identifier :initarg
                         :blue-green-deployment-identifier :initform
                         (common-lisp:error
                          ":blue-green-deployment-identifier is required")
                         :type
                         (common-lisp:or blue-green-deployment-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-blue-green-deployment-request-blue-green-deployment-identifier
                         :shape "BlueGreenDeploymentIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delete-target :initarg :delete-target :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-delete-blue-green-deployment-request-delete-target
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-blue-green-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-blue-green-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-blue-green-deployment-request
                    'make-delete-blue-green-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-target))
      (common-lisp:list
       (common-lisp:cons "DeleteTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-blue-green-deployment-response common-lisp:nil
                       ((blue-green-deployment :initarg :blue-green-deployment
                         :initform common-lisp:nil :type
                         (common-lisp:or blue-green-deployment
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-blue-green-deployment-response-blue-green-deployment
                         :shape "BlueGreenDeployment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-blue-green-deployment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-blue-green-deployment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-blue-green-deployment-response
                    'make-delete-blue-green-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-dbengine-version-message common-lisp:nil
                       ((engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or custom-engine-name common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-dbengine-version-message-engine
                         :shape "CustomEngineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         (common-lisp:error ":engine-version is required")
                         :type
                         (common-lisp:or custom-engine-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-dbengine-version-message-engine-version
                         :shape "CustomEngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-dbengine-version-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-dbengine-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-dbengine-version-message
                    'make-delete-custom-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-automated-backup-message
                       common-lisp:nil
                       ((db-cluster-resource-id :initarg
                         :db-cluster-resource-id :initform
                         (common-lisp:error
                          ":db-cluster-resource-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-automated-backup-message-db-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-automated-backup-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-automated-backup-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-automated-backup-message
                    'make-delete-dbcluster-automated-backup-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-automated-backup-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-automated-backup-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-automated-backup-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-automated-backup-result common-lisp:nil
                       ((dbcluster-automated-backup :initarg
                         :dbcluster-automated-backup :initform common-lisp:nil
                         :type
                         (common-lisp:or dbcluster-automated-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-automated-backup-result-dbcluster-automated-backup
                         :shape "DBClusterAutomatedBackup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-automated-backup-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-automated-backup-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-automated-backup-result
                    'make-delete-dbcluster-automated-backup-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-automated-backup-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-automated-backup-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBClusterAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-automated-backup-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-endpoint-message common-lisp:nil
                       ((dbcluster-endpoint-identifier :initarg
                         :dbcluster-endpoint-identifier :initform
                         (common-lisp:error
                          ":dbcluster-endpoint-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-endpoint-message-dbcluster-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-endpoint-message
                    'make-delete-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-final-snapshot :initarg :skip-final-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-dbcluster-message-skip-final-snapshot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-dbsnapshot-identifier :initarg
                         :final-dbsnapshot-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-message-final-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-automated-backups :initarg
                         :delete-automated-backups :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-message-delete-automated-backups
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-message 'make-delete-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-automated-backups))
      (common-lisp:list
       (common-lisp:cons "DeleteAutomatedBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-parameter-group-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-parameter-group-message
                    'make-delete-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-delete-dbcluster-result-dbcluster :shape
                         "DBCluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-result 'make-delete-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-snapshot-message common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-snapshot-message-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-message
                    'make-delete-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-snapshot-result common-lisp:nil
                       ((dbcluster-snapshot :initarg :dbcluster-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot common-lisp:null)
                         :accessor
                         struct-shape-delete-dbcluster-snapshot-result-dbcluster-snapshot
                         :shape "DBClusterSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbcluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-result
                    'make-delete-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbinstance-automated-backup-message
                       common-lisp:nil
                       ((dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-dbinstance-automated-backup-message-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-automated-backups-arn :initarg
                         :dbinstance-automated-backups-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-dbinstance-automated-backup-message-dbinstance-automated-backups-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbinstance-automated-backup-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbinstance-automated-backup-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-automated-backup-message
                    'make-delete-dbinstance-automated-backup-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbinstance-automated-backup-result
                       common-lisp:nil
                       ((dbinstance-automated-backup :initarg
                         :dbinstance-automated-backup :initform common-lisp:nil
                         :type
                         (common-lisp:or dbinstance-automated-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-dbinstance-automated-backup-result-dbinstance-automated-backup
                         :shape "DBInstanceAutomatedBackup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbinstance-automated-backup-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbinstance-automated-backup-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-automated-backup-result
                    'make-delete-dbinstance-automated-backup-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-final-snapshot :initarg :skip-final-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-dbinstance-message-skip-final-snapshot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-dbsnapshot-identifier :initarg
                         :final-dbsnapshot-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbinstance-message-final-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-automated-backups :initarg
                         :delete-automated-backups :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-delete-dbinstance-message-delete-automated-backups
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-message
                    'make-delete-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-automated-backups))
      (common-lisp:list
       (common-lisp:cons "DeleteAutomatedBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-delete-dbinstance-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbinstance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-result 'make-delete-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbparameter-group-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform
                         (common-lisp:error
                          ":dbparameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbparameter-group-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbparameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbparameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbparameter-group-message
                    'make-delete-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbproxy-endpoint-request common-lisp:nil
                       ((dbproxy-endpoint-name :initarg :dbproxy-endpoint-name
                         :initform
                         (common-lisp:error
                          ":dbproxy-endpoint-name is required")
                         :type
                         (common-lisp:or dbproxy-endpoint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-dbproxy-endpoint-request-dbproxy-endpoint-name
                         :shape "DBProxyEndpointName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbproxy-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbproxy-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-endpoint-request
                    'make-delete-dbproxy-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbproxy-endpoint-response common-lisp:nil
                       ((dbproxy-endpoint :initarg :dbproxy-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint common-lisp:null)
                         :accessor
                         struct-shape-delete-dbproxy-endpoint-response-dbproxy-endpoint
                         :shape "DBProxyEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbproxy-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbproxy-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-endpoint-response
                    'make-delete-dbproxy-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbproxy-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-dbproxy-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbproxy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbproxy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-request 'make-delete-dbproxy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbproxy-response common-lisp:nil
                       ((dbproxy :initarg :dbproxy :initform common-lisp:nil
                         :type (common-lisp:or dbproxy common-lisp:null)
                         :accessor struct-shape-delete-dbproxy-response-dbproxy
                         :shape "DBProxy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbproxy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbproxy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-response 'make-delete-dbproxy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy))
      (common-lisp:list
       (common-lisp:cons "DBProxy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbsecurity-group-message common-lisp:nil
                       ((dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform
                         (common-lisp:error
                          ":dbsecurity-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbsecurity-group-message-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbsecurity-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbsecurity-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbsecurity-group-message
                    'make-delete-dbsecurity-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsecurity-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsecurity-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsecurity-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbshard-group-message common-lisp:nil
                       ((dbshard-group-identifier :initarg
                         :dbshard-group-identifier :initform
                         (common-lisp:error
                          ":dbshard-group-identifier is required")
                         :type
                         (common-lisp:or dbshard-group-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-dbshard-group-message-dbshard-group-identifier
                         :shape "DBShardGroupIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbshard-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbshard-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbshard-group-message
                    'make-delete-dbshard-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbshard-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbshard-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-identifier))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbshard-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbsnapshot-message common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbsnapshot-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbsnapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbsnapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbsnapshot-message
                    'make-delete-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbsnapshot-result common-lisp:nil
                       ((dbsnapshot :initarg :dbsnapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot common-lisp:null) :accessor
                         struct-shape-delete-dbsnapshot-result-dbsnapshot
                         :shape "DBSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbsnapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbsnapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbsnapshot-result 'make-delete-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbsubnet-group-message common-lisp:nil
                       ((dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform
                         (common-lisp:error ":dbsubnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-dbsubnet-group-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dbsubnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dbsubnet-group-message
                    'make-delete-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-delete-event-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-result
                    'make-delete-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-global-cluster-message-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-global-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-message
                    'make-delete-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         struct-shape-delete-global-cluster-result-global-cluster
                         :shape "GlobalCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-global-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-result
                    'make-delete-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-integration-message common-lisp:nil
                       ((integration-identifier :initarg
                         :integration-identifier :initform
                         (common-lisp:error
                          ":integration-identifier is required")
                         :type
                         (common-lisp:or integration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-integration-message-integration-identifier
                         :shape "IntegrationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-integration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-integration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-integration-message
                    'make-delete-integration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-identifier))
      (common-lisp:list
       (common-lisp:cons "IntegrationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-option-group-message common-lisp:nil
                       ((option-group-name :initarg :option-group-name
                         :initform
                         (common-lisp:error ":option-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-option-group-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-option-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-option-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-option-group-message
                    'make-delete-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tenant-database-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-tenant-database-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         (common-lisp:error ":tenant-dbname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-tenant-database-message-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-final-snapshot :initarg :skip-final-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-tenant-database-message-skip-final-snapshot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-dbsnapshot-identifier :initarg
                         :final-dbsnapshot-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-tenant-database-message-final-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-tenant-database-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-tenant-database-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-tenant-database-message
                    'make-delete-tenant-database-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tenant-database-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tenant-database-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tenant-database-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tenant-database-result common-lisp:nil
                       ((tenant-database :initarg :tenant-database :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-database common-lisp:null)
                         :accessor
                         struct-shape-delete-tenant-database-result-tenant-database
                         :shape "TenantDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-tenant-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-tenant-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-tenant-database-result
                    'make-delete-tenant-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tenant-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tenant-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-database))
      (common-lisp:list
       (common-lisp:cons "TenantDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tenant-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-dbproxy-targets-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-dbproxy-targets-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-name :initarg :target-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-dbproxy-targets-request-target-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifiers :initarg
                         :dbinstance-identifiers :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-deregister-dbproxy-targets-request-dbinstance-identifiers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifiers :initarg :dbcluster-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-deregister-dbproxy-targets-request-dbcluster-identifiers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-dbproxy-targets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-dbproxy-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-dbproxy-targets-request
                    'make-deregister-dbproxy-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-dbproxy-targets-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-dbproxy-targets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-dbproxy-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-dbproxy-targets-response
                    'make-deregister-dbproxy-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-message common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-attributes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-message
                    'make-describe-account-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-blue-green-deployments-request common-lisp:nil
                       ((blue-green-deployment-identifier :initarg
                         :blue-green-deployment-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or blue-green-deployment-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-blue-green-deployments-request-blue-green-deployment-identifier
                         :shape "BlueGreenDeploymentIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-blue-green-deployments-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-blue-green-deployments-request-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-blue-green-deployments-request-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-blue-green-deployments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-blue-green-deployments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-blue-green-deployments-request
                    'make-describe-blue-green-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-blue-green-deployments-response common-lisp:nil
                       ((blue-green-deployments :initarg
                         :blue-green-deployments :initform common-lisp:nil
                         :type
                         (common-lisp:or blue-green-deployment-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-blue-green-deployments-response-blue-green-deployments
                         :shape "BlueGreenDeploymentList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-blue-green-deployments-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-blue-green-deployments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-blue-green-deployments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-blue-green-deployments-response
                    'make-describe-blue-green-deployments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployments))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificates-message common-lisp:nil
                       ((certificate-identifier :initarg
                         :certificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificates-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificates-message
                    'make-describe-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-automated-backups-message
                       common-lisp:nil
                       ((db-cluster-resource-id :initarg
                         :db-cluster-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-automated-backups-message-db-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-automated-backups-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-automated-backups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-automated-backups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-automated-backups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-automated-backups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-automated-backups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-automated-backups-message
                    'make-describe-dbcluster-automated-backups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-automated-backups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-automated-backups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-automated-backups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-backtracks-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-backtracks-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-identifier :initarg :backtrack-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-backtracks-message-backtrack-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-backtracks-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-backtracks-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-backtracks-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-backtracks-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-backtracks-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-backtracks-message
                    'make-describe-dbcluster-backtracks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-backtracks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-backtracks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-identifier))
      (common-lisp:list
       (common-lisp:cons "BacktrackIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-backtracks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-endpoints-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-endpoints-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-endpoint-identifier :initarg
                         :dbcluster-endpoint-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-endpoints-message-dbcluster-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-endpoints-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-endpoints-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-endpoints-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-endpoints-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-endpoints-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-endpoints-message
                    'make-describe-dbcluster-endpoints-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-parameter-groups-message
                       common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-parameter-groups-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameter-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameter-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-parameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameter-groups-message
                    'make-describe-dbcluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-parameters-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameters-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameters-message-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameters-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameters-message
                    'make-describe-dbcluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-snapshot-attributes-message
                       common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-snapshot-attributes-message-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-snapshot-attributes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-snapshot-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-message
                    'make-describe-dbcluster-snapshot-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-snapshot-attributes-result
                       common-lisp:nil
                       ((dbcluster-snapshot-attributes-result :initarg
                         :dbcluster-snapshot-attributes-result :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot-attributes-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-snapshot-attributes-result-dbcluster-snapshot-attributes-result
                         :shape "DBClusterSnapshotAttributesResult" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-snapshot-attributes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-snapshot-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-result
                    'make-describe-dbcluster-snapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-snapshots-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-snapshots-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-snapshots-message-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-snapshots-message-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-snapshots-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-snapshots-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-snapshots-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-shared :initarg :include-shared :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-snapshots-message-include-shared
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-public :initarg :include-public :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-dbcluster-snapshots-message-include-public
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-cluster-resource-id :initarg
                         :db-cluster-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbcluster-snapshots-message-db-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbcluster-snapshots-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-snapshots-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshots-message
                    'make-describe-dbcluster-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-public))
      (common-lisp:list
       (common-lisp:cons "IncludePublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbclusters-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbclusters-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbclusters-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbclusters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbclusters-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-shared :initarg :include-shared :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-dbclusters-message-include-shared
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbclusters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbclusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbclusters-message
                    'make-describe-dbclusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbengine-versions-message common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbengine-versions-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-only :initarg :default-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-dbengine-versions-message-default-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (list-supported-character-sets :initarg
                         :list-supported-character-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-list-supported-character-sets
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (list-supported-timezones :initarg
                         :list-supported-timezones :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-list-supported-timezones
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-all :initarg :include-all :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbengine-versions-message-include-all
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbengine-versions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbengine-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbengine-versions-message
                    'make-describe-dbengine-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "ListSupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-timezones))
      (common-lisp:list
       (common-lisp:cons "ListSupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-all))
      (common-lisp:list
       (common-lisp:cons "IncludeAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbinstance-automated-backups-message
                       common-lisp:nil
                       ((dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbinstance-automated-backups-message-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbinstance-automated-backups-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbinstance-automated-backups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbinstance-automated-backups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbinstance-automated-backups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-automated-backups-arn :initarg
                         :dbinstance-automated-backups-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbinstance-automated-backups-message-dbinstance-automated-backups-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbinstance-automated-backups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbinstance-automated-backups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbinstance-automated-backups-message
                    'make-describe-dbinstance-automated-backups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstance-automated-backups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstance-automated-backups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstance-automated-backups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbinstances-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbinstances-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbinstances-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbinstances-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbinstances-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbinstances-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbinstances-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbinstances-message
                    'make-describe-dbinstances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dblog-files-details common-lisp:nil
                       ((log-file-name :initarg :log-file-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dblog-files-details-log-file-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-written :initarg :last-written :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-dblog-files-details-last-written
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-dblog-files-details-size :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dblog-files-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dblog-files-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dblog-files-details
                    'make-describe-dblog-files-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-name))
      (common-lisp:list
       (common-lisp:cons "LogFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-written))
      (common-lisp:list
       (common-lisp:cons "LastWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-dblog-files-list ()
   '(trivial-types:proper-list describe-dblog-files-details))
 (common-lisp:defun make-describe-dblog-files-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-dblog-files-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-dblog-files-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dblog-files-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filename-contains :initarg :filename-contains
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dblog-files-message-filename-contains
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-last-written :initarg :file-last-written
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-dblog-files-message-file-last-written
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-size :initarg :file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-dblog-files-message-file-size
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dblog-files-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dblog-files-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dblog-files-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dblog-files-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dblog-files-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dblog-files-message
                    'make-describe-dblog-files-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filename-contains))
      (common-lisp:list
       (common-lisp:cons "FilenameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-last-written))
      (common-lisp:list
       (common-lisp:cons "FileLastWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size))
      (common-lisp:list
       (common-lisp:cons "FileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dblog-files-response common-lisp:nil
                       ((describe-dblog-files :initarg :describe-dblog-files
                         :initform common-lisp:nil :type
                         (common-lisp:or describe-dblog-files-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dblog-files-response-describe-dblog-files
                         :shape "DescribeDBLogFilesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dblog-files-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dblog-files-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dblog-files-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dblog-files-response
                    'make-describe-dblog-files-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'describe-dblog-files))
      (common-lisp:list
       (common-lisp:cons "DescribeDBLogFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbparameter-groups-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameter-groups-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameter-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameter-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbparameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbparameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbparameter-groups-message
                    'make-describe-dbparameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbparameters-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform
                         (common-lisp:error
                          ":dbparameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameters-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameters-message-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameters-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbparameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbparameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbparameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbparameters-message
                    'make-describe-dbparameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxies-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbproxies-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxies-request-filters :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxies-request-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxies-request-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbproxies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxies-request
                    'make-describe-dbproxies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxies-response common-lisp:nil
                       ((dbproxies :initarg :dbproxies :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxies-response-dbproxies
                         :shape "DBProxyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxies-response-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbproxies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxies-response
                    'make-describe-dbproxies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxies))
      (common-lisp:list
       (common-lisp:cons "DBProxies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxy-endpoints-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-name common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-request-dbproxy-name
                         :shape "DBProxyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbproxy-endpoint-name :initarg :dbproxy-endpoint-name
                         :initform common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-request-dbproxy-endpoint-name
                         :shape "DBProxyEndpointName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-request-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-request-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxy-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbproxy-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-endpoints-request
                    'make-describe-dbproxy-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxy-endpoints-response common-lisp:nil
                       ((dbproxy-endpoints :initarg :dbproxy-endpoints
                         :initform common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-response-dbproxy-endpoints
                         :shape "DBProxyEndpointList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-endpoints-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxy-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbproxy-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-endpoints-response
                    'make-describe-dbproxy-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoints))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxy-target-groups-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbproxy-target-groups-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-name :initarg :target-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbproxy-target-groups-request-target-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-target-groups-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-target-groups-request-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-target-groups-request-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxy-target-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbproxy-target-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-target-groups-request
                    'make-describe-dbproxy-target-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxy-target-groups-response common-lisp:nil
                       ((target-groups :initarg :target-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-target-groups-response-target-groups
                         :shape "TargetGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-target-groups-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxy-target-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbproxy-target-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-target-groups-response
                    'make-describe-dbproxy-target-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxy-targets-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbproxy-targets-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-name :initarg :target-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbproxy-targets-request-target-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-targets-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-targets-request-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-targets-request-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxy-targets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbproxy-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-targets-request
                    'make-describe-dbproxy-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbproxy-targets-response common-lisp:nil
                       ((targets :initarg :targets :initform common-lisp:nil
                         :type (common-lisp:or target-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-targets-response-targets
                         :shape "TargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbproxy-targets-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbproxy-targets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbproxy-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-targets-response
                    'make-describe-dbproxy-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbrecommendations-message common-lisp:nil
                       ((last-updated-after :initarg :last-updated-after
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-dbrecommendations-message-last-updated-after
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-before :initarg :last-updated-before
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-dbrecommendations-message-last-updated-before
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbrecommendations-message-locale
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbrecommendations-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbrecommendations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbrecommendations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbrecommendations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbrecommendations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbrecommendations-message
                    'make-describe-dbrecommendations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbrecommendations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbrecommendations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-after))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-before))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbrecommendations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsecurity-groups-message common-lisp:nil
                       ((dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsecurity-groups-message-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsecurity-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsecurity-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsecurity-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbsecurity-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbsecurity-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbsecurity-groups-message
                    'make-describe-dbsecurity-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsecurity-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsecurity-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsecurity-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbshard-groups-message common-lisp:nil
                       ((dbshard-group-identifier :initarg
                         :dbshard-group-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or dbshard-group-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dbshard-groups-message-dbshard-group-identifier
                         :shape "DBShardGroupIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbshard-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbshard-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-dbshard-groups-message-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbshard-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbshard-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbshard-groups-message
                    'make-describe-dbshard-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbshard-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbshard-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-identifier))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbshard-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbshard-groups-response common-lisp:nil
                       ((dbshard-groups :initarg :dbshard-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or dbshard-groups-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbshard-groups-response-dbshard-groups
                         :shape "DBShardGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbshard-groups-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbshard-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbshard-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbshard-groups-response
                    'make-describe-dbshard-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbshard-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbshard-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbshard-groups))
      (common-lisp:list
       (common-lisp:cons "DBShardGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbshard-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsnapshot-attributes-message common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshot-attributes-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbsnapshot-attributes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbsnapshot-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshot-attributes-message
                    'make-describe-dbsnapshot-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsnapshot-attributes-result common-lisp:nil
                       ((dbsnapshot-attributes-result :initarg
                         :dbsnapshot-attributes-result :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot-attributes-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshot-attributes-result-dbsnapshot-attributes-result
                         :shape "DBSnapshotAttributesResult" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbsnapshot-attributes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbsnapshot-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshot-attributes-result
                    'make-describe-dbsnapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsnapshot-tenant-databases-message
                       common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshot-tenant-databases-message-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbsnapshot-tenant-databases-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbsnapshot-tenant-databases-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshot-tenant-databases-message
                    'make-describe-dbsnapshot-tenant-databases-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-tenant-databases-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-tenant-databases-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-tenant-databases-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsnapshots-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshots-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshots-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshots-message-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshots-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshots-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsnapshots-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-shared :initarg :include-shared :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshots-message-include-shared
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-public :initarg :include-public :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshots-message-include-public
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsnapshots-message-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbsnapshots-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbsnapshots-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshots-message
                    'make-describe-dbsnapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-public))
      (common-lisp:list
       (common-lisp:cons "IncludePublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsubnet-groups-message common-lisp:nil
                       ((dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-dbsubnet-groups-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsubnet-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsubnet-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-dbsubnet-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dbsubnet-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbsubnet-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dbsubnet-groups-message
                    'make-describe-dbsubnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-cluster-parameters-message
                       common-lisp:nil
                       ((dbparameter-group-family :initarg
                         :dbparameter-group-family :initform
                         (common-lisp:error
                          ":dbparameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-cluster-parameters-message-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-cluster-parameters-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-cluster-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-cluster-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-default-cluster-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-cluster-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-message
                    'make-describe-engine-default-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-cluster-parameters-result
                       common-lisp:nil
                       ((engine-defaults :initarg :engine-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-defaults common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-cluster-parameters-result-engine-defaults
                         :shape "EngineDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-default-cluster-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-cluster-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-result
                    'make-describe-engine-default-cluster-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-parameters-message
                       common-lisp:nil
                       ((dbparameter-group-family :initarg
                         :dbparameter-group-family :initform
                         (common-lisp:error
                          ":dbparameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-default-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-message
                    'make-describe-engine-default-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-parameters-result
                       common-lisp:nil
                       ((engine-defaults :initarg :engine-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-defaults common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-default-parameters-result-engine-defaults
                         :shape "EngineDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-default-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-result
                    'make-describe-engine-default-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-categories-message common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-event-categories-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-event-categories-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-categories-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-subscriptions-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-event-subscriptions-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-subscriptions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-message common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-events-message-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-source-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-events-message-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-end-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-duration :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-describe-events-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-events-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-tasks-message common-lisp:nil
                       ((export-task-identifier :initarg
                         :export-task-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-message-export-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-message-source-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-message-max-records
                         :shape "MaxRecords" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or export-source-type common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-message-source-type
                         :shape "ExportSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-tasks-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-tasks-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-message
                    'make-describe-export-tasks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-clusters-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-global-clusters-message-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-global-clusters-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-global-clusters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-global-clusters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-global-clusters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-global-clusters-message
                    'make-describe-global-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-integrations-message common-lisp:nil
                       ((integration-identifier :initarg
                         :integration-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or integration-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-integrations-message-integration-identifier
                         :shape "IntegrationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-integrations-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-integrations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-integrations-message-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-integrations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-integrations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-integrations-message
                    'make-describe-integrations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-integrations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-integrations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-identifier))
      (common-lisp:list
       (common-lisp:cons "IntegrationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-integrations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-integrations-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-integrations-response-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integrations :initarg :integrations :initform
                         common-lisp:nil :type
                         (common-lisp:or integration-list common-lisp:null)
                         :accessor
                         struct-shape-describe-integrations-response-integrations
                         :shape "IntegrationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-integrations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-integrations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-integrations-response
                    'make-describe-integrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-integrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-integrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integrations))
      (common-lisp:list
       (common-lisp:cons "Integrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-integrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-option-group-options-message common-lisp:nil
                       ((engine-name :initarg :engine-name :initform
                         (common-lisp:error ":engine-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-option-group-options-message-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-option-group-options-message-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-option-group-options-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-option-group-options-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-option-group-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-option-group-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-option-group-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-option-group-options-message
                    'make-describe-option-group-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-group-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-group-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-group-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-option-groups-message common-lisp:nil
                       ((option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-option-groups-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-option-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-option-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-option-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-option-groups-message-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-option-groups-message-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-option-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-option-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-option-groups-message
                    'make-describe-option-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-orderable-dbinstance-options-message
                       common-lisp:nil
                       ((engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-group :initarg
                         :availability-zone-group :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-availability-zone-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-vpc
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-dbinstance-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-orderable-dbinstance-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-orderable-dbinstance-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-dbinstance-options-message
                    'make-describe-orderable-dbinstance-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-group))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pending-maintenance-actions-message
                       common-lisp:nil
                       ((resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-pending-maintenance-actions-message-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pending-maintenance-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pending-maintenance-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pending-maintenance-actions-message
                    'make-describe-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-dbinstances-message common-lisp:nil
                       ((reserved-dbinstance-id :initarg
                         :reserved-dbinstance-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-reserved-dbinstance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-dbinstances-offering-id :initarg
                         :reserved-dbinstances-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-message-reserved-dbinstances-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-duration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-message-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-message-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lease-id :initarg :lease-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-lease-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-dbinstances-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-dbinstances-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-dbinstances-message
                    'make-describe-reserved-dbinstances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lease-id))
      (common-lisp:list
       (common-lisp:cons "LeaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-dbinstances-offerings-message
                       common-lisp:nil
                       ((reserved-dbinstances-offering-id :initarg
                         :reserved-dbinstances-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-reserved-dbinstances-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-duration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-dbinstances-offerings-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-dbinstances-offerings-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-dbinstances-offerings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-dbinstances-offerings-message
                    'make-describe-reserved-dbinstances-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-source-regions-message common-lisp:nil
                       ((region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-source-regions-message-region-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-source-regions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-source-regions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-source-regions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-source-regions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-source-regions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-source-regions-message
                    'make-describe-source-regions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-regions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-regions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-regions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tenant-databases-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-tenant-databases-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-tenant-databases-message-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-tenant-databases-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-tenant-databases-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-tenant-databases-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tenant-databases-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-tenant-databases-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tenant-databases-message
                    'make-describe-tenant-databases-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tenant-databases-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tenant-databases-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tenant-databases-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-valid-dbinstance-modifications-message
                       common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-valid-dbinstance-modifications-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-valid-dbinstance-modifications-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-valid-dbinstance-modifications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-valid-dbinstance-modifications-message
                    'make-describe-valid-dbinstance-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-valid-dbinstance-modifications-result
                       common-lisp:nil
                       ((valid-dbinstance-modifications-message :initarg
                         :valid-dbinstance-modifications-message :initform
                         common-lisp:nil :type
                         (common-lisp:or valid-dbinstance-modifications-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-valid-dbinstance-modifications-result-valid-dbinstance-modifications-message
                         :shape "ValidDBInstanceModificationsMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-valid-dbinstance-modifications-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-valid-dbinstance-modifications-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-valid-dbinstance-modifications-result
                    'make-describe-valid-dbinstance-modifications-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-dbinstance-modifications-message))
      (common-lisp:list
       (common-lisp:cons "ValidDBInstanceModificationsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disable-http-endpoint-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disable-http-endpoint-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-http-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-http-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-http-endpoint-request
                    'make-disable-http-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-http-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-http-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-http-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-http-endpoint-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disable-http-endpoint-response-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-endpoint-enabled :initarg :http-endpoint-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-disable-http-endpoint-response-http-endpoint-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-http-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-http-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-http-endpoint-response
                    'make-disable-http-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-http-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-http-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "HttpEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-http-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass doc-link common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-link-text :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-link-url :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-doc-link
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'doc-link
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'doc-link 'make-doc-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input doc-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input doc-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input doc-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype doc-link-list () '(trivial-types:proper-list doc-link))
 (common-lisp:defun make-doc-link-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list doc-link))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-membership common-lisp:nil
                       ((domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-domain-membership-domain :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-domain-membership-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fqdn :initarg :fqdn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-membership-fqdn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iamrole-name :initarg :iamrole-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-membership-iamrole-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ou :initarg :ou :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-membership-ou :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-secret-arn :initarg :auth-secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-domain-membership-auth-secret-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-ips :initarg :dns-ips :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-domain-membership-dns-ips
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-membership 'make-domain-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "FQDN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamrole-name))
      (common-lisp:list
       (common-lisp:cons "IAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ou))
      (common-lisp:list
       (common-lisp:cons "OU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-secret-arn))
      (common-lisp:list
       (common-lisp:cons "AuthSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ips))
      (common-lisp:list
       (common-lisp:cons "DnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-membership-list ()
   '(trivial-types:proper-list domain-membership))
 (common-lisp:defun make-domain-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition domain-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'domain-not-found-fault)))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double-optional () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass double-range common-lisp:nil
                       ((from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-double-range-from :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to :initarg :to :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-double-range-to :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-double-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'double-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'double-range 'make-double-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input double-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input double-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input double-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype double-range-list ()
   '(trivial-types:proper-list double-range))
 (common-lisp:defun make-double-range-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass download-dblog-file-portion-details common-lisp:nil
                       ((log-file-data :initarg :log-file-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-download-dblog-file-portion-details-log-file-data
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-download-dblog-file-portion-details-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-data-pending :initarg
                         :additional-data-pending :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-download-dblog-file-portion-details-additional-data-pending
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-download-dblog-file-portion-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'download-dblog-file-portion-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'download-dblog-file-portion-details
                    'make-download-dblog-file-portion-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-data))
      (common-lisp:list
       (common-lisp:cons "LogFileData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-data-pending))
      (common-lisp:list
       (common-lisp:cons "AdditionalDataPending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass download-dblog-file-portion-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-download-dblog-file-portion-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-file-name :initarg :log-file-name :initform
                         (common-lisp:error ":log-file-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-download-dblog-file-portion-message-log-file-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-download-dblog-file-portion-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-lines :initarg :number-of-lines :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-download-dblog-file-portion-message-number-of-lines
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-download-dblog-file-portion-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'download-dblog-file-portion-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'download-dblog-file-portion-message
                    'make-download-dblog-file-portion-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-name))
      (common-lisp:list
       (common-lisp:cons "LogFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-lines))
      (common-lisp:list
       (common-lisp:cons "NumberOfLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2security-group common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ec2security-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2security-group-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-id :initarg :ec2security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2security-group-ec2security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2security-group-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2security-group 'make-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2security-group-list ()
   '(trivial-types:proper-list ec2security-group))
 (common-lisp:defun make-ec2security-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ec2image-properties-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'ec2image-properties-not-supported-fault)))
(common-lisp:progn
 (common-lisp:defclass enable-http-endpoint-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-enable-http-endpoint-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-http-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-http-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-http-endpoint-request
                    'make-enable-http-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-http-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-http-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-http-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-http-endpoint-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-enable-http-endpoint-response-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-endpoint-enabled :initarg :http-endpoint-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-enable-http-endpoint-response-http-endpoint-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-http-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-http-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-http-endpoint-response
                    'make-enable-http-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-http-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-http-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "HttpEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-http-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype encryption-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-encryption-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-endpoint-port :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hosted-zone-id :initarg :hosted-zone-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-hosted-zone-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-defaults common-lisp:nil
                       ((dbparameter-group-family :initarg
                         :dbparameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-engine-defaults-dbparameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-engine-defaults-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor struct-shape-engine-defaults-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-defaults
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'engine-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'engine-defaults 'make-engine-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-defaults))
   common-lisp:nil))
(common-lisp:deftype engine-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype engine-mode-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-engine-mode-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-event-source-type :shape
                         "SourceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor struct-shape-event-event-categories :shape
                         "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-event-date :shape "TStamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-event-categories-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-categories-map common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-categories-map-source-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-categories-map-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-categories-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-categories-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-categories-map 'make-event-categories-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-categories-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-map-list ()
   '(trivial-types:proper-list event-categories-map))
 (common-lisp:defun make-event-categories-map-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-categories-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-categories-message common-lisp:nil
                       ((event-categories-map-list :initarg
                         :event-categories-map-list :initform common-lisp:nil
                         :type
                         (common-lisp:or event-categories-map-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-categories-message-event-categories-map-list
                         :shape "EventCategoriesMapList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-categories-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-categories-message 'make-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-map-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesMapList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscription common-lisp:nil
                       ((customer-aws-id :initarg :customer-aws-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-customer-aws-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cust-subscription-id :initarg :cust-subscription-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-cust-subscription-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-sns-topic-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-subscription-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-creation-time :initarg
                         :subscription-creation-time :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-subscription-creation-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-source-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-ids-list :initarg :source-ids-list :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-source-ids-list :shape
                         "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories-list :initarg :event-categories-list
                         :initform common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-event-categories-list
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-event-subscription-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-subscription-arn :initarg
                         :event-subscription-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-event-subscription-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-subscription
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-subscription-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-subscription-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun make-event-subscriptions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscriptions-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-subscriptions-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-subscriptions-list :initarg
                         :event-subscriptions-list :initform common-lisp:nil
                         :type
                         (common-lisp:or event-subscriptions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-subscriptions-message-event-subscriptions-list
                         :shape "EventSubscriptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-subscriptions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-subscriptions-message
                    'make-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass events-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-events-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor struct-shape-events-message-events :shape
                         "EventList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:deftype export-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-task common-lisp:nil
                       ((export-task-identifier :initarg
                         :export-task-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-export-task-export-task-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-task-source-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (export-only :initarg :export-only :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-export-task-export-only :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-time :initarg :snapshot-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-export-task-snapshot-time :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-start-time :initarg :task-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-export-task-task-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-end-time :initarg :task-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-export-task-task-end-time :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-export-task-s3bucket :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3prefix :initarg :s3prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-export-task-s3prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-task-iam-role-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-task-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-export-task-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (percent-progress :initarg :percent-progress :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-export-task-percent-progress :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-extracted-data-in-gb :initarg
                         :total-extracted-data-in-gb :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-export-task-total-extracted-data-in-gb
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-cause :initarg :failure-cause :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-task-failure-cause :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (warning-message :initarg :warning-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-task-warning-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or export-source-type common-lisp:null)
                         :accessor struct-shape-export-task-source-type :shape
                         "ExportSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-task 'make-export-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-only))
      (common-lisp:list
       (common-lisp:cons "ExportOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "TaskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-end-time))
      (common-lisp:list
       (common-lisp:cons "TaskEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-extracted-data-in-gb))
      (common-lisp:list
       (common-lisp:cons "TotalExtractedDataInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "FailureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-message))
      (common-lisp:list
       (common-lisp:cons "WarningMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition export-task-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'export-task-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition export-task-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'export-task-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype export-tasks-list ()
   '(trivial-types:proper-list export-task))
 (common-lisp:defun make-export-tasks-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-tasks-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-export-tasks-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-tasks :initarg :export-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or export-tasks-list common-lisp:null)
                         :accessor
                         struct-shape-export-tasks-message-export-tasks :shape
                         "ExportTasksList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-tasks-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-tasks-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-tasks-message 'make-export-tasks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-tasks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-tasks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-tasks))
      (common-lisp:list
       (common-lisp:cons "ExportTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-tasks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-failover-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbinstance-identifier :initarg
                         :target-dbinstance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failover-dbcluster-message-target-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failover-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-message
                    'make-failover-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-failover-dbcluster-result-dbcluster
                         :shape "DBCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failover-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-result
                    'make-failover-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required")
                         :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-failover-global-cluster-message-global-cluster-identifier
                         :shape "GlobalClusterIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-db-cluster-identifier :initarg
                         :target-db-cluster-identifier :initform
                         (common-lisp:error
                          ":target-db-cluster-identifier is required")
                         :type
                         (common-lisp:or dbcluster-identifier common-lisp:null)
                         :accessor
                         struct-shape-failover-global-cluster-message-target-db-cluster-identifier
                         :shape "DBClusterIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-data-loss :initarg :allow-data-loss :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-failover-global-cluster-message-allow-data-loss
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (switchover :initarg :switchover :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-failover-global-cluster-message-switchover
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-global-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failover-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-global-cluster-message
                    'make-failover-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-data-loss))
      (common-lisp:list
       (common-lisp:cons "AllowDataLoss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'switchover))
      (common-lisp:list
       (common-lisp:cons "Switchover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         struct-shape-failover-global-cluster-result-global-cluster
                         :shape "GlobalCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-global-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failover-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-global-cluster-result
                    'make-failover-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-state common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or failover-status common-lisp:null)
                         :accessor struct-shape-failover-state-status :shape
                         "FailoverStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-db-cluster-arn :initarg :from-db-cluster-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failover-state-from-db-cluster-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (to-db-cluster-arn :initarg :to-db-cluster-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failover-state-to-db-cluster-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-data-loss-allowed :initarg :is-data-loss-allowed
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-failover-state-is-data-loss-allowed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failover-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failover-state 'make-failover-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-db-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "FromDbClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-db-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ToDbClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-data-loss-allowed))
      (common-lisp:list
       (common-lisp:cons "IsDataLossAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-state))
   common-lisp:nil))
(common-lisp:deftype failover-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-feature-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-cluster common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-cluster-resource-id :initarg
                         :global-cluster-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-global-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-cluster-arn :initarg :global-cluster-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-cluster-global-cluster-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-global-cluster-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-global-cluster-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-cluster-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-cluster-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-storage-encrypted :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-deletion-protection :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-cluster-members :initarg
                         :global-cluster-members :initform common-lisp:nil
                         :type
                         (common-lisp:or global-cluster-member-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-global-cluster-members
                         :shape "GlobalClusterMemberList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failover-state :initarg :failover-state :initform
                         common-lisp:nil :type
                         (common-lisp:or failover-state common-lisp:null)
                         :accessor struct-shape-global-cluster-failover-state
                         :shape "FailoverState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'global-cluster 'make-global-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-members))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-state))
      (common-lisp:list
       (common-lisp:cons "FailoverState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-already-exists-fault)))
(common-lisp:deftype global-cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype global-cluster-list ()
   '(trivial-types:proper-list global-cluster))
 (common-lisp:defun make-global-cluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-cluster-member common-lisp:nil
                       ((dbcluster-arn :initarg :dbcluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-global-cluster-member-dbcluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (readers :initarg :readers :initform common-lisp:nil
                         :type
                         (common-lisp:or readers-arn-list common-lisp:null)
                         :accessor struct-shape-global-cluster-member-readers
                         :shape "ReadersArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-writer :initarg :is-writer :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-global-cluster-member-is-writer :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (global-write-forwarding-status :initarg
                         :global-write-forwarding-status :initform
                         common-lisp:nil :type
                         (common-lisp:or write-forwarding-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-member-global-write-forwarding-status
                         :shape "WriteForwardingStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (synchronization-status :initarg
                         :synchronization-status :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          global-cluster-member-synchronization-status
                          common-lisp:null)
                         :accessor
                         struct-shape-global-cluster-member-synchronization-status
                         :shape "GlobalClusterMemberSynchronizationStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-cluster-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-cluster-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-cluster-member 'make-global-cluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readers))
      (common-lisp:list
       (common-lisp:cons "Readers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-writer))
      (common-lisp:list
       (common-lisp:cons "IsWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-write-forwarding-status))
      (common-lisp:list
       (common-lisp:cons "GlobalWriteForwardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'synchronization-status))
      (common-lisp:list
       (common-lisp:cons "SynchronizationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-cluster-member-list ()
   '(trivial-types:proper-list global-cluster-member))
 (common-lisp:defun make-global-cluster-member-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype global-cluster-member-synchronization-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition global-cluster-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass global-clusters-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-global-clusters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-clusters :initarg :global-clusters :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster-list common-lisp:null)
                         :accessor
                         struct-shape-global-clusters-message-global-clusters
                         :shape "GlobalClusterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-clusters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-clusters-message 'make-global-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-clusters))
      (common-lisp:list
       (common-lisp:cons "GlobalClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   common-lisp:nil))
(common-lisp:deftype iamauth-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iprange common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-iprange-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cidrip :initarg :cidrip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-iprange-cidrip :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iprange
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iprange
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iprange 'make-iprange))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iprange))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iprange-list () '(trivial-types:proper-list iprange))
 (common-lisp:defun make-iprange-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list iprange))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition iam-role-missing-permissions-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-role-missing-permissions-fault)))
(common-lisp:progn
 (common-lisp:define-condition iam-role-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition instance-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-available-ips-in-subnet-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-available-ips-in-subnet-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbcluster-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-dbcluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbinstance-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-dbinstance-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-storage-cluster-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-storage-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass integration common-lisp:nil
                       ((source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or source-arn common-lisp:null) :accessor
                         struct-shape-integration-source-arn :shape "SourceArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-integration-target-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (integration-name :initarg :integration-name :initform
                         common-lisp:nil :type
                         (common-lisp:or integration-name common-lisp:null)
                         :accessor struct-shape-integration-integration-name
                         :shape "IntegrationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integration-arn :initarg :integration-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or integration-arn common-lisp:null)
                         :accessor struct-shape-integration-integration-arn
                         :shape "IntegrationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-integration-kmskey-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-encryption-context :initarg
                         :additional-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-integration-additional-encryption-context
                         :shape "EncryptionContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or integration-status common-lisp:null)
                         :accessor struct-shape-integration-status :shape
                         "IntegrationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-integration-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-integration-create-time :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or integration-error-list
                                         common-lisp:null)
                         :accessor struct-shape-integration-errors :shape
                         "IntegrationErrorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-integration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'integration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'integration 'make-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-name))
      (common-lisp:list
       (common-lisp:cons "IntegrationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition integration-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'integration-already-exists-fault)))
(common-lisp:deftype integration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition integration-conflict-operation-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'integration-conflict-operation-fault)))
(common-lisp:progn
 (common-lisp:defclass integration-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":error-code is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-integration-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-integration-error-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-integration-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'integration-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'integration-error 'make-integration-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integration-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integration-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integration-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integration-error-list ()
   '(trivial-types:proper-list integration-error))
 (common-lisp:defun make-integration-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integration-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integration-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype integration-list ()
   '(trivial-types:proper-list integration))
 (common-lisp:defun make-integration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition integration-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'integration-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition integration-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'integration-quota-exceeded-fault)))
(common-lisp:deftype integration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-blue-green-deployment-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-blue-green-deployment-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-custom-dbengine-version-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-custom-dbengine-version-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-automated-backup-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-automated-backup-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbcluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-endpoint-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-endpoint-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-snapshot-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbcluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbinstance-automated-backup-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbinstance-automated-backup-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbinstance-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbinstance-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbparameter-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbparameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbproxy-endpoint-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbproxy-endpoint-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbproxy-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbproxy-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsecurity-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsecurity-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbshard-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbshard-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsnapshot-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsnapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-group-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-group-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-subscription-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-event-subscription-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-only-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-export-only-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-source-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-export-source-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-task-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-export-task-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-global-cluster-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-global-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-integration-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-integration-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-max-acu-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-max-acu-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-option-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-option-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-resource-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-restore-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-restore-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3bucket-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:defclass issue-details common-lisp:nil
                       ((performance-issue-details :initarg
                         :performance-issue-details :initform common-lisp:nil
                         :type
                         (common-lisp:or performance-issue-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-issue-details-performance-issue-details
                         :shape "PerformanceIssueDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-issue-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'issue-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'issue-details 'make-issue-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issue-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issue-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-issue-details))
      (common-lisp:list
       (common-lisp:cons "PerformanceIssueDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issue-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition kmskey-not-accessible-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kmskey-not-accessible-fault)))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass limitless-database common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or limitless-database-status
                                         common-lisp:null)
                         :accessor struct-shape-limitless-database-status
                         :shape "LimitlessDatabaseStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (min-required-acu :initarg :min-required-acu :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-limitless-database-min-required-acu
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limitless-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limitless-database
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'limitless-database 'make-limitless-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limitless-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limitless-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-required-acu))
      (common-lisp:list
       (common-lisp:cons "MinRequiredACU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limitless-database))
   common-lisp:nil))
(common-lisp:deftype limitless-database-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:deftype local-write-forwarding-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-log-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass master-user-secret common-lisp:nil
                       ((secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-master-user-secret-secret-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-status :initarg :secret-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-master-user-secret-secret-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-master-user-secret-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-master-user-secret
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'master-user-secret
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'master-user-secret 'make-master-user-secret))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input master-user-secret))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input master-user-secret))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-status))
      (common-lisp:list
       (common-lisp:cons "SecretStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input master-user-secret))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition max-dbshard-group-limit-reached
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'max-dbshard-group-limit-reached)))
(common-lisp:deftype max-records () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metric common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (references :initarg :references :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-reference-list
                                         common-lisp:null)
                         :accessor struct-shape-metric-references :shape
                         "MetricReferenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics-details :initarg :statistics-details
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-statistics-details :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric-query :initarg :metric-query :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-query common-lisp:null)
                         :accessor struct-shape-metric-metric-query :shape
                         "MetricQuery" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'references))
      (common-lisp:list
       (common-lisp:cons "References"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-details))
      (common-lisp:list
       (common-lisp:cons "StatisticsDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-query))
      (common-lisp:list
       (common-lisp:cons "MetricQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-list () '(trivial-types:proper-list metric))
 (common-lisp:defun make-metric-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-query common-lisp:nil
                       ((performance-insights-metric-query :initarg
                         :performance-insights-metric-query :initform
                         common-lisp:nil :type
                         (common-lisp:or performance-insights-metric-query
                                         common-lisp:null)
                         :accessor
                         struct-shape-metric-query-performance-insights-metric-query
                         :shape "PerformanceInsightsMetricQuery" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-query 'make-metric-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-metric-query))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsMetricQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-reference common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-reference-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reference-details :initarg :reference-details
                         :initform common-lisp:nil :type
                         (common-lisp:or reference-details common-lisp:null)
                         :accessor
                         struct-shape-metric-reference-reference-details :shape
                         "ReferenceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-reference 'make-metric-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-details))
      (common-lisp:list
       (common-lisp:cons "ReferenceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-reference-list ()
   '(trivial-types:proper-list metric-reference))
 (common-lisp:defun make-metric-reference-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass minimum-engine-version-per-allowed-value common-lisp:nil
                       ((allowed-value :initarg :allowed-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-minimum-engine-version-per-allowed-value-allowed-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-minimum-engine-version-per-allowed-value-minimum-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-minimum-engine-version-per-allowed-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'minimum-engine-version-per-allowed-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'minimum-engine-version-per-allowed-value
                    'make-minimum-engine-version-per-allowed-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          minimum-engine-version-per-allowed-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          minimum-engine-version-per-allowed-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-value))
      (common-lisp:list
       (common-lisp:cons "AllowedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          minimum-engine-version-per-allowed-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype minimum-engine-version-per-allowed-value-list ()
   '(trivial-types:proper-list minimum-engine-version-per-allowed-value))
 (common-lisp:defun make-minimum-engine-version-per-allowed-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            minimum-engine-version-per-allowed-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass modify-activity-stream-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-activity-stream-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-policy-state :initarg :audit-policy-state
                         :initform common-lisp:nil :type
                         (common-lisp:or audit-policy-state common-lisp:null)
                         :accessor
                         struct-shape-modify-activity-stream-request-audit-policy-state
                         :shape "AuditPolicyState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-activity-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-activity-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-activity-stream-request
                    'make-modify-activity-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-policy-state))
      (common-lisp:list
       (common-lisp:cons "AuditPolicyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-activity-stream-response common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-activity-stream-response-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-stream-name :initarg :kinesis-stream-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-activity-stream-response-kinesis-stream-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or activity-stream-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-activity-stream-response-status
                         :shape "ActivityStreamStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or activity-stream-mode common-lisp:null)
                         :accessor
                         struct-shape-modify-activity-stream-response-mode
                         :shape "ActivityStreamMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-native-audit-fields-included :initarg
                         :engine-native-audit-fields-included :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-activity-stream-response-engine-native-audit-fields-included
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-status :initarg :policy-status :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-stream-policy-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-activity-stream-response-policy-status
                         :shape "ActivityStreamPolicyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-activity-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-activity-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-activity-stream-response
                    'make-modify-activity-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "EngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-certificates-message common-lisp:nil
                       ((certificate-identifier :initarg
                         :certificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-certificates-message-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-customer-override :initarg
                         :remove-customer-override :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-certificates-message-remove-customer-override
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-certificates-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-certificates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-certificates-message
                    'make-modify-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-customer-override))
      (common-lisp:list
       (common-lisp:cons "RemoveCustomerOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-certificates-result common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor
                         struct-shape-modify-certificates-result-certificate
                         :shape "Certificate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-certificates-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-certificates-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-certificates-result
                    'make-modify-certificates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-current-dbcluster-capacity-message
                       common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-current-dbcluster-capacity-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity :initarg :capacity :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-current-dbcluster-capacity-message-capacity
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-before-timeout :initarg
                         :seconds-before-timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-current-dbcluster-capacity-message-seconds-before-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-action :initarg :timeout-action :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-current-dbcluster-capacity-message-timeout-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-current-dbcluster-capacity-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-current-dbcluster-capacity-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-current-dbcluster-capacity-message
                    'make-modify-current-dbcluster-capacity-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-current-dbcluster-capacity-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-current-dbcluster-capacity-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-current-dbcluster-capacity-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-custom-dbengine-version-message common-lisp:nil
                       ((engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or custom-engine-name common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-dbengine-version-message-engine
                         :shape "CustomEngineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         (common-lisp:error ":engine-version is required")
                         :type
                         (common-lisp:or custom-engine-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-dbengine-version-message-engine-version
                         :shape "CustomEngineVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-dbengine-version-message-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-engine-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-dbengine-version-message-status
                         :shape "CustomEngineVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-custom-dbengine-version-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-custom-dbengine-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-custom-dbengine-version-message
                    'make-modify-custom-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-endpoint-message common-lisp:nil
                       ((dbcluster-endpoint-identifier :initarg
                         :dbcluster-endpoint-identifier :initform
                         (common-lisp:error
                          ":dbcluster-endpoint-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-endpoint-message-dbcluster-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-endpoint-message-endpoint-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (static-members :initarg :static-members :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-endpoint-message-static-members
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (excluded-members :initarg :excluded-members :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-endpoint-message-excluded-members
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbcluster-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-endpoint-message
                    'make-modify-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-dbcluster-identifier :initarg
                         :new-dbcluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-new-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-modify-dbcluster-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-window :initarg :backtrack-window :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-backtrack-window
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloudwatch-logs-export-configuration :initarg
                         :cloudwatch-logs-export-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloudwatch-logs-export-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-cloudwatch-logs-export-configuration
                         :shape "CloudwatchLogsExportConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-major-version-upgrade :initarg
                         :allow-major-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-allow-major-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-parameter-group-name :initarg
                         :dbinstance-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-dbinstance-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-modify-dbcluster-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-configuration :initarg :scaling-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-scaling-configuration
                         :shape "ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-http-endpoint :initarg :enable-http-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-enable-http-endpoint
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-global-write-forwarding :initarg
                         :enable-global-write-forwarding :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-enable-global-write-forwarding
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-instance-class :initarg
                         :dbcluster-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-dbcluster-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-modify-dbcluster-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-monitoring-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-enable-performance-insights
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-v2scaling-configuration :initarg
                         :serverless-v2scaling-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-v2scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-serverless-v2scaling-configuration
                         :shape "ServerlessV2ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-user-password :initarg
                         :manage-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-manage-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rotate-master-user-password :initarg
                         :rotate-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-rotate-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-secret-kms-key-id :initarg
                         :master-user-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-master-user-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-message-engine-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-engine-mode-change :initarg
                         :allow-engine-mode-change :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-allow-engine-mode-change
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-local-write-forwarding :initarg
                         :enable-local-write-forwarding :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-enable-local-write-forwarding
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-backup-recovery-point-arn :initarg
                         :aws-backup-recovery-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-backup-recovery-point-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-aws-backup-recovery-point-arn
                         :shape "AwsBackupRecoveryPointArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-limitless-database :initarg
                         :enable-limitless-database :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-enable-limitless-database
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-message-cacertificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-message 'make-modify-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBInstanceParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-http-endpoint))
      (common-lisp:list
       (common-lisp:cons "EnableHttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-global-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "EnableGlobalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotate-master-user-password))
      (common-lisp:list
       (common-lisp:cons "RotateMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-engine-mode-change))
      (common-lisp:list
       (common-lisp:cons "AllowEngineModeChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-local-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "EnableLocalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-limitless-database))
      (common-lisp:list
       (common-lisp:cons "EnableLimitlessDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-parameter-group-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-parameter-group-message-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbcluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-parameter-group-message
                    'make-modify-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-modify-dbcluster-result-dbcluster :shape
                         "DBCluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-result 'make-modify-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-snapshot-attribute-message
                       common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-snapshot-attribute-message-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-snapshot-attribute-message-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values-to-add :initarg :values-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-snapshot-attribute-message-values-to-add
                         :shape "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values-to-remove :initarg :values-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-snapshot-attribute-message-values-to-remove
                         :shape "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbcluster-snapshot-attribute-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-snapshot-attribute-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-message
                    'make-modify-dbcluster-snapshot-attribute-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-add))
      (common-lisp:list
       (common-lisp:cons "ValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-remove))
      (common-lisp:list
       (common-lisp:cons "ValuesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-snapshot-attribute-result
                       common-lisp:nil
                       ((dbcluster-snapshot-attributes-result :initarg
                         :dbcluster-snapshot-attributes-result :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster-snapshot-attributes-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbcluster-snapshot-attribute-result-dbcluster-snapshot-attributes-result
                         :shape "DBClusterSnapshotAttributesResult" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbcluster-snapshot-attribute-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-snapshot-attribute-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-result
                    'make-modify-dbcluster-snapshot-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-groups :initarg :dbsecurity-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbsecurity-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-dbsecurity-groups
                         :shape "DBSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-multi-az :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-major-version-upgrade :initarg
                         :allow-major-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-allow-major-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-modify-dbinstance-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-dbinstance-identifier :initarg
                         :new-dbinstance-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-new-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-tde-credential-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-password :initarg
                         :tde-credential-password :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-tde-credential-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-cacertificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-domain :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-fqdn :initarg :domain-fqdn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-domain-fqdn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-ou :initarg :domain-ou :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-domain-ou
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-auth-secret-arn :initarg
                         :domain-auth-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-domain-auth-secret-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-dns-ips :initarg :domain-dns-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-domain-dns-ips
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbport-number :initarg :dbport-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-dbport-number
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-monitoring-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-domain :initarg :disable-domain :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-disable-domain
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-promotion-tier
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-enable-performance-insights
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloudwatch-logs-export-configuration :initarg
                         :cloudwatch-logs-export-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloudwatch-logs-export-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-cloudwatch-logs-export-configuration
                         :shape "CloudwatchLogsExportConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-default-processor-features :initarg
                         :use-default-processor-features :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-use-default-processor-features
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-max-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-rotation-restart :initarg
                         :certificate-rotation-restart :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-certificate-rotation-restart
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-mode :initarg :replica-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-mode common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-replica-mode
                         :shape "ReplicaMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-customer-owned-ip :initarg
                         :enable-customer-owned-ip :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-enable-customer-owned-ip
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-backup-recovery-point-arn :initarg
                         :aws-backup-recovery-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-backup-recovery-point-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-aws-backup-recovery-point-arn
                         :shape "AwsBackupRecoveryPointArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (automation-mode :initarg :automation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or automation-mode common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-automation-mode
                         :shape "AutomationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resume-full-automation-mode-minutes :initarg
                         :resume-full-automation-mode-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-resume-full-automation-mode-minutes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-user-password :initarg
                         :manage-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-manage-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rotate-master-user-password :initarg
                         :rotate-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-rotate-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-secret-kms-key-id :initarg
                         :master-user-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-message-master-user-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-tenant :initarg :multi-tenant :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbinstance-message-multi-tenant
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-message
                    'make-modify-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-fqdn))
      (common-lisp:list
       (common-lisp:cons "DomainFqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-ou))
      (common-lisp:list
       (common-lisp:cons "DomainOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-auth-secret-arn))
      (common-lisp:list
       (common-lisp:cons "DomainAuthSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-dns-ips))
      (common-lisp:list
       (common-lisp:cons "DomainDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbport-number))
      (common-lisp:list
       (common-lisp:cons "DBPortNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-domain))
      (common-lisp:list
       (common-lisp:cons "DisableDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-rotation-restart))
      (common-lisp:list
       (common-lisp:cons "CertificateRotationRestart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-mode))
      (common-lisp:list
       (common-lisp:cons "AutomationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resume-full-automation-mode-minutes))
      (common-lisp:list
       (common-lisp:cons "ResumeFullAutomationModeMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotate-master-user-password))
      (common-lisp:list
       (common-lisp:cons "RotateMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-tenant))
      (common-lisp:list
       (common-lisp:cons "MultiTenant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-modify-dbinstance-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbinstance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-result 'make-modify-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbparameter-group-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform
                         (common-lisp:error
                          ":dbparameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbparameter-group-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbparameter-group-message-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbparameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbparameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbparameter-group-message
                    'make-modify-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbproxy-endpoint-request common-lisp:nil
                       ((dbproxy-endpoint-name :initarg :dbproxy-endpoint-name
                         :initform
                         (common-lisp:error
                          ":dbproxy-endpoint-name is required")
                         :type
                         (common-lisp:or dbproxy-endpoint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-endpoint-request-dbproxy-endpoint-name
                         :shape "DBProxyEndpointName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-dbproxy-endpoint-name :initarg
                         :new-dbproxy-endpoint-name :initform common-lisp:nil
                         :type
                         (common-lisp:or dbproxy-endpoint-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-endpoint-request-new-dbproxy-endpoint-name
                         :shape "DBProxyEndpointName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-endpoint-request-vpc-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbproxy-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbproxy-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-endpoint-request
                    'make-modify-dbproxy-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "NewDBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbproxy-endpoint-response common-lisp:nil
                       ((dbproxy-endpoint :initarg :dbproxy-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or dbproxy-endpoint common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-endpoint-response-dbproxy-endpoint
                         :shape "DBProxyEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbproxy-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbproxy-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-endpoint-response
                    'make-modify-dbproxy-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbproxy-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbproxy-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-dbproxy-name :initarg :new-dbproxy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbproxy-request-new-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth :initarg :auth :initform common-lisp:nil :type
                         (common-lisp:or user-auth-config-list
                                         common-lisp:null)
                         :accessor struct-shape-modify-dbproxy-request-auth
                         :shape "UserAuthConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-tls :initarg :require-tls :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-request-require-tls :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-client-timeout :initarg :idle-client-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-request-idle-client-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (debug-logging :initarg :debug-logging :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-request-debug-logging
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-modify-dbproxy-request-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-request-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbproxy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbproxy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-request 'make-modify-dbproxy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "NewDBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-tls))
      (common-lisp:list
       (common-lisp:cons "RequireTLS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-client-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleClientTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-logging))
      (common-lisp:list
       (common-lisp:cons "DebugLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbproxy-response common-lisp:nil
                       ((dbproxy :initarg :dbproxy :initform common-lisp:nil
                         :type (common-lisp:or dbproxy common-lisp:null)
                         :accessor struct-shape-modify-dbproxy-response-dbproxy
                         :shape "DBProxy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbproxy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbproxy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-response 'make-modify-dbproxy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy))
      (common-lisp:list
       (common-lisp:cons "DBProxy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbproxy-target-group-request common-lisp:nil
                       ((target-group-name :initarg :target-group-name
                         :initform
                         (common-lisp:error ":target-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-target-group-request-target-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbproxy-target-group-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-pool-config :initarg
                         :connection-pool-config :initform common-lisp:nil
                         :type
                         (common-lisp:or connection-pool-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-target-group-request-connection-pool-config
                         :shape "ConnectionPoolConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-name :initarg :new-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-target-group-request-new-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbproxy-target-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbproxy-target-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-target-group-request
                    'make-modify-dbproxy-target-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-pool-config))
      (common-lisp:list
       (common-lisp:cons "ConnectionPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-name))
      (common-lisp:list
       (common-lisp:cons "NewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbproxy-target-group-response common-lisp:nil
                       ((dbproxy-target-group :initarg :dbproxy-target-group
                         :initform common-lisp:nil :type
                         (common-lisp:or dbproxy-target-group common-lisp:null)
                         :accessor
                         struct-shape-modify-dbproxy-target-group-response-dbproxy-target-group
                         :shape "DBProxyTargetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbproxy-target-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbproxy-target-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-target-group-response
                    'make-modify-dbproxy-target-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-target-group))
      (common-lisp:list
       (common-lisp:cons "DBProxyTargetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbrecommendation-message common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform
                         (common-lisp:error ":recommendation-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbrecommendation-message-recommendation-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbrecommendation-message-locale
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbrecommendation-message-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-action-updates :initarg
                         :recommended-action-updates :initform common-lisp:nil
                         :type
                         (common-lisp:or recommended-action-update-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbrecommendation-message-recommended-action-updates
                         :shape "RecommendedActionUpdateList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbrecommendation-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbrecommendation-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbrecommendation-message
                    'make-modify-dbrecommendation-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbrecommendation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbrecommendation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-action-updates))
      (common-lisp:list
       (common-lisp:cons "RecommendedActionUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbrecommendation-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbshard-group-message common-lisp:nil
                       ((dbshard-group-identifier :initarg
                         :dbshard-group-identifier :initform
                         (common-lisp:error
                          ":dbshard-group-identifier is required")
                         :type
                         (common-lisp:or dbshard-group-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbshard-group-message-dbshard-group-identifier
                         :shape "DBShardGroupIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-acu :initarg :max-acu :initform common-lisp:nil
                         :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-dbshard-group-message-max-acu
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbshard-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbshard-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbshard-group-message
                    'make-modify-dbshard-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbshard-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbshard-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-identifier))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-acu))
      (common-lisp:list
       (common-lisp:cons "MaxACU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbshard-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsnapshot-attribute-message common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsnapshot-attribute-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsnapshot-attribute-message-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values-to-add :initarg :values-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsnapshot-attribute-message-values-to-add
                         :shape "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values-to-remove :initarg :values-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsnapshot-attribute-message-values-to-remove
                         :shape "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbsnapshot-attribute-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbsnapshot-attribute-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-attribute-message
                    'make-modify-dbsnapshot-attribute-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-add))
      (common-lisp:list
       (common-lisp:cons "ValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-remove))
      (common-lisp:list
       (common-lisp:cons "ValuesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsnapshot-attribute-result common-lisp:nil
                       ((dbsnapshot-attributes-result :initarg
                         :dbsnapshot-attributes-result :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot-attributes-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsnapshot-attribute-result-dbsnapshot-attributes-result
                         :shape "DBSnapshotAttributesResult" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbsnapshot-attribute-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbsnapshot-attribute-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-attribute-result
                    'make-modify-dbsnapshot-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsnapshot-message common-lisp:nil
                       ((dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbsnapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsnapshot-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbsnapshot-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-dbsnapshot-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbsnapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbsnapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-message
                    'make-modify-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsnapshot-result common-lisp:nil
                       ((dbsnapshot :initarg :dbsnapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsnapshot common-lisp:null) :accessor
                         struct-shape-modify-dbsnapshot-result-dbsnapshot
                         :shape "DBSnapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbsnapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbsnapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-result 'make-modify-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsubnet-group-message common-lisp:nil
                       ((dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform
                         (common-lisp:error ":dbsubnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsubnet-group-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-description :initarg
                         :dbsubnet-group-description :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsubnet-group-message-dbsubnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsubnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbsubnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-message
                    'make-modify-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsubnet-group-result common-lisp:nil
                       ((dbsubnet-group :initarg :dbsubnet-group :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsubnet-group common-lisp:null)
                         :accessor
                         struct-shape-modify-dbsubnet-group-result-dbsubnet-group
                         :shape "DBSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-dbsubnet-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbsubnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-result
                    'make-modify-dbsubnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-event-subscription-message-sns-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-event-subscription-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-event-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-result
                    'make-modify-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-global-cluster-message-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-global-cluster-identifier :initarg
                         :new-global-cluster-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-global-cluster-message-new-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-global-cluster-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-global-cluster-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-major-version-upgrade :initarg
                         :allow-major-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-global-cluster-message-allow-major-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-global-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-message
                    'make-modify-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewGlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         struct-shape-modify-global-cluster-result-global-cluster
                         :shape "GlobalCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-global-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-result
                    'make-modify-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-option-group-message common-lisp:nil
                       ((option-group-name :initarg :option-group-name
                         :initform
                         (common-lisp:error ":option-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-option-group-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options-to-include :initarg :options-to-include
                         :initform common-lisp:nil :type
                         (common-lisp:or option-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-option-group-message-options-to-include
                         :shape "OptionConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (options-to-remove :initarg :options-to-remove
                         :initform common-lisp:nil :type
                         (common-lisp:or option-names-list common-lisp:null)
                         :accessor
                         struct-shape-modify-option-group-message-options-to-remove
                         :shape "OptionNamesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-option-group-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-option-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-option-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-option-group-message
                    'make-modify-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-include))
      (common-lisp:list
       (common-lisp:cons "OptionsToInclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-option-group-result common-lisp:nil
                       ((option-group :initarg :option-group :initform
                         common-lisp:nil :type
                         (common-lisp:or option-group common-lisp:null)
                         :accessor
                         struct-shape-modify-option-group-result-option-group
                         :shape "OptionGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-option-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-option-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-option-group-result
                    'make-modify-option-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group))
      (common-lisp:list
       (common-lisp:cons "OptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-tenant-database-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-tenant-database-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         (common-lisp:error ":tenant-dbname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-tenant-database-message-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-modify-tenant-database-message-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-tenant-dbname :initarg :new-tenant-dbname
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-tenant-database-message-new-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-tenant-database-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-tenant-database-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-tenant-database-message
                    'make-modify-tenant-database-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-tenant-database-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-tenant-database-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "NewTenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-tenant-database-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-tenant-database-result common-lisp:nil
                       ((tenant-database :initarg :tenant-database :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-database common-lisp:null)
                         :accessor
                         struct-shape-modify-tenant-database-result-tenant-database
                         :shape "TenantDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-tenant-database-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-tenant-database-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-tenant-database-result
                    'make-modify-tenant-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-tenant-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-tenant-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-database))
      (common-lisp:list
       (common-lisp:cons "TenantDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-tenant-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition network-type-not-supported
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'network-type-not-supported)))
(common-lisp:progn
 (common-lisp:defclass option common-lisp:nil
                       ((option-name :initarg :option-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-option-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (option-description :initarg :option-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-option-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (persistent :initarg :persistent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-persistent :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permanent :initarg :permanent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-permanent :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-option-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-version :initarg :option-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-option-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (option-settings :initarg :option-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or option-setting-configuration-list
                                         common-lisp:null)
                         :accessor struct-shape-option-option-settings :shape
                         "OptionSettingConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbsecurity-group-memberships :initarg
                         :dbsecurity-group-memberships :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsecurity-group-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-dbsecurity-group-memberships
                         :shape "DBSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-memberships :initarg
                         :vpc-security-group-memberships :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-vpc-security-group-memberships
                         :shape "VpcSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option 'make-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-description))
      (common-lisp:list
       (common-lisp:cons "OptionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent))
      (common-lisp:list
       (common-lisp:cons "Persistent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permanent))
      (common-lisp:list
       (common-lisp:cons "Permanent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-version))
      (common-lisp:list
       (common-lisp:cons "OptionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-memberships))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass option-configuration common-lisp:nil
                       ((option-name :initarg :option-name :initform
                         (common-lisp:error ":option-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-configuration-option-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-option-configuration-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-version :initarg :option-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-configuration-option-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-group-memberships :initarg
                         :dbsecurity-group-memberships :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsecurity-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-configuration-dbsecurity-group-memberships
                         :shape "DBSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-memberships :initarg
                         :vpc-security-group-memberships :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-configuration-vpc-security-group-memberships
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (option-settings :initarg :option-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or option-settings-list common-lisp:null)
                         :accessor
                         struct-shape-option-configuration-option-settings
                         :shape "OptionSettingsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'option-configuration 'make-option-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-version))
      (common-lisp:list
       (common-lisp:cons "OptionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-memberships))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-configuration-list ()
   '(trivial-types:proper-list option-configuration))
 (common-lisp:defun make-option-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass option-group common-lisp:nil
                       ((option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-group-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (option-group-description :initarg
                         :option-group-description :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-engine-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-major-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type (common-lisp:or options-list common-lisp:null)
                         :accessor struct-shape-option-group-options :shape
                         "OptionsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allows-vpc-and-non-vpc-instance-memberships :initarg
                         :allows-vpc-and-non-vpc-instance-memberships :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-allows-vpc-and-non-vpc-instance-memberships
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-option-group-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (option-group-arn :initarg :option-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-group-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-option-group :initarg :source-option-group
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-source-option-group :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-account-id :initarg :source-account-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-source-account-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (copy-timestamp :initarg :copy-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-option-group-copy-timestamp :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option-group 'make-option-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-description))
      (common-lisp:list
       (common-lisp:cons "OptionGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-vpc-and-non-vpc-instance-memberships))
      (common-lisp:list
       (common-lisp:cons "AllowsVpcAndNonVpcInstanceMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-arn))
      (common-lisp:list
       (common-lisp:cons "OptionGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-option-group))
      (common-lisp:list
       (common-lisp:cons "SourceOptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account-id))
      (common-lisp:list
       (common-lisp:cons "SourceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-timestamp))
      (common-lisp:list
       (common-lisp:cons "CopyTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition option-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass option-group-membership common-lisp:nil
                       ((option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-membership-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-option-group-membership-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'option-group-membership 'make-option-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-group-membership-list ()
   '(trivial-types:proper-list option-group-membership))
 (common-lisp:defun make-option-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition option-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass option-group-option common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-engine-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (major-engine-version :initarg :major-engine-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-major-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-required-minor-engine-version :initarg
                         :minimum-required-minor-engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-minimum-required-minor-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-required :initarg :port-required :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-option-port-required :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-port :initarg :default-port :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-default-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options-depended-on :initarg :options-depended-on
                         :initform common-lisp:nil :type
                         (common-lisp:or options-depended-on common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-options-depended-on
                         :shape "OptionsDependedOn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options-conflicts-with :initarg
                         :options-conflicts-with :initform common-lisp:nil
                         :type
                         (common-lisp:or options-conflicts-with
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-options-conflicts-with
                         :shape "OptionsConflictsWith" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (persistent :initarg :persistent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-option-persistent :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permanent :initarg :permanent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-option-permanent :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requires-auto-minor-engine-version-upgrade :initarg
                         :requires-auto-minor-engine-version-upgrade :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-option-requires-auto-minor-engine-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-only :initarg :vpc-only :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-option-group-option-vpc-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-option-version-downgrade :initarg
                         :supports-option-version-downgrade :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-supports-option-version-downgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-option-settings :initarg
                         :option-group-option-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or option-group-option-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-option-group-option-settings
                         :shape "OptionGroupOptionSettingsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (option-group-option-versions :initarg
                         :option-group-option-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or option-group-option-versions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-option-group-option-versions
                         :shape "OptionGroupOptionVersionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (copyable-cross-account :initarg
                         :copyable-cross-account :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-copyable-cross-account
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-group-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-group-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'option-group-option 'make-option-group-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-group-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-group-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-required-minor-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumRequiredMinorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-required))
      (common-lisp:list
       (common-lisp:cons "PortRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-port))
      (common-lisp:list
       (common-lisp:cons "DefaultPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-depended-on))
      (common-lisp:list
       (common-lisp:cons "OptionsDependedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'options-conflicts-with))
      (common-lisp:list
       (common-lisp:cons "OptionsConflictsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent))
      (common-lisp:list
       (common-lisp:cons "Persistent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permanent))
      (common-lisp:list
       (common-lisp:cons "Permanent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-auto-minor-engine-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "RequiresAutoMinorEngineVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-only))
      (common-lisp:list
       (common-lisp:cons "VpcOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-option-version-downgrade))
      (common-lisp:list
       (common-lisp:cons "SupportsOptionVersionDowngrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionGroupOptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-option-versions))
      (common-lisp:list
       (common-lisp:cons "OptionGroupOptionVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copyable-cross-account))
      (common-lisp:list
       (common-lisp:cons "CopyableCrossAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-group-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass option-group-option-setting common-lisp:nil
                       ((setting-name :initarg :setting-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-setting-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (setting-description :initarg :setting-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-setting-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-default-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-type :initarg :apply-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-apply-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-allowed-values
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-is-modifiable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-required :initarg :is-required :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-group-option-setting-is-required
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-engine-version-per-allowed-value :initarg
                         :minimum-engine-version-per-allowed-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          minimum-engine-version-per-allowed-value-list
                          common-lisp:null)
                         :accessor
                         struct-shape-option-group-option-setting-minimum-engine-version-per-allowed-value
                         :shape "MinimumEngineVersionPerAllowedValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-group-option-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-group-option-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'option-group-option-setting
                    'make-option-group-option-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-name))
      (common-lisp:list
       (common-lisp:cons "SettingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-description))
      (common-lisp:list
       (common-lisp:cons "SettingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "IsRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version-per-allowed-value))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersionPerAllowedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-group-option-settings-list ()
   '(trivial-types:proper-list option-group-option-setting))
 (common-lisp:defun make-option-group-option-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            option-group-option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-group-option-versions-list ()
   '(trivial-types:proper-list option-version))
 (common-lisp:defun make-option-group-option-versions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-group-options-list ()
   '(trivial-types:proper-list option-group-option))
 (common-lisp:defun make-option-group-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass option-group-options-message common-lisp:nil
                       ((option-group-options :initarg :option-group-options
                         :initform common-lisp:nil :type
                         (common-lisp:or option-group-options-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-option-group-options-message-option-group-options
                         :shape "OptionGroupOptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-option-group-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-group-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-group-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'option-group-options-message
                    'make-option-group-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-options))
      (common-lisp:list
       (common-lisp:cons "OptionGroupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition option-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass option-groups common-lisp:nil
                       ((option-groups-list :initarg :option-groups-list
                         :initform common-lisp:nil :type
                         (common-lisp:or option-groups-list common-lisp:null)
                         :accessor
                         struct-shape-option-groups-option-groups-list :shape
                         "OptionGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-option-groups-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-groups
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option-groups 'make-option-groups))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-groups-list))
      (common-lisp:list
       (common-lisp:cons "OptionGroupsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-groups-list ()
   '(trivial-types:proper-list option-group))
 (common-lisp:defun make-option-groups-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-names-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-option-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass option-setting common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-default-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apply-type :initarg :apply-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-apply-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-data-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-option-setting-allowed-values :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-setting-is-modifiable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-collection :initarg :is-collection :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-setting-is-collection :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option-setting 'make-option-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-collection))
      (common-lisp:list
       (common-lisp:cons "IsCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-setting-configuration-list ()
   '(trivial-types:proper-list option-setting))
 (common-lisp:defun make-option-setting-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-settings-list ()
   '(trivial-types:proper-list option-setting))
 (common-lisp:defun make-option-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass option-version common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-option-version-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-version-is-default :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option-version 'make-option-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype options-conflicts-with ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-options-conflicts-with
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype options-depended-on ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-options-depended-on
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype options-list () '(trivial-types:proper-list option))
 (common-lisp:defun make-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass orderable-dbinstance-option common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-group :initarg
                         :availability-zone-group :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-availability-zone-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-availability-zones
                         :shape "AvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (multi-azcapable :initarg :multi-azcapable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-multi-azcapable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-replica-capable :initarg :read-replica-capable
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-read-replica-capable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-vpc :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supports-storage-encryption :initarg
                         :supports-storage-encryption :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supports-storage-encryption
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-iops :initarg :supports-iops :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-supports-iops
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-enhanced-monitoring :initarg
                         :supports-enhanced-monitoring :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-supports-enhanced-monitoring
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-iamdatabase-authentication :initarg
                         :supports-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-supports-iamdatabase-authentication
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-performance-insights :initarg
                         :supports-performance-insights :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-supports-performance-insights
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-storage-size :initarg :min-storage-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-min-storage-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-storage-size :initarg :max-storage-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-max-storage-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-iops-per-db-instance :initarg
                         :min-iops-per-db-instance :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-min-iops-per-db-instance
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-iops-per-db-instance :initarg
                         :max-iops-per-db-instance :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-max-iops-per-db-instance
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-iops-per-gib :initarg :min-iops-per-gib :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-min-iops-per-gib
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-iops-per-gib :initarg :max-iops-per-gib :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-max-iops-per-gib
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-processor-features :initarg
                         :available-processor-features :initform
                         common-lisp:nil :type
                         (common-lisp:or available-processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-available-processor-features
                         :shape "AvailableProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-engine-modes :initarg
                         :supported-engine-modes :initform common-lisp:nil
                         :type
                         (common-lisp:or engine-mode-list common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supported-engine-modes
                         :shape "EngineModeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-storage-autoscaling :initarg
                         :supports-storage-autoscaling :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supports-storage-autoscaling
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-kerberos-authentication :initarg
                         :supports-kerberos-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supports-kerberos-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-capable :initarg :outpost-capable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-outpost-capable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-activity-stream-modes :initarg
                         :supported-activity-stream-modes :initform
                         common-lisp:nil :type
                         (common-lisp:or activity-stream-mode-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supported-activity-stream-modes
                         :shape "ActivityStreamModeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supports-global-databases :initarg
                         :supports-global-databases :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supports-global-databases
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-clusters :initarg :supports-clusters
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-supports-clusters
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-network-types :initarg
                         :supported-network-types :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supported-network-types
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-storage-throughput :initarg
                         :supports-storage-throughput :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-supports-storage-throughput
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-storage-throughput-per-db-instance :initarg
                         :min-storage-throughput-per-db-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-min-storage-throughput-per-db-instance
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-storage-throughput-per-db-instance :initarg
                         :max-storage-throughput-per-db-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-max-storage-throughput-per-db-instance
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-storage-throughput-per-iops :initarg
                         :min-storage-throughput-per-iops :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-min-storage-throughput-per-iops
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-storage-throughput-per-iops :initarg
                         :max-storage-throughput-per-iops :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-option-max-storage-throughput-per-iops
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-dedicated-log-volume :initarg
                         :supports-dedicated-log-volume :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-orderable-dbinstance-option-supports-dedicated-log-volume
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-orderable-dbinstance-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'orderable-dbinstance-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-option
                    'make-orderable-dbinstance-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-group))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azcapable))
      (common-lisp:list
       (common-lisp:cons "MultiAZCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-capable))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-encryption))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-iops))
      (common-lisp:list
       (common-lisp:cons "SupportsIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "SupportsEnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "SupportsIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-performance-insights))
      (common-lisp:list
       (common-lisp:cons "SupportsPerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-storage-size))
      (common-lisp:list
       (common-lisp:cons "MinStorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-storage-size))
      (common-lisp:list
       (common-lisp:cons "MaxStorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-iops-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MinIopsPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-iops-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MaxIopsPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iops-per-gib))
      (common-lisp:list
       (common-lisp:cons "MinIopsPerGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-iops-per-gib))
      (common-lisp:list
       (common-lisp:cons "MaxIopsPerGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-processor-features))
      (common-lisp:list
       (common-lisp:cons "AvailableProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-autoscaling))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageAutoscaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-kerberos-authentication))
      (common-lisp:list
       (common-lisp:cons "SupportsKerberosAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-capable))
      (common-lisp:list
       (common-lisp:cons "OutpostCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-activity-stream-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedActivityStreamModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-clusters))
      (common-lisp:list
       (common-lisp:cons "SupportsClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-storage-throughput-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MinStorageThroughputPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-storage-throughput-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MaxStorageThroughputPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-storage-throughput-per-iops))
      (common-lisp:list
       (common-lisp:cons "MinStorageThroughputPerIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-storage-throughput-per-iops))
      (common-lisp:list
       (common-lisp:cons "MaxStorageThroughputPerIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "SupportsDedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-dbinstance-options-list ()
   '(trivial-types:proper-list orderable-dbinstance-option))
 (common-lisp:defun make-orderable-dbinstance-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-dbinstance-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass orderable-dbinstance-options-message common-lisp:nil
                       ((orderable-dbinstance-options :initarg
                         :orderable-dbinstance-options :initform
                         common-lisp:nil :type
                         (common-lisp:or orderable-dbinstance-options-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-options-message-orderable-dbinstance-options
                         :shape "OrderableDBInstanceOptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-orderable-dbinstance-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-orderable-dbinstance-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'orderable-dbinstance-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-options-message
                    'make-orderable-dbinstance-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-dbinstance-options))
      (common-lisp:list
       (common-lisp:cons "OrderableDBInstanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outpost common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-outpost-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outpost
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outpost
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'outpost 'make-outpost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outpost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outpost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outpost))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-parameter-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-parameter-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-parameter-source :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apply-type :initarg :apply-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-apply-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-data-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-allowed-values :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-parameter-is-modifiable :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-parameter-minimum-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apply-method :initarg :apply-method :initform
                         common-lisp:nil :type
                         (common-lisp:or apply-method common-lisp:null)
                         :accessor struct-shape-parameter-apply-method :shape
                         "ApplyMethod" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-engine-modes :initarg
                         :supported-engine-modes :initform common-lisp:nil
                         :type
                         (common-lisp:or engine-mode-list common-lisp:null)
                         :accessor
                         struct-shape-parameter-supported-engine-modes :shape
                         "EngineModeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-method))
      (common-lisp:list
       (common-lisp:cons "ApplyMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun make-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-cloudwatch-logs-exports common-lisp:nil
                       ((log-types-to-enable :initarg :log-types-to-enable
                         :initform common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-pending-cloudwatch-logs-exports-log-types-to-enable
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-types-to-disable :initarg :log-types-to-disable
                         :initform common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-pending-cloudwatch-logs-exports-log-types-to-disable
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-cloudwatch-logs-exports
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-cloudwatch-logs-exports
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-cloudwatch-logs-exports
                    'make-pending-cloudwatch-logs-exports))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types-to-enable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-types-to-disable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pending-maintenance-action common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-action-action :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-applied-after-date :initarg
                         :auto-applied-after-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-action-auto-applied-after-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forced-apply-date :initarg :forced-apply-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-forced-apply-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (opt-in-status :initarg :opt-in-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-opt-in-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-apply-date :initarg :current-apply-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-current-apply-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-maintenance-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-maintenance-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-applied-after-date))
      (common-lisp:list
       (common-lisp:cons "AutoAppliedAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forced-apply-date))
      (common-lisp:list
       (common-lisp:cons "ForcedApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "CurrentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-details ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun make-pending-maintenance-action-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-actions ()
   '(trivial-types:proper-list resource-pending-maintenance-actions))
 (common-lisp:defun make-pending-maintenance-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-pending-maintenance-actions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-maintenance-actions-message common-lisp:nil
                       ((pending-maintenance-actions :initarg
                         :pending-maintenance-actions :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-maintenance-actions
                                         common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-actions-message-pending-maintenance-actions
                         :shape "PendingMaintenanceActions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-actions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-maintenance-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-maintenance-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-actions-message
                    'make-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pending-modified-values common-lisp:nil
                       ((dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-pending-modified-values-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-multi-az :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-pending-modified-values-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-cacertificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-cloudwatch-logs-exports :initarg
                         :pending-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-cloudwatch-logs-exports
                                         common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-pending-cloudwatch-logs-exports
                         :shape "PendingCloudwatchLogsExports" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-iamdatabase-authentication-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automation-mode :initarg :automation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or automation-mode common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-automation-mode
                         :shape "AutomationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resume-full-automation-mode-time :initarg
                         :resume-full-automation-mode-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-pending-modified-values-resume-full-automation-mode-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-pending-modified-values-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-tenant :initarg :multi-tenant :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-multi-tenant
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-mode))
      (common-lisp:list
       (common-lisp:cons "AutomationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resume-full-automation-mode-time))
      (common-lisp:list
       (common-lisp:cons "ResumeFullAutomationModeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-tenant))
      (common-lisp:list
       (common-lisp:cons "MultiTenant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass performance-insights-metric-dimension-group
                       common-lisp:nil
                       ((dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-performance-insights-metric-dimension-group-dimensions
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-performance-insights-metric-dimension-group-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-performance-insights-metric-dimension-group-limit
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-performance-insights-metric-dimension-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'performance-insights-metric-dimension-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'performance-insights-metric-dimension-group
                    'make-performance-insights-metric-dimension-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-dimension-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-dimension-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-dimension-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass performance-insights-metric-query common-lisp:nil
                       ((group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          performance-insights-metric-dimension-group
                          common-lisp:null)
                         :accessor
                         struct-shape-performance-insights-metric-query-group-by
                         :shape "PerformanceInsightsMetricDimensionGroup"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric :initarg :metric :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-performance-insights-metric-query-metric
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-performance-insights-metric-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'performance-insights-metric-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'performance-insights-metric-query
                    'make-performance-insights-metric-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass performance-issue-details common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-performance-issue-details-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-performance-issue-details-end-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metric-list common-lisp:null)
                         :accessor
                         struct-shape-performance-issue-details-metrics :shape
                         "MetricList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analysis :initarg :analysis :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-performance-issue-details-analysis :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-performance-issue-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'performance-issue-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'performance-issue-details
                    'make-performance-issue-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-issue-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-issue-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis))
      (common-lisp:list
       (common-lisp:cons "Analysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-issue-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition point-in-time-restore-not-enabled-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'point-in-time-restore-not-enabled-fault)))
(common-lisp:progn
 (common-lisp:defclass processor-feature common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-processor-feature-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-processor-feature-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-processor-feature
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'processor-feature
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'processor-feature 'make-processor-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processor-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processor-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processor-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processor-feature-list ()
   '(trivial-types:proper-list processor-feature))
 (common-lisp:defun make-processor-feature-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processor-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass promote-read-replica-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-promote-read-replica-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-promote-read-replica-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'promote-read-replica-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-dbcluster-message
                    'make-promote-read-replica-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass promote-read-replica-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-promote-read-replica-dbcluster-result-dbcluster
                         :shape "DBCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-promote-read-replica-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'promote-read-replica-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-dbcluster-result
                    'make-promote-read-replica-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass promote-read-replica-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-promote-read-replica-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-promote-read-replica-message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-promote-read-replica-message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-promote-read-replica-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'promote-read-replica-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-message
                    'make-promote-read-replica-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass promote-read-replica-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-promote-read-replica-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-promote-read-replica-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'promote-read-replica-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-result
                    'make-promote-read-replica-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition provisioned-iops-not-available-in-azfault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'provisioned-iops-not-available-in-azfault)))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-dbinstances-offering-message
                       common-lisp:nil
                       ((reserved-dbinstances-offering-id :initarg
                         :reserved-dbinstances-offering-id :initform
                         (common-lisp:error
                          ":reserved-dbinstances-offering-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-dbinstances-offering-message-reserved-dbinstances-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-dbinstance-id :initarg
                         :reserved-dbinstance-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-dbinstances-offering-message-reserved-dbinstance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-count :initarg :dbinstance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-dbinstances-offering-message-dbinstance-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-purchase-reserved-dbinstances-offering-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-dbinstances-offering-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-dbinstances-offering-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-dbinstances-offering-message
                    'make-purchase-reserved-dbinstances-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-count))
      (common-lisp:list
       (common-lisp:cons "DBInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-dbinstances-offering-result
                       common-lisp:nil
                       ((reserved-dbinstance :initarg :reserved-dbinstance
                         :initform common-lisp:nil :type
                         (common-lisp:or reserved-dbinstance common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-dbinstances-offering-result-reserved-dbinstance
                         :shape "ReservedDBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-dbinstances-offering-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-dbinstances-offering-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-dbinstances-offering-result
                    'make-purchase-reserved-dbinstances-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-dbinstance))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass range common-lisp:nil
                       ((from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-range-from :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (to :initarg :to :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-range-to :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (step :initarg :step :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-range-step :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step))
      (common-lisp:list
       (common-lisp:cons "Step"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype range-list () '(trivial-types:proper-list range))
 (common-lisp:defun make-range-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rds-custom-cluster-configuration common-lisp:nil
                       ((interconnect-subnet-id :initarg
                         :interconnect-subnet-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rds-custom-cluster-configuration-interconnect-subnet-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-multicast-domain-id :initarg
                         :transit-gateway-multicast-domain-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-custom-cluster-configuration-transit-gateway-multicast-domain-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-mode :initarg :replica-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-mode common-lisp:null)
                         :accessor
                         struct-shape-rds-custom-cluster-configuration-replica-mode
                         :shape "ReplicaMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-custom-cluster-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-custom-cluster-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-custom-cluster-configuration
                    'make-rds-custom-cluster-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-custom-cluster-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-custom-cluster-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interconnect-subnet-id))
      (common-lisp:list
       (common-lisp:cons "InterconnectSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-multicast-domain-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayMulticastDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-custom-cluster-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype read-replica-dbcluster-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-read-replica-dbcluster-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-dbinstance-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-read-replica-dbinstance-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-read-replica-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype readers-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-readers-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reboot-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reboot-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-dbcluster-message 'make-reboot-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-reboot-dbcluster-result-dbcluster :shape
                         "DBCluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-dbcluster-result 'make-reboot-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reboot-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-failover :initarg :force-failover :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-reboot-dbinstance-message-force-failover
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-message
                    'make-reboot-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-failover))
      (common-lisp:list
       (common-lisp:cons "ForceFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-reboot-dbinstance-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-dbinstance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-result 'make-reboot-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-dbshard-group-message common-lisp:nil
                       ((dbshard-group-identifier :initarg
                         :dbshard-group-identifier :initform
                         (common-lisp:error
                          ":dbshard-group-identifier is required")
                         :type
                         (common-lisp:or dbshard-group-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-reboot-dbshard-group-message-dbshard-group-identifier
                         :shape "DBShardGroupIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-dbshard-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbshard-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-dbshard-group-message
                    'make-reboot-dbshard-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbshard-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbshard-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbshard-group-identifier))
      (common-lisp:list
       (common-lisp:cons "DBShardGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbshard-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommended-action common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-action-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-title :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-operation :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or recommended-action-parameter-list
                                         common-lisp:null)
                         :accessor struct-shape-recommended-action-parameters
                         :shape "RecommendedActionParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (apply-modes :initarg :apply-modes :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-recommended-action-apply-modes
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-recommended-action-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issue-details :initarg :issue-details :initform
                         common-lisp:nil :type
                         (common-lisp:or issue-details common-lisp:null)
                         :accessor
                         struct-shape-recommended-action-issue-details :shape
                         "IssueDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-attributes :initarg :context-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or context-attribute-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommended-action-context-attributes
                         :shape "ContextAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommended-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommended-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommended-action 'make-recommended-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommended-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommended-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-modes))
      (common-lisp:list
       (common-lisp:cons "ApplyModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-details))
      (common-lisp:list
       (common-lisp:cons "IssueDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-attributes))
      (common-lisp:list
       (common-lisp:cons "ContextAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommended-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommended-action-list ()
   '(trivial-types:proper-list recommended-action))
 (common-lisp:defun make-recommended-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommended-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommended-action-parameter common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-parameter-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-parameter-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommended-action-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommended-action-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommended-action-parameter
                    'make-recommended-action-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommended-action-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommended-action-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommended-action-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommended-action-parameter-list ()
   '(trivial-types:proper-list recommended-action-parameter))
 (common-lisp:defun make-recommended-action-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommended-action-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommended-action-update common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         (common-lisp:error ":action-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-update-action-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-update-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommended-action-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommended-action-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommended-action-update
                    'make-recommended-action-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommended-action-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommended-action-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommended-action-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommended-action-update-list ()
   '(trivial-types:proper-list recommended-action-update))
 (common-lisp:defun make-recommended-action-update-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommended-action-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((recurring-charge-amount :initarg
                         :recurring-charge-amount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-amount
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charge-frequency :initarg
                         :recurring-charge-frequency :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-frequency
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recurring-charge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun make-recurring-charge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reference-details common-lisp:nil
                       ((scalar-reference-details :initarg
                         :scalar-reference-details :initform common-lisp:nil
                         :type
                         (common-lisp:or scalar-reference-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-reference-details-scalar-reference-details
                         :shape "ScalarReferenceDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reference-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reference-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reference-details 'make-reference-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scalar-reference-details))
      (common-lisp:list
       (common-lisp:cons "ScalarReferenceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-dbproxy-targets-request common-lisp:nil
                       ((dbproxy-name :initarg :dbproxy-name :initform
                         (common-lisp:error ":dbproxy-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-dbproxy-targets-request-dbproxy-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-name :initarg :target-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-dbproxy-targets-request-target-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifiers :initarg
                         :dbinstance-identifiers :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-register-dbproxy-targets-request-dbinstance-identifiers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifiers :initarg :dbcluster-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-register-dbproxy-targets-request-dbcluster-identifiers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-dbproxy-targets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-dbproxy-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-dbproxy-targets-request
                    'make-register-dbproxy-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-dbproxy-targets-response common-lisp:nil
                       ((dbproxy-targets :initarg :dbproxy-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or target-list common-lisp:null)
                         :accessor
                         struct-shape-register-dbproxy-targets-response-dbproxy-targets
                         :shape "TargetList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-dbproxy-targets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-dbproxy-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-dbproxy-targets-response
                    'make-register-dbproxy-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-targets))
      (common-lisp:list
       (common-lisp:cons "DBProxyTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-from-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-remove-from-global-cluster-message-global-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-cluster-identifier :initarg :db-cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-from-global-cluster-message-db-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-from-global-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-from-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-message
                    'make-remove-from-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-from-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         struct-shape-remove-from-global-cluster-result-global-cluster
                         :shape "GlobalCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-from-global-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-from-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-result
                    'make-remove-from-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-role-from-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-remove-role-from-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-role-from-dbcluster-message-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-name :initarg :feature-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-role-from-dbcluster-message-feature-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-role-from-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-role-from-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-dbcluster-message
                    'make-remove-role-from-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-role-from-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-remove-role-from-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-role-from-dbinstance-message-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-name :initarg :feature-name :initform
                         (common-lisp:error ":feature-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-role-from-dbinstance-message-feature-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-role-from-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-role-from-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-dbinstance-message
                    'make-remove-role-from-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-source-identifier-from-subscription-message
                       common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-remove-source-identifier-from-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-identifier :initarg :source-identifier
                         :initform
                         (common-lisp:error ":source-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-remove-source-identifier-from-subscription-message-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-source-identifier-from-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-source-identifier-from-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-message
                    'make-remove-source-identifier-from-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-source-identifier-from-subscription-result
                       common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-remove-source-identifier-from-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-source-identifier-from-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-source-identifier-from-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-result
                    'make-remove-source-identifier-from-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-tags-from-resource-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         struct-shape-remove-tags-from-resource-message-tag-keys
                         :shape "KeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-from-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:deftype replica-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reserved-dbinstance common-lisp:nil
                       ((reserved-dbinstance-id :initarg
                         :reserved-dbinstance-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstance-reserved-dbinstance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-dbinstances-offering-id :initarg
                         :reserved-dbinstances-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-reserved-dbinstances-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-reserved-dbinstance-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-fixed-price :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-usage-price :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-currency-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbinstance-count :initarg :dbinstance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-dbinstance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-offering-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-reserved-dbinstance-multi-az
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstance-state :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstance-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-dbinstance-arn :initarg
                         :reserved-dbinstance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstance-reserved-dbinstance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lease-id :initarg :lease-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-reserved-dbinstance-lease-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-dbinstance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-dbinstance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance 'make-reserved-dbinstance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-dbinstance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-dbinstance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-count))
      (common-lisp:list
       (common-lisp:cons "DBInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lease-id))
      (common-lisp:list
       (common-lisp:cons "LeaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-dbinstance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstance-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype reserved-dbinstance-list ()
   '(trivial-types:proper-list reserved-dbinstance))
 (common-lisp:defun make-reserved-dbinstance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-dbinstance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-dbinstance-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstance-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reserved-dbinstances :initarg :reserved-dbinstances
                         :initform common-lisp:nil :type
                         (common-lisp:or reserved-dbinstance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstance-message-reserved-dbinstances
                         :shape "ReservedDBInstanceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance-message
                    'make-reserved-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstance-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-dbinstance-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstance-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-dbinstances-offering common-lisp:nil
                       ((reserved-dbinstances-offering-id :initarg
                         :reserved-dbinstances-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-reserved-dbinstances-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstances-offering-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-fixed-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-usage-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-currency-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-product-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-dbinstances-offering-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstances-offering-multi-az
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstances-offering-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-dbinstances-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-dbinstances-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstances-offering
                    'make-reserved-dbinstances-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-dbinstances-offering-list ()
   '(trivial-types:proper-list reserved-dbinstances-offering))
 (common-lisp:defun make-reserved-dbinstances-offering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-dbinstances-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-dbinstances-offering-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstances-offering-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-dbinstances-offerings :initarg
                         :reserved-dbinstances-offerings :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-dbinstances-offering-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-dbinstances-offering-message-reserved-dbinstances-offerings
                         :shape "ReservedDBInstancesOfferingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-dbinstances-offering-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-dbinstances-offering-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstances-offering-message
                    'make-reserved-dbinstances-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstances-offering-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstances-offering-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass reset-dbcluster-parameter-group-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reset-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reset-all-parameters :initarg :reset-all-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-reset-dbcluster-parameter-group-message-reset-all-parameters
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-reset-dbcluster-parameter-group-message-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-dbcluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-dbcluster-parameter-group-message
                    'make-reset-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-dbparameter-group-message common-lisp:nil
                       ((dbparameter-group-name :initarg
                         :dbparameter-group-name :initform
                         (common-lisp:error
                          ":dbparameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reset-dbparameter-group-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reset-all-parameters :initarg :reset-all-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-reset-dbparameter-group-message-reset-all-parameters
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-reset-dbparameter-group-message-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-dbparameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-dbparameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-dbparameter-group-message
                    'make-reset-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass resource-pending-maintenance-actions common-lisp:nil
                       ((resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-pending-maintenance-actions-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-maintenance-action-details :initarg
                         :pending-maintenance-action-details :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-maintenance-action-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-pending-maintenance-actions-pending-maintenance-action-details
                         :shape "PendingMaintenanceActionDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-pending-maintenance-actions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-pending-maintenance-actions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-pending-maintenance-actions
                    'make-resource-pending-maintenance-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-action-details))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-from-s3message common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         (common-lisp:error ":master-username is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-storage-encrypted
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-engine :initarg :source-engine :initform
                         (common-lisp:error ":source-engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-source-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-engine-version :initarg :source-engine-version
                         :initform
                         (common-lisp:error
                          ":source-engine-version is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-source-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3prefix :initarg :s3prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-s3prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3ingestion-role-arn :initarg :s3ingestion-role-arn
                         :initform
                         (common-lisp:error
                          ":s3ingestion-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-s3ingestion-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-window :initarg :backtrack-window :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-backtrack-window
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-v2scaling-configuration :initarg
                         :serverless-v2scaling-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-v2scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-serverless-v2scaling-configuration
                         :shape "ServerlessV2ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-user-password :initarg
                         :manage-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-s3message-manage-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-secret-kms-key-id :initarg
                         :master-user-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-master-user-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbcluster-from-s3message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-from-s3message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-s3message
                    'make-restore-dbcluster-from-s3message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-engine))
      (common-lisp:list
       (common-lisp:cons "SourceEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-engine-version))
      (common-lisp:list
       (common-lisp:cons "SourceEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3ingestion-role-arn))
      (common-lisp:list
       (common-lisp:cons "S3IngestionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-from-s3result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-s3result-dbcluster
                         :shape "DBCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbcluster-from-s3result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-from-s3result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-s3result
                    'make-restore-dbcluster-from-s3result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-from-snapshot-message common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-identifier :initarg :snapshot-identifier
                         :initform
                         (common-lisp:error ":snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-window :initarg :backtrack-window :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-backtrack-window
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-engine-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-configuration :initarg :scaling-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-scaling-configuration
                         :shape "ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-instance-class :initarg
                         :dbcluster-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-dbcluster-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-v2scaling-configuration :initarg
                         :serverless-v2scaling-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-v2scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-serverless-v2scaling-configuration
                         :shape "ServerlessV2ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rds-custom-cluster-configuration :initarg
                         :rds-custom-cluster-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-custom-cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-from-snapshot-message-rds-custom-cluster-configuration
                         :shape "RdsCustomClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbcluster-from-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-from-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-message
                    'make-restore-dbcluster-from-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-custom-cluster-configuration))
      (common-lisp:list
       (common-lisp:cons "RdsCustomClusterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-from-snapshot-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-from-snapshot-result-dbcluster
                         :shape "DBCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbcluster-from-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-from-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-result
                    'make-restore-dbcluster-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-to-point-in-time-message
                       common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-type :initarg :restore-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-restore-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbcluster-identifier :initarg
                         :source-dbcluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-source-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-to-time :initarg :restore-to-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-restore-to-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-latest-restorable-time :initarg
                         :use-latest-restorable-time :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-use-latest-restorable-time
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backtrack-window :initarg :backtrack-window :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-backtrack-window
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-dbcluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-configuration :initarg :scaling-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-scaling-configuration
                         :shape "ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-mode :initarg :engine-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-engine-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-instance-class :initarg
                         :dbcluster-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-dbcluster-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serverless-v2scaling-configuration :initarg
                         :serverless-v2scaling-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or serverless-v2scaling-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-serverless-v2scaling-configuration
                         :shape "ServerlessV2ScalingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-db-cluster-resource-id :initarg
                         :source-db-cluster-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-source-db-cluster-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rds-custom-cluster-configuration :initarg
                         :rds-custom-cluster-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-custom-cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-message-rds-custom-cluster-configuration
                         :shape "RdsCustomClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbcluster-to-point-in-time-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-to-point-in-time-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-message
                    'make-restore-dbcluster-to-point-in-time-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-type))
      (common-lisp:list
       (common-lisp:cons "RestoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-to-time))
      (common-lisp:list
       (common-lisp:cons "RestoreToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "UseLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "SourceDbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-custom-cluster-configuration))
      (common-lisp:list
       (common-lisp:cons "RdsCustomClusterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-to-point-in-time-result
                       common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-restore-dbcluster-to-point-in-time-result-dbcluster
                         :shape "DBCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbcluster-to-point-in-time-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-to-point-in-time-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-result
                    'make-restore-dbcluster-to-point-in-time-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbinstance-from-dbsnapshot-message
                       common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-tde-credential-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-password :initarg
                         :tde-credential-password :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-tde-credential-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-fqdn :initarg :domain-fqdn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-domain-fqdn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-ou :initarg :domain-ou :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-domain-ou
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-auth-secret-arn :initarg
                         :domain-auth-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-domain-auth-secret-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-dns-ips :initarg :domain-dns-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-domain-dns-ips
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-default-processor-features :initarg
                         :use-default-processor-features :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-use-default-processor-features
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-customer-owned-ip :initarg
                         :enable-customer-owned-ip :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-enable-customer-owned-ip
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-iam-instance-profile :initarg
                         :custom-iam-instance-profile :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-custom-iam-instance-profile
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-target :initarg :backup-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-backup-target
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dbcluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-message-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbinstance-from-dbsnapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbinstance-from-dbsnapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-dbsnapshot-message
                    'make-restore-dbinstance-from-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-fqdn))
      (common-lisp:list
       (common-lisp:cons "DomainFqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-ou))
      (common-lisp:list
       (common-lisp:cons "DomainOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-auth-secret-arn))
      (common-lisp:list
       (common-lisp:cons "DomainAuthSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-dns-ips))
      (common-lisp:list
       (common-lisp:cons "DomainDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbinstance-from-dbsnapshot-result
                       common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-dbsnapshot-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbinstance-from-dbsnapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbinstance-from-dbsnapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-dbsnapshot-result
                    'make-restore-dbinstance-from-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbinstance-from-s3message common-lisp:nil
                       ((dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         (common-lisp:error ":dbinstance-class is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-master-user-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsecurity-groups :initarg :dbsecurity-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or dbsecurity-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-dbsecurity-groups
                         :shape "DBSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-preferred-backup-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-storage-encrypted
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-monitoring-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-monitoring-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-engine :initarg :source-engine :initform
                         (common-lisp:error ":source-engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-source-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-engine-version :initarg :source-engine-version
                         :initform
                         (common-lisp:error
                          ":source-engine-version is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-source-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3prefix :initarg :s3prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-s3prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3ingestion-role-arn :initarg :s3ingestion-role-arn
                         :initform
                         (common-lisp:error
                          ":s3ingestion-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-s3ingestion-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-enable-performance-insights
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-performance-insights-kmskey-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-performance-insights-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-default-processor-features :initarg
                         :use-default-processor-features :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-use-default-processor-features
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-max-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-user-password :initarg
                         :manage-master-user-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-manage-master-user-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-secret-kms-key-id :initarg
                         :master-user-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3message-master-user-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-from-s3message-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbinstance-from-s3message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbinstance-from-s3message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-s3message
                    'make-restore-dbinstance-from-s3message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-engine))
      (common-lisp:list
       (common-lisp:cons "SourceEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-engine-version))
      (common-lisp:list
       (common-lisp:cons "SourceEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3ingestion-role-arn))
      (common-lisp:list
       (common-lisp:cons "S3IngestionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbinstance-from-s3result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-from-s3result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbinstance-from-s3result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbinstance-from-s3result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-s3result
                    'make-restore-dbinstance-from-s3result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbinstance-to-point-in-time-message
                       common-lisp:nil
                       ((source-dbinstance-identifier :initarg
                         :source-dbinstance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-source-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-dbinstance-identifier :initarg
                         :target-dbinstance-identifier :initform
                         (common-lisp:error
                          ":target-dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-target-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-time :initarg :restore-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-restore-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-latest-restorable-time :initarg
                         :use-latest-restorable-time :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-use-latest-restorable-time
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-dbinstance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-dbsubnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (option-group-name :initarg :option-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-option-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-copy-tags-to-snapshot
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-tde-credential-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tde-credential-password :initarg
                         :tde-credential-password :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-tde-credential-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-iamrole-name :initarg :domain-iamrole-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-domain-iamrole-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-fqdn :initarg :domain-fqdn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-domain-fqdn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-ou :initarg :domain-ou :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-domain-ou
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-auth-secret-arn :initarg
                         :domain-auth-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-domain-auth-secret-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-dns-ips :initarg :domain-dns-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-domain-dns-ips
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-iamdatabase-authentication :initarg
                         :enable-iamdatabase-authentication :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-enable-iamdatabase-authentication
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-enable-cloudwatch-logs-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processor-features :initarg :processor-features
                         :initform common-lisp:nil :type
                         (common-lisp:or processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-processor-features
                         :shape "ProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-default-processor-features :initarg
                         :use-default-processor-features :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-use-default-processor-features
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbparameter-group-name :initarg
                         :dbparameter-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-dbparameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-deletion-protection
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbi-resource-id :initarg
                         :source-dbi-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-source-dbi-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-max-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-dbinstance-automated-backups-arn :initarg
                         :source-dbinstance-automated-backups-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-source-dbinstance-automated-backups-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-customer-owned-ip :initarg
                         :enable-customer-owned-ip :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-enable-customer-owned-ip
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-iam-instance-profile :initarg
                         :custom-iam-instance-profile :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-custom-iam-instance-profile
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-target :initarg :backup-target :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-backup-target
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput :initarg :storage-throughput
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-storage-throughput
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-log-volume :initarg :dedicated-log-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-message-dedicated-log-volume
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbinstance-to-point-in-time-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbinstance-to-point-in-time-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-to-point-in-time-message
                    'make-restore-dbinstance-to-point-in-time-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-time))
      (common-lisp:list
       (common-lisp:cons "RestoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "UseLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-fqdn))
      (common-lisp:list
       (common-lisp:cons "DomainFqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-ou))
      (common-lisp:list
       (common-lisp:cons "DomainOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-auth-secret-arn))
      (common-lisp:list
       (common-lisp:cons "DomainAuthSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-dns-ips))
      (common-lisp:list
       (common-lisp:cons "DomainDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "SourceDbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "DedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbinstance-to-point-in-time-result
                       common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-restore-dbinstance-to-point-in-time-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-dbinstance-to-point-in-time-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbinstance-to-point-in-time-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-to-point-in-time-result
                    'make-restore-dbinstance-to-point-in-time-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-window common-lisp:nil
                       ((earliest-time :initarg :earliest-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-restore-window-earliest-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (latest-time :initarg :latest-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-restore-window-latest-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'restore-window 'make-restore-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earliest-time))
      (common-lisp:list
       (common-lisp:cons "EarliestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-time))
      (common-lisp:list
       (common-lisp:cons "LatestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-dbsecurity-group-ingress-message common-lisp:nil
                       ((dbsecurity-group-name :initarg :dbsecurity-group-name
                         :initform
                         (common-lisp:error
                          ":dbsecurity-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-dbsecurity-group-ingress-message-dbsecurity-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrip :initarg :cidrip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-dbsecurity-group-ingress-message-cidrip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-dbsecurity-group-ingress-message-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-id :initarg :ec2security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revoke-dbsecurity-group-ingress-message-ec2security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-dbsecurity-group-ingress-message-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-dbsecurity-group-ingress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-dbsecurity-group-ingress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-dbsecurity-group-ingress-message
                    'make-revoke-dbsecurity-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-dbsecurity-group-ingress-result common-lisp:nil
                       ((dbsecurity-group :initarg :dbsecurity-group :initform
                         common-lisp:nil :type
                         (common-lisp:or dbsecurity-group common-lisp:null)
                         :accessor
                         struct-shape-revoke-dbsecurity-group-ingress-result-dbsecurity-group
                         :shape "DBSecurityGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-dbsecurity-group-ingress-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-dbsecurity-group-ingress-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-dbsecurity-group-ingress-result
                    'make-revoke-dbsecurity-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-group))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsinvalid-topic-fault)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsno-authorization-fault)))
(common-lisp:progn
 (common-lisp:define-condition snstopic-arn-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snstopic-arn-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass scalar-reference-details common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-scalar-reference-details-value :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scalar-reference-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scalar-reference-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scalar-reference-details 'make-scalar-reference-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scalar-reference-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scalar-reference-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scalar-reference-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scaling-configuration common-lisp:nil
                       ((min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-min-capacity :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-max-capacity :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-pause :initarg :auto-pause :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-auto-pause :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-until-auto-pause :initarg
                         :seconds-until-auto-pause :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-seconds-until-auto-pause
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-action :initarg :timeout-action :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scaling-configuration-timeout-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-before-timeout :initarg
                         :seconds-before-timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-seconds-before-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scaling-configuration 'make-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-pause))
      (common-lisp:list
       (common-lisp:cons "AutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-until-auto-pause))
      (common-lisp:list
       (common-lisp:cons "SecondsUntilAutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scaling-configuration-info common-lisp:nil
                       ((min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-info-min-capacity
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-info-max-capacity
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-pause :initarg :auto-pause :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-info-auto-pause
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-until-auto-pause :initarg
                         :seconds-until-auto-pause :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-info-seconds-until-auto-pause
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-action :initarg :timeout-action :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scaling-configuration-info-timeout-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (seconds-before-timeout :initarg
                         :seconds-before-timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-scaling-configuration-info-seconds-before-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scaling-configuration-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-configuration-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scaling-configuration-info
                    'make-scaling-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-pause))
      (common-lisp:list
       (common-lisp:cons "AutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-until-auto-pause))
      (common-lisp:list
       (common-lisp:cons "SecondsUntilAutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration-info))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass serverless-v2scaling-configuration common-lisp:nil
                       ((min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-serverless-v2scaling-configuration-min-capacity
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-serverless-v2scaling-configuration-max-capacity
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-v2scaling-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'serverless-v2scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-v2scaling-configuration
                    'make-serverless-v2scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass serverless-v2scaling-configuration-info common-lisp:nil
                       ((min-capacity :initarg :min-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-serverless-v2scaling-configuration-info-min-capacity
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-serverless-v2scaling-configuration-info-max-capacity
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-serverless-v2scaling-configuration-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'serverless-v2scaling-configuration-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'serverless-v2scaling-configuration-info
                    'make-serverless-v2scaling-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition shared-snapshot-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'shared-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:deftype source-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition source-cluster-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-cluster-not-supported-fault)))
(common-lisp:progn
 (common-lisp:define-condition source-database-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-database-not-supported-fault)))
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-source-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition source-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass source-region common-lisp:nil
                       ((region-name :initarg :region-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-region-region-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-region-endpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-region-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supports-dbinstance-automated-backups-replication
                         :initarg
                         :supports-dbinstance-automated-backups-replication
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-source-region-supports-dbinstance-automated-backups-replication
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-region
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-region
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source-region 'make-source-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-dbinstance-automated-backups-replication))
      (common-lisp:list
       (common-lisp:cons "SupportsDBInstanceAutomatedBackupsReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-region-list ()
   '(trivial-types:proper-list source-region))
 (common-lisp:defun make-source-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass source-region-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-region-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-regions :initarg :source-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or source-region-list common-lisp:null)
                         :accessor
                         struct-shape-source-region-message-source-regions
                         :shape "SourceRegionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-region-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-region-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-region-message 'make-source-region-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-region-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-region-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-regions))
      (common-lisp:list
       (common-lisp:cons "SourceRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-region-message))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-activity-stream-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-activity-stream-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mode :initarg :mode :initform
                         (common-lisp:error ":mode is required") :type
                         (common-lisp:or activity-stream-mode common-lisp:null)
                         :accessor
                         struct-shape-start-activity-stream-request-mode :shape
                         "ActivityStreamMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         (common-lisp:error ":kms-key-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-activity-stream-request-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-start-activity-stream-request-apply-immediately
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-native-audit-fields-included :initarg
                         :engine-native-audit-fields-included :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-start-activity-stream-request-engine-native-audit-fields-included
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-activity-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-activity-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-activity-stream-request
                    'make-start-activity-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "EngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-activity-stream-response common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-activity-stream-response-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-stream-name :initarg :kinesis-stream-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-activity-stream-response-kinesis-stream-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or activity-stream-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-activity-stream-response-status
                         :shape "ActivityStreamStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or activity-stream-mode common-lisp:null)
                         :accessor
                         struct-shape-start-activity-stream-response-mode
                         :shape "ActivityStreamMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-activity-stream-response-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-native-audit-fields-included :initarg
                         :engine-native-audit-fields-included :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-start-activity-stream-response-engine-native-audit-fields-included
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-activity-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-activity-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-activity-stream-response
                    'make-start-activity-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "EngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-message 'make-start-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-start-dbcluster-result-dbcluster :shape
                         "DBCluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-result 'make-start-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbinstance-automated-backups-replication-message
                       common-lisp:nil
                       ((source-dbinstance-arn :initarg :source-dbinstance-arn
                         :initform
                         (common-lisp:error
                          ":source-dbinstance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-dbinstance-automated-backups-replication-message-source-dbinstance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-start-dbinstance-automated-backups-replication-message-backup-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-dbinstance-automated-backups-replication-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-dbinstance-automated-backups-replication-message-pre-signed-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dbinstance-automated-backups-replication-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dbinstance-automated-backups-replication-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-automated-backups-replication-message
                    'make-start-dbinstance-automated-backups-replication-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbinstance-automated-backups-replication-result
                       common-lisp:nil
                       ((dbinstance-automated-backup :initarg
                         :dbinstance-automated-backup :initform common-lisp:nil
                         :type
                         (common-lisp:or dbinstance-automated-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-dbinstance-automated-backups-replication-result-dbinstance-automated-backup
                         :shape "DBInstanceAutomatedBackup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dbinstance-automated-backups-replication-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-dbinstance-automated-backups-replication-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-automated-backups-replication-result
                    'make-start-dbinstance-automated-backups-replication-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-message 'make-start-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-start-dbinstance-result-dbinstance :shape
                         "DBInstance" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-dbinstance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-result 'make-start-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-task-message common-lisp:nil
                       ((export-task-identifier :initarg
                         :export-task-identifier :initform
                         (common-lisp:error
                          ":export-task-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-message-export-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         (common-lisp:error ":source-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-export-task-message-source-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-export-task-message-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         (common-lisp:error ":iam-role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-export-task-message-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         (common-lisp:error ":kms-key-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-export-task-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3prefix :initarg :s3prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-message-s3prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (export-only :initarg :export-only :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-message-export-only
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-export-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-task-message
                    'make-start-export-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-only))
      (common-lisp:list
       (common-lisp:cons "ExportOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-activity-stream-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-activity-stream-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-stop-activity-stream-request-apply-immediately
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-activity-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-activity-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-activity-stream-request
                    'make-stop-activity-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-activity-stream-response common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-activity-stream-response-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-stream-name :initarg :kinesis-stream-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-activity-stream-response-kinesis-stream-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or activity-stream-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-activity-stream-response-status
                         :shape "ActivityStreamStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-activity-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-activity-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-activity-stream-response
                    'make-stop-activity-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stop-dbcluster-message-dbcluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-dbcluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-message 'make-stop-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :initform
                         common-lisp:nil :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         struct-shape-stop-dbcluster-result-dbcluster :shape
                         "DBCluster" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-dbcluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-result 'make-stop-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbinstance-automated-backups-replication-message
                       common-lisp:nil
                       ((source-dbinstance-arn :initarg :source-dbinstance-arn
                         :initform
                         (common-lisp:error
                          ":source-dbinstance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stop-dbinstance-automated-backups-replication-message-source-dbinstance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-dbinstance-automated-backups-replication-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-dbinstance-automated-backups-replication-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-automated-backups-replication-message
                    'make-stop-dbinstance-automated-backups-replication-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbinstance-automated-backups-replication-result
                       common-lisp:nil
                       ((dbinstance-automated-backup :initarg
                         :dbinstance-automated-backup :initform common-lisp:nil
                         :type
                         (common-lisp:or dbinstance-automated-backup
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-dbinstance-automated-backups-replication-result-dbinstance-automated-backup
                         :shape "DBInstanceAutomatedBackup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-dbinstance-automated-backups-replication-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-dbinstance-automated-backups-replication-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-automated-backups-replication-result
                    'make-stop-dbinstance-automated-backups-replication-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stop-dbinstance-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbsnapshot-identifier :initarg :dbsnapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-dbinstance-message-dbsnapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-dbinstance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-message 'make-stop-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-stop-dbinstance-result-dbinstance :shape
                         "DBInstance" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-dbinstance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-result 'make-stop-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition storage-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition storage-type-not-available-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-type-not-available-fault)))
(common-lisp:progn
 (common-lisp:define-condition storage-type-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-type-not-supported-fault)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((subnet-identifier :initarg :subnet-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor struct-shape-subnet-subnet-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-outpost :initarg :subnet-outpost :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost common-lisp:null) :accessor
                         struct-shape-subnet-subnet-outpost :shape "Outpost"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-status :initarg :subnet-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subnet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-outpost))
      (common-lisp:list
       (common-lisp:cons "SubnetOutpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-already-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subscription-already-exist-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-already-exist-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-category-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-category-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype supported-character-sets-list ()
   '(trivial-types:proper-list character-set))
 (common-lisp:defun make-supported-character-sets-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list character-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-timezones-list ()
   '(trivial-types:proper-list timezone))
 (common-lisp:defun make-supported-timezones-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timezone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass switchover-blue-green-deployment-request common-lisp:nil
                       ((blue-green-deployment-identifier :initarg
                         :blue-green-deployment-identifier :initform
                         (common-lisp:error
                          ":blue-green-deployment-identifier is required")
                         :type
                         (common-lisp:or blue-green-deployment-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-switchover-blue-green-deployment-request-blue-green-deployment-identifier
                         :shape "BlueGreenDeploymentIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (switchover-timeout :initarg :switchover-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or switchover-timeout common-lisp:null)
                         :accessor
                         struct-shape-switchover-blue-green-deployment-request-switchover-timeout
                         :shape "SwitchoverTimeout" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-blue-green-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'switchover-blue-green-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-blue-green-deployment-request
                    'make-switchover-blue-green-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'switchover-timeout))
      (common-lisp:list
       (common-lisp:cons "SwitchoverTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass switchover-blue-green-deployment-response
                       common-lisp:nil
                       ((blue-green-deployment :initarg :blue-green-deployment
                         :initform common-lisp:nil :type
                         (common-lisp:or blue-green-deployment
                                         common-lisp:null)
                         :accessor
                         struct-shape-switchover-blue-green-deployment-response-blue-green-deployment
                         :shape "BlueGreenDeployment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-blue-green-deployment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'switchover-blue-green-deployment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-blue-green-deployment-response
                    'make-switchover-blue-green-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass switchover-detail common-lisp:nil
                       ((source-member :initarg :source-member :initform
                         common-lisp:nil :type
                         (common-lisp:or database-arn common-lisp:null)
                         :accessor struct-shape-switchover-detail-source-member
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-member :initarg :target-member :initform
                         common-lisp:nil :type
                         (common-lisp:or database-arn common-lisp:null)
                         :accessor struct-shape-switchover-detail-target-member
                         :shape "DatabaseArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or switchover-detail-status
                                         common-lisp:null)
                         :accessor struct-shape-switchover-detail-status :shape
                         "SwitchoverDetailStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'switchover-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-detail 'make-switchover-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input switchover-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input switchover-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-member))
      (common-lisp:list
       (common-lisp:cons "SourceMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-member))
      (common-lisp:list
       (common-lisp:cons "TargetMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input switchover-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype switchover-detail-list ()
   '(trivial-types:proper-list switchover-detail))
 (common-lisp:defun make-switchover-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list switchover-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype switchover-detail-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass switchover-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required")
                         :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-switchover-global-cluster-message-global-cluster-identifier
                         :shape "GlobalClusterIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-db-cluster-identifier :initarg
                         :target-db-cluster-identifier :initform
                         (common-lisp:error
                          ":target-db-cluster-identifier is required")
                         :type
                         (common-lisp:or dbcluster-identifier common-lisp:null)
                         :accessor
                         struct-shape-switchover-global-cluster-message-target-db-cluster-identifier
                         :shape "DBClusterIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-global-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'switchover-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-global-cluster-message
                    'make-switchover-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass switchover-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         struct-shape-switchover-global-cluster-result-global-cluster
                         :shape "GlobalCluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-global-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'switchover-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-global-cluster-result
                    'make-switchover-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass switchover-read-replica-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-switchover-read-replica-message-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-read-replica-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'switchover-read-replica-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-read-replica-message
                    'make-switchover-read-replica-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass switchover-read-replica-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :initform
                         common-lisp:nil :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         struct-shape-switchover-read-replica-result-dbinstance
                         :shape "DBInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-switchover-read-replica-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'switchover-read-replica-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'switchover-read-replica-result
                    'make-switchover-read-replica-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-result))
   common-lisp:nil))
(common-lisp:deftype switchover-timeout () 'common-lisp:integer)
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-list-message common-lisp:nil
                       ((tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-tag-list-message-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-list-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-list-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-list-message 'make-tag-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-list-message))
   common-lisp:nil))
(common-lisp:deftype target-dbcluster-parameter-group-name ()
  'common-lisp:string)
(common-lisp:deftype target-dbinstance-class () 'common-lisp:string)
(common-lisp:deftype target-dbparameter-group-name () 'common-lisp:string)
(common-lisp:deftype target-engine-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-list ()
   '(trivial-types:proper-list dbproxy-target-group))
 (common-lisp:defun make-target-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy-target-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-health common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or target-state common-lisp:null)
                         :accessor struct-shape-target-health-state :shape
                         "TargetState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or target-health-reason common-lisp:null)
                         :accessor struct-shape-target-health-reason :shape
                         "TargetHealthReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-target-health-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-health
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-health
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-health 'make-target-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-health))
   common-lisp:nil))
(common-lisp:deftype target-health-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-list ()
   '(trivial-types:proper-list dbproxy-target))
 (common-lisp:defun make-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-role () 'common-lisp:string)
(common-lisp:deftype target-state () 'common-lisp:string)
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tenant-database common-lisp:nil
                       ((tenant-database-create-time :initarg
                         :tenant-database-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-tenant-database-tenant-database-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-dbinstance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-tenant-dbname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-tenant-database-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-master-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-dbi-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tenant-database-resource-id :initarg
                         :tenant-database-resource-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-tenant-database-tenant-database-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-database-arn :initarg :tenant-database-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-tenant-database-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (character-set-name :initarg :character-set-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-character-set-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nchar-character-set-name :initarg
                         :nchar-character-set-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-tenant-database-nchar-character-set-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-tenant-database-deletion-protection
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          tenant-database-pending-modified-values
                          common-lisp:null)
                         :accessor
                         struct-shape-tenant-database-pending-modified-values
                         :shape "TenantDatabasePendingModifiedValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-tenant-database-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tenant-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tenant-database
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tenant-database 'make-tenant-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tenant-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tenant-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tenant-database-create-time))
      (common-lisp:list
       (common-lisp:cons "TenantDatabaseCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tenant-database-resource-id))
      (common-lisp:list
       (common-lisp:cons "TenantDatabaseResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-database-arn))
      (common-lisp:list
       (common-lisp:cons "TenantDatabaseARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tenant-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tenant-database-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tenant-database-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition tenant-database-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tenant-database-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass tenant-database-pending-modified-values common-lisp:nil
                       ((master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-tenant-database-pending-modified-values-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-dbname :initarg :tenant-dbname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tenant-database-pending-modified-values-tenant-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tenant-database-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tenant-database-pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tenant-database-pending-modified-values
                    'make-tenant-database-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tenant-database-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tenant-database-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-dbname))
      (common-lisp:list
       (common-lisp:cons "TenantDBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tenant-database-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tenant-database-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tenant-database-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype tenant-databases-list ()
   '(trivial-types:proper-list tenant-database))
 (common-lisp:defun make-tenant-databases-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tenant-database))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tenant-databases-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-tenant-databases-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-databases :initarg :tenant-databases :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-databases-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-tenant-databases-message-tenant-databases
                         :shape "TenantDatabasesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tenant-databases-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tenant-databases-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tenant-databases-message 'make-tenant-databases-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tenant-databases-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tenant-databases-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-databases))
      (common-lisp:list
       (common-lisp:cons "TenantDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tenant-databases-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timezone common-lisp:nil
                       ((timezone-name :initarg :timezone-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-timezone-timezone-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timezone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timezone
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'timezone 'make-timezone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timezone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timezone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone-name))
      (common-lisp:list
       (common-lisp:cons "TimezoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timezone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-dbengine-version-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-dbengine-version-fault)))
(common-lisp:progn
 (common-lisp:defclass upgrade-target common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-upgrade-target-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-upgrade-target-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-upgrade-target-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-upgrade :initarg :auto-upgrade :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-upgrade-target-auto-upgrade :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-major-version-upgrade :initarg
                         :is-major-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-is-major-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-engine-modes :initarg
                         :supported-engine-modes :initform common-lisp:nil
                         :type
                         (common-lisp:or engine-mode-list common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-supported-engine-modes
                         :shape "EngineModeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-parallel-query :initarg
                         :supports-parallel-query :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-supports-parallel-query
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-global-databases :initarg
                         :supports-global-databases :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-supports-global-databases
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-babelfish :initarg :supports-babelfish
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-supports-babelfish :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-local-write-forwarding :initarg
                         :supports-local-write-forwarding :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-supports-local-write-forwarding
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-integrations :initarg :supports-integrations
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-upgrade-target-supports-integrations
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'upgrade-target 'make-upgrade-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "IsMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-parallel-query))
      (common-lisp:list
       (common-lisp:cons "SupportsParallelQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-babelfish))
      (common-lisp:list
       (common-lisp:cons "SupportsBabelfish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-local-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "SupportsLocalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-integrations))
      (common-lisp:list
       (common-lisp:cons "SupportsIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-auth-config common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-auth-config-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-auth-config-user-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-scheme :initarg :auth-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-scheme common-lisp:null)
                         :accessor struct-shape-user-auth-config-auth-scheme
                         :shape "AuthScheme" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-auth-config-secret-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iamauth :initarg :iamauth :initform common-lisp:nil
                         :type (common-lisp:or iamauth-mode common-lisp:null)
                         :accessor struct-shape-user-auth-config-iamauth :shape
                         "IAMAuthMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-password-auth-type :initarg
                         :client-password-auth-type :initform common-lisp:nil
                         :type
                         (common-lisp:or client-password-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-auth-config-client-password-auth-type
                         :shape "ClientPasswordAuthType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-auth-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-auth-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-auth-config 'make-user-auth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-auth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-auth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamauth))
      (common-lisp:list
       (common-lisp:cons "IAMAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-password-auth-type))
      (common-lisp:list
       (common-lisp:cons "ClientPasswordAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-auth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-auth-config-info common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-auth-config-info-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-auth-config-info-user-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-scheme :initarg :auth-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-scheme common-lisp:null)
                         :accessor
                         struct-shape-user-auth-config-info-auth-scheme :shape
                         "AuthScheme" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-auth-config-info-secret-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iamauth :initarg :iamauth :initform common-lisp:nil
                         :type (common-lisp:or iamauth-mode common-lisp:null)
                         :accessor struct-shape-user-auth-config-info-iamauth
                         :shape "IAMAuthMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-password-auth-type :initarg
                         :client-password-auth-type :initform common-lisp:nil
                         :type
                         (common-lisp:or client-password-auth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-auth-config-info-client-password-auth-type
                         :shape "ClientPasswordAuthType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-auth-config-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-auth-config-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-auth-config-info 'make-user-auth-config-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-auth-config-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-auth-config-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamauth))
      (common-lisp:list
       (common-lisp:cons "IAMAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-password-auth-type))
      (common-lisp:list
       (common-lisp:cons "ClientPasswordAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-auth-config-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-auth-config-info-list ()
   '(trivial-types:proper-list user-auth-config-info))
 (common-lisp:defun make-user-auth-config-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-auth-config-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-auth-config-list ()
   '(trivial-types:proper-list user-auth-config))
 (common-lisp:defun make-user-auth-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-auth-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass valid-dbinstance-modifications-message common-lisp:nil
                       ((storage :initarg :storage :initform common-lisp:nil
                         :type
                         (common-lisp:or valid-storage-options-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-valid-dbinstance-modifications-message-storage
                         :shape "ValidStorageOptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (valid-processor-features :initarg
                         :valid-processor-features :initform common-lisp:nil
                         :type
                         (common-lisp:or available-processor-feature-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-valid-dbinstance-modifications-message-valid-processor-features
                         :shape "AvailableProcessorFeatureList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supports-dedicated-log-volume :initarg
                         :supports-dedicated-log-volume :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-valid-dbinstance-modifications-message-supports-dedicated-log-volume
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-valid-dbinstance-modifications-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'valid-dbinstance-modifications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'valid-dbinstance-modifications-message
                    'make-valid-dbinstance-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-processor-features))
      (common-lisp:list
       (common-lisp:cons "ValidProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-dedicated-log-volume))
      (common-lisp:list
       (common-lisp:cons "SupportsDedicatedLogVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass valid-storage-options common-lisp:nil
                       ((storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-valid-storage-options-storage-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-size :initarg :storage-size :initform
                         common-lisp:nil :type
                         (common-lisp:or range-list common-lisp:null) :accessor
                         struct-shape-valid-storage-options-storage-size :shape
                         "RangeList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioned-iops :initarg :provisioned-iops :initform
                         common-lisp:nil :type
                         (common-lisp:or range-list common-lisp:null) :accessor
                         struct-shape-valid-storage-options-provisioned-iops
                         :shape "RangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops-to-storage-ratio :initarg :iops-to-storage-ratio
                         :initform common-lisp:nil :type
                         (common-lisp:or double-range-list common-lisp:null)
                         :accessor
                         struct-shape-valid-storage-options-iops-to-storage-ratio
                         :shape "DoubleRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-storage-autoscaling :initarg
                         :supports-storage-autoscaling :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-valid-storage-options-supports-storage-autoscaling
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-storage-throughput :initarg
                         :provisioned-storage-throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or range-list common-lisp:null) :accessor
                         struct-shape-valid-storage-options-provisioned-storage-throughput
                         :shape "RangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-throughput-to-iops-ratio :initarg
                         :storage-throughput-to-iops-ratio :initform
                         common-lisp:nil :type
                         (common-lisp:or double-range-list common-lisp:null)
                         :accessor
                         struct-shape-valid-storage-options-storage-throughput-to-iops-ratio
                         :shape "DoubleRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-valid-storage-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'valid-storage-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'valid-storage-options 'make-valid-storage-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-size))
      (common-lisp:list
       (common-lisp:cons "StorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned-iops))
      (common-lisp:list
       (common-lisp:cons "ProvisionedIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iops-to-storage-ratio))
      (common-lisp:list
       (common-lisp:cons "IopsToStorageRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-autoscaling))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageAutoscaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-throughput-to-iops-ratio))
      (common-lisp:list
       (common-lisp:cons "StorageThroughputToIopsRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype valid-storage-options-list ()
   '(trivial-types:proper-list valid-storage-options))
 (common-lisp:defun make-valid-storage-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list valid-storage-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype valid-upgrade-target-list ()
   '(trivial-types:proper-list upgrade-target))
 (common-lisp:defun make-valid-upgrade-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-vpc-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-security-group-membership common-lisp:nil
                       ((vpc-security-group-id :initarg :vpc-security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpc-security-group-membership-vpc-security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-vpc-security-group-membership-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-security-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun make-vpc-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype write-forwarding-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-role-to-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-role-to-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToDBCluster"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'add-role-to-dbcluster))
(common-lisp:progn
 (common-lisp:defun add-role-to-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-role-to-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToDBInstance"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'add-role-to-dbinstance))
(common-lisp:progn
 (common-lisp:defun add-source-identifier-to-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-source-identifier-to-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddSourceIdentifierToSubscription"))
      common-lisp:nil "AddSourceIdentifierToSubscriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'add-source-identifier-to-subscription))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToResource"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun apply-pending-maintenance-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier apply-action
                     opt-in-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier apply-action opt-in-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-pending-maintenance-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ApplyPendingMaintenanceAction"))
      common-lisp:nil "ApplyPendingMaintenanceActionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'apply-pending-maintenance-action))
(common-lisp:progn
 (common-lisp:defun authorize-dbsecurity-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name cidrip
                     ec2security-group-name ec2security-group-id
                     ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name cidrip ec2security-group-name
     ec2security-group-id ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-dbsecurity-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeDBSecurityGroupIngress"))
      common-lisp:nil "AuthorizeDBSecurityGroupIngressResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'authorize-dbsecurity-group-ingress))
(common-lisp:progn
 (common-lisp:defun backtrack-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier backtrack-to force
                     use-earliest-time-on-point-in-time-unavailable)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier backtrack-to force
     use-earliest-time-on-point-in-time-unavailable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-backtrack-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BacktrackDBCluster"))
      common-lisp:nil "BacktrackDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'backtrack-dbcluster))
(common-lisp:progn
 (common-lisp:defun cancel-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-identifier)
   (common-lisp:declare (common-lisp:ignorable export-task-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-export-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelExportTask"))
      common-lisp:nil "CancelExportTaskResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'cancel-export-task))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     source-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-copy-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBClusterParameterGroup"))
      common-lisp:nil "CopyDBClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'copy-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbcluster-snapshot-identifier
                     target-dbcluster-snapshot-identifier kms-key-id
                     pre-signed-url copy-tags tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-snapshot-identifier
     target-dbcluster-snapshot-identifier kms-key-id pre-signed-url copy-tags
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbcluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBClusterSnapshot"))
      common-lisp:nil "CopyDBClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'copy-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun copy-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbparameter-group-identifier
                     target-dbparameter-group-identifier
                     target-dbparameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbparameter-group-identifier
     target-dbparameter-group-identifier target-dbparameter-group-description
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBParameterGroup"))
      common-lisp:nil "CopyDBParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'copy-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun copy-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbsnapshot-identifier
                     target-dbsnapshot-identifier kms-key-id tags copy-tags
                     pre-signed-url option-group-name
                     target-custom-availability-zone copy-option-group)
   (common-lisp:declare
    (common-lisp:ignorable source-dbsnapshot-identifier
     target-dbsnapshot-identifier kms-key-id tags copy-tags pre-signed-url
     option-group-name target-custom-availability-zone copy-option-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBSnapshot"))
      common-lisp:nil "CopyDBSnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'copy-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun copy-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-option-group-identifier
                     target-option-group-identifier
                     target-option-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-option-group-identifier
     target-option-group-identifier target-option-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyOptionGroup"))
      common-lisp:nil "CopyOptionGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'copy-option-group))
(common-lisp:progn
 (common-lisp:defun create-blue-green-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-name source
                     target-engine-version target-dbparameter-group-name
                     target-dbcluster-parameter-group-name tags
                     target-dbinstance-class upgrade-target-storage-config)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-name source
     target-engine-version target-dbparameter-group-name
     target-dbcluster-parameter-group-name tags target-dbinstance-class
     upgrade-target-storage-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-blue-green-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBlueGreenDeployment"))
      common-lisp:nil "CreateBlueGreenDeploymentResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-blue-green-deployment))
(common-lisp:progn
 (common-lisp:defun create-custom-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     database-installation-files-s3bucket-name
                     database-installation-files-s3prefix image-id kmskey-id
                     description manifest tags
                     source-custom-db-engine-version-identifier
                     use-aws-provided-latest-image)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version
     database-installation-files-s3bucket-name
     database-installation-files-s3prefix image-id kmskey-id description
     manifest tags source-custom-db-engine-version-identifier
     use-aws-provided-latest-image))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-dbengine-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomDBEngineVersion"))
      common-lisp:nil "CreateCustomDBEngineVersionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-custom-dbengine-version))
(common-lisp:progn
 (common-lisp:defun create-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones
                     backup-retention-period character-set-name database-name
                     dbcluster-identifier dbcluster-parameter-group-name
                     vpc-security-group-ids dbsubnet-group-name engine
                     engine-version port master-username master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window replication-source-identifier
                     tags storage-encrypted kms-key-id pre-signed-url
                     enable-iamdatabase-authentication backtrack-window
                     enable-cloudwatch-logs-exports engine-mode
                     scaling-configuration rds-custom-cluster-configuration
                     deletion-protection global-cluster-identifier
                     enable-http-endpoint copy-tags-to-snapshot domain
                     domain-iamrole-name enable-global-write-forwarding
                     dbcluster-instance-class allocated-storage storage-type
                     iops publicly-accessible auto-minor-version-upgrade
                     monitoring-interval monitoring-role-arn
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-limitless-database
                     serverless-v2scaling-configuration network-type
                     dbsystem-id manage-master-user-password
                     master-user-secret-kms-key-id
                     enable-local-write-forwarding cacertificate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones backup-retention-period
     character-set-name database-name dbcluster-identifier
     dbcluster-parameter-group-name vpc-security-group-ids dbsubnet-group-name
     engine engine-version port master-username master-user-password
     option-group-name preferred-backup-window preferred-maintenance-window
     replication-source-identifier tags storage-encrypted kms-key-id
     pre-signed-url enable-iamdatabase-authentication backtrack-window
     enable-cloudwatch-logs-exports engine-mode scaling-configuration
     rds-custom-cluster-configuration deletion-protection
     global-cluster-identifier enable-http-endpoint copy-tags-to-snapshot
     domain domain-iamrole-name enable-global-write-forwarding
     dbcluster-instance-class allocated-storage storage-type iops
     publicly-accessible auto-minor-version-upgrade monitoring-interval
     monitoring-role-arn enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     enable-limitless-database serverless-v2scaling-configuration network-type
     dbsystem-id manage-master-user-password master-user-secret-kms-key-id
     enable-local-write-forwarding cacertificate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBCluster"))
      common-lisp:nil "CreateDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-dbcluster))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-endpoint-identifier endpoint-type static-members
                     excluded-members tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-endpoint-identifier
     endpoint-type static-members excluded-members tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterEndpoint"))
      common-lisp:nil "CreateDBClusterEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name
     dbparameter-group-family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterParameterGroup"))
      common-lisp:nil "CreateDBClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     dbcluster-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier dbcluster-identifier
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterSnapshot"))
      common-lisp:nil "CreateDBClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname dbinstance-identifier
                     allocated-storage dbinstance-class engine master-username
                     master-user-password dbsecurity-groups
                     vpc-security-group-ids availability-zone
                     dbsubnet-group-name preferred-maintenance-window
                     dbparameter-group-name backup-retention-period
                     preferred-backup-window port multi-az engine-version
                     auto-minor-version-upgrade license-model iops
                     option-group-name character-set-name
                     nchar-character-set-name publicly-accessible tags
                     dbcluster-identifier storage-type tde-credential-arn
                     tde-credential-password storage-encrypted kms-key-id
                     domain domain-fqdn domain-ou domain-auth-secret-arn
                     domain-dns-ips copy-tags-to-snapshot monitoring-interval
                     monitoring-role-arn domain-iamrole-name promotion-tier
                     timezone enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-cloudwatch-logs-exports processor-features
                     deletion-protection max-allocated-storage
                     enable-customer-owned-ip custom-iam-instance-profile
                     backup-target network-type storage-throughput
                     manage-master-user-password master-user-secret-kms-key-id
                     cacertificate-identifier dbsystem-id dedicated-log-volume
                     multi-tenant)
   (common-lisp:declare
    (common-lisp:ignorable dbname dbinstance-identifier allocated-storage
     dbinstance-class engine master-username master-user-password
     dbsecurity-groups vpc-security-group-ids availability-zone
     dbsubnet-group-name preferred-maintenance-window dbparameter-group-name
     backup-retention-period preferred-backup-window port multi-az
     engine-version auto-minor-version-upgrade license-model iops
     option-group-name character-set-name nchar-character-set-name
     publicly-accessible tags dbcluster-identifier storage-type
     tde-credential-arn tde-credential-password storage-encrypted kms-key-id
     domain domain-fqdn domain-ou domain-auth-secret-arn domain-dns-ips
     copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     domain-iamrole-name promotion-tier timezone
     enable-iamdatabase-authentication enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     enable-cloudwatch-logs-exports processor-features deletion-protection
     max-allocated-storage enable-customer-owned-ip custom-iam-instance-profile
     backup-target network-type storage-throughput manage-master-user-password
     master-user-secret-kms-key-id cacertificate-identifier dbsystem-id
     dedicated-log-volume multi-tenant))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBInstance"))
      common-lisp:nil "CreateDBInstanceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-dbinstance))
(common-lisp:progn
 (common-lisp:defun create-dbinstance-read-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     source-dbinstance-identifier dbinstance-class
                     availability-zone port multi-az auto-minor-version-upgrade
                     iops option-group-name dbparameter-group-name
                     publicly-accessible tags dbsubnet-group-name
                     vpc-security-group-ids storage-type copy-tags-to-snapshot
                     monitoring-interval monitoring-role-arn kms-key-id
                     pre-signed-url enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features deletion-protection domain
                     domain-iamrole-name domain-fqdn domain-ou
                     domain-auth-secret-arn domain-dns-ips replica-mode
                     max-allocated-storage custom-iam-instance-profile
                     network-type storage-throughput enable-customer-owned-ip
                     allocated-storage source-dbcluster-identifier
                     dedicated-log-volume upgrade-storage-config)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier source-dbinstance-identifier
     dbinstance-class availability-zone port multi-az
     auto-minor-version-upgrade iops option-group-name dbparameter-group-name
     publicly-accessible tags dbsubnet-group-name vpc-security-group-ids
     storage-type copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     kms-key-id pre-signed-url enable-iamdatabase-authentication
     enable-performance-insights performance-insights-kmskey-id
     performance-insights-retention-period enable-cloudwatch-logs-exports
     processor-features use-default-processor-features deletion-protection
     domain domain-iamrole-name domain-fqdn domain-ou domain-auth-secret-arn
     domain-dns-ips replica-mode max-allocated-storage
     custom-iam-instance-profile network-type storage-throughput
     enable-customer-owned-ip allocated-storage source-dbcluster-identifier
     dedicated-log-volume upgrade-storage-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbinstance-read-replica-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBInstanceReadReplica"))
      common-lisp:nil "CreateDBInstanceReadReplicaResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbinstance-read-replica))
(common-lisp:progn
 (common-lisp:defun create-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name dbparameter-group-family
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBParameterGroup"))
      common-lisp:nil "CreateDBParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbproxy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name engine-family auth role-arn
                     vpc-subnet-ids vpc-security-group-ids require-tls
                     idle-client-timeout debug-logging tags)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name engine-family auth role-arn
     vpc-subnet-ids vpc-security-group-ids require-tls idle-client-timeout
     debug-logging tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbproxy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBProxy"))
      common-lisp:nil "CreateDBProxyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-dbproxy))
(common-lisp:progn
 (common-lisp:defun create-dbproxy-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name dbproxy-endpoint-name
                     vpc-subnet-ids vpc-security-group-ids target-role tags)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name dbproxy-endpoint-name vpc-subnet-ids
     vpc-security-group-ids target-role tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbproxy-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBProxyEndpoint"))
      common-lisp:nil "CreateDBProxyEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbproxy-endpoint))
(common-lisp:progn
 (common-lisp:defun create-dbsecurity-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name
                     dbsecurity-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name dbsecurity-group-description
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsecurity-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSecurityGroup"))
      common-lisp:nil "CreateDBSecurityGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbsecurity-group))
(common-lisp:progn
 (common-lisp:defun create-dbshard-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbshard-group-identifier
                     dbcluster-identifier compute-redundancy max-acu
                     publicly-accessible)
   (common-lisp:declare
    (common-lisp:ignorable dbshard-group-identifier dbcluster-identifier
     compute-redundancy max-acu publicly-accessible))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbshard-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBShardGroup"))
      common-lisp:nil "CreateDBShardGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-dbshard-group))
(common-lisp:progn
 (common-lisp:defun create-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier
                     dbinstance-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsnapshot-identifier dbinstance-identifier tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSnapshot"))
      common-lisp:nil "CreateDBSnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun create-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSubnetGroup"))
      common-lisp:nil "CreateDBSubnetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories source-ids enabled tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories source-ids enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventSubscription"))
      common-lisp:nil "CreateEventSubscriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     source-dbcluster-identifier engine engine-version
                     deletion-protection database-name storage-encrypted)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     source-dbcluster-identifier engine engine-version deletion-protection
     database-name storage-encrypted))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGlobalCluster"))
      common-lisp:nil "CreateGlobalClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-global-cluster))
(common-lisp:progn
 (common-lisp:defun create-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-arn target-arn integration-name
                     kmskey-id additional-encryption-context tags)
   (common-lisp:declare
    (common-lisp:ignorable source-arn target-arn integration-name kmskey-id
     additional-encryption-context tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-integration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateIntegration"))
      common-lisp:nil "CreateIntegrationResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-integration))
(common-lisp:progn
 (common-lisp:defun create-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name engine-name
                     major-engine-version option-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable option-group-name engine-name major-engine-version
     option-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOptionGroup"))
      common-lisp:nil "CreateOptionGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-option-group))
(common-lisp:progn
 (common-lisp:defun create-tenant-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier tenant-dbname
                     master-username master-user-password character-set-name
                     nchar-character-set-name tags)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier tenant-dbname master-username
     master-user-password character-set-name nchar-character-set-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tenant-database-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTenantDatabase"))
      common-lisp:nil "CreateTenantDatabaseResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-tenant-database))
(common-lisp:progn
 (common-lisp:defun delete-blue-green-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-identifier
                     delete-target)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-identifier delete-target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-blue-green-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBlueGreenDeployment"))
      common-lisp:nil "DeleteBlueGreenDeploymentResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-blue-green-deployment))
(common-lisp:progn
 (common-lisp:defun delete-custom-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version)
   (common-lisp:declare (common-lisp:ignorable engine engine-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-dbengine-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomDBEngineVersion"))
      common-lisp:nil "DeleteCustomDBEngineVersionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-custom-dbengine-version))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier skip-final-snapshot
                     final-dbsnapshot-identifier delete-automated-backups)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier skip-final-snapshot
     final-dbsnapshot-identifier delete-automated-backups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBCluster"))
      common-lisp:nil "DeleteDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbcluster))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-automated-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-cluster-resource-id)
   (common-lisp:declare (common-lisp:ignorable db-cluster-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-automated-backup-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterAutomatedBackup"))
      common-lisp:nil "DeleteDBClusterAutomatedBackupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-dbcluster-automated-backup))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-endpoint-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-endpoint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterEndpoint"))
      common-lisp:nil "DeleteDBClusterEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbcluster-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterSnapshot"))
      common-lisp:nil "DeleteDBClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier skip-final-snapshot
                     final-dbsnapshot-identifier delete-automated-backups)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier skip-final-snapshot
     final-dbsnapshot-identifier delete-automated-backups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBInstance"))
      common-lisp:nil "DeleteDBInstanceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbinstance))
(common-lisp:progn
 (common-lisp:defun delete-dbinstance-automated-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbi-resource-id
                     dbinstance-automated-backups-arn)
   (common-lisp:declare
    (common-lisp:ignorable dbi-resource-id dbinstance-automated-backups-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbinstance-automated-backup-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBInstanceAutomatedBackup"))
      common-lisp:nil "DeleteDBInstanceAutomatedBackupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-dbinstance-automated-backup))
(common-lisp:progn
 (common-lisp:defun delete-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbparameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbproxy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name)
   (common-lisp:declare (common-lisp:ignorable dbproxy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbproxy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBProxy"))
      common-lisp:nil "DeleteDBProxyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbproxy))
(common-lisp:progn
 (common-lisp:defun delete-dbproxy-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-endpoint-name)
   (common-lisp:declare (common-lisp:ignorable dbproxy-endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbproxy-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBProxyEndpoint"))
      common-lisp:nil "DeleteDBProxyEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-dbproxy-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-dbsecurity-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name)
   (common-lisp:declare (common-lisp:ignorable dbsecurity-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsecurity-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbsecurity-group))
(common-lisp:progn
 (common-lisp:defun delete-dbshard-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbshard-group-identifier)
   (common-lisp:declare (common-lisp:ignorable dbshard-group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbshard-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBShardGroup"))
      common-lisp:nil "DeleteDBShardGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbshard-group))
(common-lisp:progn
 (common-lisp:defun delete-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSnapshot"))
      common-lisp:nil "DeleteDBSnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun delete-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name)
   (common-lisp:declare (common-lisp:ignorable dbsubnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventSubscription"))
      common-lisp:nil "DeleteEventSubscriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable global-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGlobalCluster"))
      common-lisp:nil "DeleteGlobalClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-global-cluster))
(common-lisp:progn
 (common-lisp:defun delete-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key integration-identifier)
   (common-lisp:declare (common-lisp:ignorable integration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-integration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIntegration"))
      common-lisp:nil "DeleteIntegrationResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-integration))
(common-lisp:progn
 (common-lisp:defun delete-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name)
   (common-lisp:declare (common-lisp:ignorable option-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOptionGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-option-group))
(common-lisp:progn
 (common-lisp:defun delete-tenant-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier tenant-dbname
                     skip-final-snapshot final-dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier tenant-dbname
     skip-final-snapshot final-dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tenant-database-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTenantDatabase"))
      common-lisp:nil "DeleteTenantDatabaseResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-tenant-database))
(common-lisp:progn
 (common-lisp:defun deregister-dbproxy-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name
                     dbinstance-identifiers dbcluster-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name
     dbinstance-identifiers dbcluster-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-dbproxy-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterDBProxyTargets"))
      common-lisp:nil "DeregisterDBProxyTargetsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'deregister-dbproxy-targets))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'rds-request :method "POST" :path "/"
                                :operation "DescribeAccountAttributes"))
    common-lisp:nil "DescribeAccountAttributesResult" *error-map*))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-blue-green-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-blue-green-deployments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBlueGreenDeployments"))
      common-lisp:nil "DescribeBlueGreenDeploymentsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-blue-green-deployments))
(common-lisp:progn
 (common-lisp:defun describe-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable certificate-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificates"))
      common-lisp:nil "DescribeCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-certificates))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-automated-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-cluster-resource-id
                     dbcluster-identifier filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable db-cluster-resource-id dbcluster-identifier filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-automated-backups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterAutomatedBackups"))
      common-lisp:nil "DescribeDBClusterAutomatedBackupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-automated-backups))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-backtracks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier backtrack-identifier
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier backtrack-identifier filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-backtracks-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterBacktracks"))
      common-lisp:nil "DescribeDBClusterBacktracksResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-backtracks))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-endpoint-identifier filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-endpoint-identifier
     filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-endpoints-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterEndpoints"))
      common-lisp:nil "DescribeDBClusterEndpointsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterParameterGroups"))
      common-lisp:nil "DescribeDBClusterParameterGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name source
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name source filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterParameters"))
      common-lisp:nil "DescribeDBClusterParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshot-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshot-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterSnapshotAttributes"))
      common-lisp:nil "DescribeDBClusterSnapshotAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-snapshot-attributes))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-snapshot-identifier snapshot-type filters
                     max-records marker include-shared include-public
                     db-cluster-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-snapshot-identifier
     snapshot-type filters max-records marker include-shared include-public
     db-cluster-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterSnapshots"))
      common-lisp:nil "DescribeDBClusterSnapshotsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbcluster-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-dbclusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier filters max-records
                     marker include-shared)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier filters max-records marker
     include-shared))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbclusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusters"))
      common-lisp:nil "DescribeDBClustersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-dbclusters))
(common-lisp:progn
 (common-lisp:defun describe-dbengine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     dbparameter-group-family filters max-records marker
                     default-only list-supported-character-sets
                     list-supported-timezones include-all)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbparameter-group-family
     filters max-records marker default-only list-supported-character-sets
     list-supported-timezones include-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbengine-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBEngineVersions"))
      common-lisp:nil "DescribeDBEngineVersionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbengine-versions))
(common-lisp:progn
 (common-lisp:defun describe-dbinstance-automated-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbi-resource-id dbinstance-identifier
                     filters max-records marker
                     dbinstance-automated-backups-arn)
   (common-lisp:declare
    (common-lisp:ignorable dbi-resource-id dbinstance-identifier filters
     max-records marker dbinstance-automated-backups-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbinstance-automated-backups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBInstanceAutomatedBackups"))
      common-lisp:nil "DescribeDBInstanceAutomatedBackupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbinstance-automated-backups))
(common-lisp:progn
 (common-lisp:defun describe-dbinstances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbinstances-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBInstances"))
      common-lisp:nil "DescribeDBInstancesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbinstances))
(common-lisp:progn
 (common-lisp:defun describe-dblog-files
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier filename-contains
                     file-last-written file-size filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier filename-contains
     file-last-written file-size filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dblog-files-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBLogFiles"))
      common-lisp:nil "DescribeDBLogFilesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-dblog-files))
(common-lisp:progn
 (common-lisp:defun describe-dbparameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbparameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBParameterGroups"))
      common-lisp:nil "DescribeDBParameterGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbparameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbparameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name source filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name source filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbparameters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBParameters"))
      common-lisp:nil "DescribeDBParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbparameters))
(common-lisp:progn
 (common-lisp:defun describe-dbproxies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name filters marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbproxies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxies"))
      common-lisp:nil "DescribeDBProxiesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-dbproxies))
(common-lisp:progn
 (common-lisp:defun describe-dbproxy-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name dbproxy-endpoint-name
                     filters marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name dbproxy-endpoint-name filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbproxy-endpoints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxyEndpoints"))
      common-lisp:nil "DescribeDBProxyEndpointsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbproxy-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-dbproxy-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbproxy-target-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxyTargetGroups"))
      common-lisp:nil "DescribeDBProxyTargetGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbproxy-target-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbproxy-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbproxy-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxyTargets"))
      common-lisp:nil "DescribeDBProxyTargetsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbproxy-targets))
(common-lisp:progn
 (common-lisp:defun describe-dbrecommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key last-updated-after last-updated-before
                     locale filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable last-updated-after last-updated-before locale
     filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbrecommendations-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBRecommendations"))
      common-lisp:nil "DescribeDBRecommendationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbrecommendations))
(common-lisp:progn
 (common-lisp:defun describe-dbsecurity-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbsecurity-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSecurityGroups"))
      common-lisp:nil "DescribeDBSecurityGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbsecurity-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbshard-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbshard-group-identifier filters marker
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbshard-group-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbshard-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBShardGroups"))
      common-lisp:nil "DescribeDBShardGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbshard-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbsnapshot-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbsnapshot-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSnapshotAttributes"))
      common-lisp:nil "DescribeDBSnapshotAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbsnapshot-attributes))
(common-lisp:progn
 (common-lisp:defun describe-dbsnapshot-tenant-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier snapshot-type filters max-records
                     marker dbi-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier
     snapshot-type filters max-records marker dbi-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbsnapshot-tenant-databases-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSnapshotTenantDatabases"))
      common-lisp:nil "DescribeDBSnapshotTenantDatabasesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbsnapshot-tenant-databases))
(common-lisp:progn
 (common-lisp:defun describe-dbsnapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier snapshot-type filters max-records
                     marker include-shared include-public dbi-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier
     snapshot-type filters max-records marker include-shared include-public
     dbi-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbsnapshots-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSnapshots"))
      common-lisp:nil "DescribeDBSnapshotsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbsnapshots))
(common-lisp:progn
 (common-lisp:defun describe-dbsubnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbsubnet-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSubnetGroups"))
      common-lisp:nil "DescribeDBSubnetGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-dbsubnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultClusterParameters"))
      common-lisp:nil "DescribeEngineDefaultClusterParametersResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-engine-default-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultParameters"))
      common-lisp:nil "DescribeEngineDefaultParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-engine-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type filters)
   (common-lisp:declare (common-lisp:ignorable source-type filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventCategories"))
      common-lisp:nil "DescribeEventCategoriesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventSubscriptions"))
      common-lisp:nil "DescribeEventSubscriptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration event-categories filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration event-categories filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"))
      common-lisp:nil "DescribeEventsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-identifier source-arn filters
                     marker max-records source-type)
   (common-lisp:declare
    (common-lisp:ignorable export-task-identifier source-arn filters marker
     max-records source-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportTasks"))
      common-lisp:nil "DescribeExportTasksResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-global-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-global-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeGlobalClusters"))
      common-lisp:nil "DescribeGlobalClustersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-global-clusters))
(common-lisp:progn
 (common-lisp:defun describe-integrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key integration-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable integration-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-integrations-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIntegrations"))
      common-lisp:nil "DescribeIntegrationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-integrations))
(common-lisp:progn
 (common-lisp:defun describe-option-group-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-name major-engine-version filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable engine-name major-engine-version filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-option-group-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOptionGroupOptions"))
      common-lisp:nil "DescribeOptionGroupOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-option-group-options))
(common-lisp:progn
 (common-lisp:defun describe-option-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name filters marker
                     max-records engine-name major-engine-version)
   (common-lisp:declare
    (common-lisp:ignorable option-group-name filters marker max-records
     engine-name major-engine-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-option-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOptionGroups"))
      common-lisp:nil "DescribeOptionGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-option-groups))
(common-lisp:progn
 (common-lisp:defun describe-orderable-dbinstance-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version dbinstance-class
                     license-model availability-zone-group vpc filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbinstance-class license-model
     availability-zone-group vpc filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-dbinstance-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrderableDBInstanceOptions"))
      common-lisp:nil "DescribeOrderableDBInstanceOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-orderable-dbinstance-options))
(common-lisp:progn
 (common-lisp:defun describe-pending-maintenance-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier filters marker
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pending-maintenance-actions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePendingMaintenanceActions"))
      common-lisp:nil "DescribePendingMaintenanceActionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-pending-maintenance-actions))
(common-lisp:progn
 (common-lisp:defun describe-reserved-dbinstances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-dbinstance-id
                     reserved-dbinstances-offering-id dbinstance-class duration
                     product-description offering-type multi-az lease-id
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-dbinstance-id
     reserved-dbinstances-offering-id dbinstance-class duration
     product-description offering-type multi-az lease-id filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-dbinstances-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedDBInstances"))
      common-lisp:nil "DescribeReservedDBInstancesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-dbinstances))
(common-lisp:progn
 (common-lisp:defun describe-reserved-dbinstances-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-dbinstances-offering-id
                     dbinstance-class duration product-description
                     offering-type multi-az filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-dbinstances-offering-id dbinstance-class
     duration product-description offering-type multi-az filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-dbinstances-offerings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedDBInstancesOfferings"))
      common-lisp:nil "DescribeReservedDBInstancesOfferingsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-dbinstances-offerings))
(common-lisp:progn
 (common-lisp:defun describe-source-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region-name max-records marker filters)
   (common-lisp:declare
    (common-lisp:ignorable region-name max-records marker filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-source-regions-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSourceRegions"))
      common-lisp:nil "DescribeSourceRegionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-source-regions))
(common-lisp:progn
 (common-lisp:defun describe-tenant-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier tenant-dbname
                     filters marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier tenant-dbname filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-tenant-databases-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTenantDatabases"))
      common-lisp:nil "DescribeTenantDatabasesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-tenant-databases))
(common-lisp:progn
 (common-lisp:defun describe-valid-dbinstance-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-valid-dbinstance-modifications-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeValidDBInstanceModifications"))
      common-lisp:nil "DescribeValidDBInstanceModificationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-valid-dbinstance-modifications))
(common-lisp:progn
 (common-lisp:defun disable-http-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-http-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableHttpEndpoint"))
      common-lisp:nil "DisableHttpEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'disable-http-endpoint))
(common-lisp:progn
 (common-lisp:defun download-dblog-file-portion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier log-file-name
                     marker number-of-lines)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier log-file-name marker
     number-of-lines))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-download-dblog-file-portion-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DownloadDBLogFilePortion"))
      common-lisp:nil "DownloadDBLogFilePortionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'download-dblog-file-portion))
(common-lisp:progn
 (common-lisp:defun enable-http-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-http-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableHttpEndpoint"))
      common-lisp:nil "EnableHttpEndpointResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'enable-http-endpoint))
(common-lisp:progn
 (common-lisp:defun failover-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     target-dbinstance-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier target-dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverDBCluster"))
      common-lisp:nil "FailoverDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'failover-dbcluster))
(common-lisp:progn
 (common-lisp:defun failover-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     target-db-cluster-identifier allow-data-loss switchover)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     target-db-cluster-identifier allow-data-loss switchover))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverGlobalCluster"))
      common-lisp:nil "FailoverGlobalClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'failover-global-cluster))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name filters)
   (common-lisp:declare (common-lisp:ignorable resource-name filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-activity-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn audit-policy-state)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn audit-policy-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-activity-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyActivityStream"))
      common-lisp:nil "ModifyActivityStreamResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-activity-stream))
(common-lisp:progn
 (common-lisp:defun modify-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-identifier
                     remove-customer-override)
   (common-lisp:declare
    (common-lisp:ignorable certificate-identifier remove-customer-override))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-certificates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCertificates"))
      common-lisp:nil "ModifyCertificatesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-certificates))
(common-lisp:progn
 (common-lisp:defun modify-current-dbcluster-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier capacity
                     seconds-before-timeout timeout-action)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier capacity seconds-before-timeout
     timeout-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-current-dbcluster-capacity-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCurrentDBClusterCapacity"))
      common-lisp:nil "ModifyCurrentDBClusterCapacityResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-current-dbcluster-capacity))
(common-lisp:progn
 (common-lisp:defun modify-custom-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version description status)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version description status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-custom-dbengine-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCustomDBEngineVersion"))
      common-lisp:nil "ModifyCustomDBEngineVersionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-custom-dbengine-version))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     new-dbcluster-identifier apply-immediately
                     backup-retention-period dbcluster-parameter-group-name
                     vpc-security-group-ids port master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window
                     enable-iamdatabase-authentication backtrack-window
                     cloudwatch-logs-export-configuration engine-version
                     allow-major-version-upgrade
                     dbinstance-parameter-group-name domain domain-iamrole-name
                     scaling-configuration deletion-protection
                     enable-http-endpoint copy-tags-to-snapshot
                     enable-global-write-forwarding dbcluster-instance-class
                     allocated-storage storage-type iops
                     auto-minor-version-upgrade monitoring-interval
                     monitoring-role-arn enable-performance-insights
                     performance-insights-kmskey-id
                     performance-insights-retention-period
                     serverless-v2scaling-configuration network-type
                     manage-master-user-password rotate-master-user-password
                     master-user-secret-kms-key-id engine-mode
                     allow-engine-mode-change enable-local-write-forwarding
                     aws-backup-recovery-point-arn enable-limitless-database
                     cacertificate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier new-dbcluster-identifier
     apply-immediately backup-retention-period dbcluster-parameter-group-name
     vpc-security-group-ids port master-user-password option-group-name
     preferred-backup-window preferred-maintenance-window
     enable-iamdatabase-authentication backtrack-window
     cloudwatch-logs-export-configuration engine-version
     allow-major-version-upgrade dbinstance-parameter-group-name domain
     domain-iamrole-name scaling-configuration deletion-protection
     enable-http-endpoint copy-tags-to-snapshot enable-global-write-forwarding
     dbcluster-instance-class allocated-storage storage-type iops
     auto-minor-version-upgrade monitoring-interval monitoring-role-arn
     enable-performance-insights performance-insights-kmskey-id
     performance-insights-retention-period serverless-v2scaling-configuration
     network-type manage-master-user-password rotate-master-user-password
     master-user-secret-kms-key-id engine-mode allow-engine-mode-change
     enable-local-write-forwarding aws-backup-recovery-point-arn
     enable-limitless-database cacertificate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBCluster"))
      common-lisp:nil "ModifyDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-dbcluster))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-endpoint-identifier
                     endpoint-type static-members excluded-members)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-endpoint-identifier endpoint-type
     static-members excluded-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterEndpoint"))
      common-lisp:nil "ModifyDBClusterEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterParameterGroup"))
      common-lisp:nil "ModifyDBClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     attribute-name values-to-add values-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier attribute-name
     values-to-add values-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-snapshot-attribute-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterSnapshotAttribute"))
      common-lisp:nil "ModifyDBClusterSnapshotAttributeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbcluster-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier allocated-storage
                     dbinstance-class dbsubnet-group-name dbsecurity-groups
                     vpc-security-group-ids apply-immediately
                     master-user-password dbparameter-group-name
                     backup-retention-period preferred-backup-window
                     preferred-maintenance-window multi-az engine-version
                     allow-major-version-upgrade auto-minor-version-upgrade
                     license-model iops option-group-name
                     new-dbinstance-identifier storage-type tde-credential-arn
                     tde-credential-password cacertificate-identifier domain
                     domain-fqdn domain-ou domain-auth-secret-arn
                     domain-dns-ips copy-tags-to-snapshot monitoring-interval
                     dbport-number publicly-accessible monitoring-role-arn
                     domain-iamrole-name disable-domain promotion-tier
                     enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     cloudwatch-logs-export-configuration processor-features
                     use-default-processor-features deletion-protection
                     max-allocated-storage certificate-rotation-restart
                     replica-mode enable-customer-owned-ip
                     aws-backup-recovery-point-arn automation-mode
                     resume-full-automation-mode-minutes network-type
                     storage-throughput manage-master-user-password
                     rotate-master-user-password master-user-secret-kms-key-id
                     engine dedicated-log-volume multi-tenant)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier allocated-storage
     dbinstance-class dbsubnet-group-name dbsecurity-groups
     vpc-security-group-ids apply-immediately master-user-password
     dbparameter-group-name backup-retention-period preferred-backup-window
     preferred-maintenance-window multi-az engine-version
     allow-major-version-upgrade auto-minor-version-upgrade license-model iops
     option-group-name new-dbinstance-identifier storage-type
     tde-credential-arn tde-credential-password cacertificate-identifier domain
     domain-fqdn domain-ou domain-auth-secret-arn domain-dns-ips
     copy-tags-to-snapshot monitoring-interval dbport-number
     publicly-accessible monitoring-role-arn domain-iamrole-name disable-domain
     promotion-tier enable-iamdatabase-authentication
     enable-performance-insights performance-insights-kmskey-id
     performance-insights-retention-period cloudwatch-logs-export-configuration
     processor-features use-default-processor-features deletion-protection
     max-allocated-storage certificate-rotation-restart replica-mode
     enable-customer-owned-ip aws-backup-recovery-point-arn automation-mode
     resume-full-automation-mode-minutes network-type storage-throughput
     manage-master-user-password rotate-master-user-password
     master-user-secret-kms-key-id engine dedicated-log-volume multi-tenant))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBInstance"))
      common-lisp:nil "ModifyDBInstanceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-dbinstance))
(common-lisp:progn
 (common-lisp:defun modify-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBParameterGroup"))
      common-lisp:nil "ModifyDBParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbproxy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name new-dbproxy-name auth
                     require-tls idle-client-timeout debug-logging role-arn
                     security-groups)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name new-dbproxy-name auth require-tls
     idle-client-timeout debug-logging role-arn security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbproxy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBProxy"))
      common-lisp:nil "ModifyDBProxyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-dbproxy))
(common-lisp:progn
 (common-lisp:defun modify-dbproxy-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-endpoint-name
                     new-dbproxy-endpoint-name vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-endpoint-name new-dbproxy-endpoint-name
     vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbproxy-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBProxyEndpoint"))
      common-lisp:nil "ModifyDBProxyEndpointResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbproxy-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-dbproxy-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-name dbproxy-name
                     connection-pool-config new-name)
   (common-lisp:declare
    (common-lisp:ignorable target-group-name dbproxy-name
     connection-pool-config new-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbproxy-target-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBProxyTargetGroup"))
      common-lisp:nil "ModifyDBProxyTargetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbproxy-target-group))
(common-lisp:progn
 (common-lisp:defun modify-dbrecommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommendation-id locale status
                     recommended-action-updates)
   (common-lisp:declare
    (common-lisp:ignorable recommendation-id locale status
     recommended-action-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbrecommendation-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBRecommendation"))
      common-lisp:nil "ModifyDBRecommendationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbrecommendation))
(common-lisp:progn
 (common-lisp:defun modify-dbshard-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbshard-group-identifier max-acu)
   (common-lisp:declare
    (common-lisp:ignorable dbshard-group-identifier max-acu))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbshard-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBShardGroup"))
      common-lisp:nil "ModifyDBShardGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-dbshard-group))
(common-lisp:progn
 (common-lisp:defun modify-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier engine-version
                     option-group-name)
   (common-lisp:declare
    (common-lisp:ignorable dbsnapshot-identifier engine-version
     option-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSnapshot"))
      common-lisp:nil "ModifyDBSnapshotResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun modify-dbsnapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier attribute-name
                     values-to-add values-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable dbsnapshot-identifier attribute-name values-to-add
     values-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbsnapshot-attribute-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSnapshotAttribute"))
      common-lisp:nil "ModifyDBSnapshotAttributeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbsnapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSubnetGroup"))
      common-lisp:nil "ModifyDBSubnetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEventSubscription"))
      common-lisp:nil "ModifyEventSubscriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     new-global-cluster-identifier deletion-protection
                     engine-version allow-major-version-upgrade)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     new-global-cluster-identifier deletion-protection engine-version
     allow-major-version-upgrade))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyGlobalCluster"))
      common-lisp:nil "ModifyGlobalClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-global-cluster))
(common-lisp:progn
 (common-lisp:defun modify-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name options-to-include
                     options-to-remove apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable option-group-name options-to-include
     options-to-remove apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyOptionGroup"))
      common-lisp:nil "ModifyOptionGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-option-group))
(common-lisp:progn
 (common-lisp:defun modify-tenant-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier tenant-dbname
                     master-user-password new-tenant-dbname)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier tenant-dbname
     master-user-password new-tenant-dbname))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-tenant-database-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyTenantDatabase"))
      common-lisp:nil "ModifyTenantDatabaseResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-tenant-database))
(common-lisp:progn
 (common-lisp:defun promote-read-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     backup-retention-period preferred-backup-window)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier backup-retention-period
     preferred-backup-window))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-promote-read-replica-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PromoteReadReplica"))
      common-lisp:nil "PromoteReadReplicaResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'promote-read-replica))
(common-lisp:progn
 (common-lisp:defun promote-read-replica-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-promote-read-replica-dbcluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PromoteReadReplicaDBCluster"))
      common-lisp:nil "PromoteReadReplicaDBClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'promote-read-replica-dbcluster))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-dbinstances-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-dbinstances-offering-id
                     reserved-dbinstance-id dbinstance-count tags)
   (common-lisp:declare
    (common-lisp:ignorable reserved-dbinstances-offering-id
     reserved-dbinstance-id dbinstance-count tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-dbinstances-offering-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseReservedDBInstancesOffering"))
      common-lisp:nil "PurchaseReservedDBInstancesOfferingResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'purchase-reserved-dbinstances-offering))
(common-lisp:progn
 (common-lisp:defun reboot-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootDBCluster"))
      common-lisp:nil "RebootDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'reboot-dbcluster))
(common-lisp:progn
 (common-lisp:defun reboot-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier force-failover)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier force-failover))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootDBInstance"))
      common-lisp:nil "RebootDBInstanceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'reboot-dbinstance))
(common-lisp:progn
 (common-lisp:defun reboot-dbshard-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbshard-group-identifier)
   (common-lisp:declare (common-lisp:ignorable dbshard-group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbshard-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootDBShardGroup"))
      common-lisp:nil "RebootDBShardGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'reboot-dbshard-group))
(common-lisp:progn
 (common-lisp:defun register-dbproxy-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name
                     dbinstance-identifiers dbcluster-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name
     dbinstance-identifiers dbcluster-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-dbproxy-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterDBProxyTargets"))
      common-lisp:nil "RegisterDBProxyTargetsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'register-dbproxy-targets))
(common-lisp:progn
 (common-lisp:defun remove-from-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-from-global-cluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveFromGlobalCluster"))
      common-lisp:nil "RemoveFromGlobalClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'remove-from-global-cluster))
(common-lisp:progn
 (common-lisp:defun remove-role-from-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-dbcluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromDBCluster"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-role-from-dbcluster))
(common-lisp:progn
 (common-lisp:defun remove-role-from-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-dbinstance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromDBInstance"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-role-from-dbinstance))
(common-lisp:progn
 (common-lisp:defun remove-source-identifier-from-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-source-identifier-from-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveSourceIdentifierFromSubscription"))
      common-lisp:nil "RemoveSourceIdentifierFromSubscriptionResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-source-identifier-from-subscription))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromResource"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDBClusterParameterGroup"))
      common-lisp:nil "ResetDBClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'reset-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun reset-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDBParameterGroup"))
      common-lisp:nil "ResetDBParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'reset-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-from-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones
                     backup-retention-period character-set-name database-name
                     dbcluster-identifier dbcluster-parameter-group-name
                     vpc-security-group-ids dbsubnet-group-name engine
                     engine-version port master-username master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window tags storage-encrypted
                     kms-key-id enable-iamdatabase-authentication source-engine
                     source-engine-version s3bucket-name s3prefix
                     s3ingestion-role-arn backtrack-window
                     enable-cloudwatch-logs-exports deletion-protection
                     copy-tags-to-snapshot domain domain-iamrole-name
                     serverless-v2scaling-configuration network-type
                     manage-master-user-password master-user-secret-kms-key-id
                     storage-type)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones backup-retention-period
     character-set-name database-name dbcluster-identifier
     dbcluster-parameter-group-name vpc-security-group-ids dbsubnet-group-name
     engine engine-version port master-username master-user-password
     option-group-name preferred-backup-window preferred-maintenance-window
     tags storage-encrypted kms-key-id enable-iamdatabase-authentication
     source-engine source-engine-version s3bucket-name s3prefix
     s3ingestion-role-arn backtrack-window enable-cloudwatch-logs-exports
     deletion-protection copy-tags-to-snapshot domain domain-iamrole-name
     serverless-v2scaling-configuration network-type
     manage-master-user-password master-user-secret-kms-key-id storage-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-dbcluster-from-s3message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterFromS3"))
      common-lisp:nil "RestoreDBClusterFromS3Result" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-dbcluster-from-s3))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones dbcluster-identifier
                     snapshot-identifier engine engine-version port
                     dbsubnet-group-name database-name option-group-name
                     vpc-security-group-ids tags kms-key-id
                     enable-iamdatabase-authentication backtrack-window
                     enable-cloudwatch-logs-exports engine-mode
                     scaling-configuration dbcluster-parameter-group-name
                     deletion-protection copy-tags-to-snapshot domain
                     domain-iamrole-name dbcluster-instance-class storage-type
                     iops publicly-accessible
                     serverless-v2scaling-configuration network-type
                     rds-custom-cluster-configuration)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones dbcluster-identifier
     snapshot-identifier engine engine-version port dbsubnet-group-name
     database-name option-group-name vpc-security-group-ids tags kms-key-id
     enable-iamdatabase-authentication backtrack-window
     enable-cloudwatch-logs-exports engine-mode scaling-configuration
     dbcluster-parameter-group-name deletion-protection copy-tags-to-snapshot
     domain domain-iamrole-name dbcluster-instance-class storage-type iops
     publicly-accessible serverless-v2scaling-configuration network-type
     rds-custom-cluster-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-from-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterFromSnapshot"))
      common-lisp:nil "RestoreDBClusterFromSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-dbcluster-from-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-to-point-in-time
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier restore-type
                     source-dbcluster-identifier restore-to-time
                     use-latest-restorable-time port dbsubnet-group-name
                     option-group-name vpc-security-group-ids tags kms-key-id
                     enable-iamdatabase-authentication backtrack-window
                     enable-cloudwatch-logs-exports
                     dbcluster-parameter-group-name deletion-protection
                     copy-tags-to-snapshot domain domain-iamrole-name
                     scaling-configuration engine-mode dbcluster-instance-class
                     storage-type publicly-accessible iops
                     serverless-v2scaling-configuration network-type
                     source-db-cluster-resource-id
                     rds-custom-cluster-configuration)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier restore-type
     source-dbcluster-identifier restore-to-time use-latest-restorable-time
     port dbsubnet-group-name option-group-name vpc-security-group-ids tags
     kms-key-id enable-iamdatabase-authentication backtrack-window
     enable-cloudwatch-logs-exports dbcluster-parameter-group-name
     deletion-protection copy-tags-to-snapshot domain domain-iamrole-name
     scaling-configuration engine-mode dbcluster-instance-class storage-type
     publicly-accessible iops serverless-v2scaling-configuration network-type
     source-db-cluster-resource-id rds-custom-cluster-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-to-point-in-time-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterToPointInTime"))
      common-lisp:nil "RestoreDBClusterToPointInTimeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-dbcluster-to-point-in-time))
(common-lisp:progn
 (common-lisp:defun restore-dbinstance-from-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier dbinstance-class port
                     availability-zone dbsubnet-group-name multi-az
                     publicly-accessible auto-minor-version-upgrade
                     license-model dbname engine iops option-group-name tags
                     storage-type tde-credential-arn tde-credential-password
                     vpc-security-group-ids domain domain-fqdn domain-ou
                     domain-auth-secret-arn domain-dns-ips
                     copy-tags-to-snapshot domain-iamrole-name
                     enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features dbparameter-group-name
                     deletion-protection enable-customer-owned-ip
                     custom-iam-instance-profile backup-target network-type
                     storage-throughput dbcluster-snapshot-identifier
                     allocated-storage dedicated-log-volume)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier
     dbinstance-class port availability-zone dbsubnet-group-name multi-az
     publicly-accessible auto-minor-version-upgrade license-model dbname engine
     iops option-group-name tags storage-type tde-credential-arn
     tde-credential-password vpc-security-group-ids domain domain-fqdn
     domain-ou domain-auth-secret-arn domain-dns-ips copy-tags-to-snapshot
     domain-iamrole-name enable-iamdatabase-authentication
     enable-cloudwatch-logs-exports processor-features
     use-default-processor-features dbparameter-group-name deletion-protection
     enable-customer-owned-ip custom-iam-instance-profile backup-target
     network-type storage-throughput dbcluster-snapshot-identifier
     allocated-storage dedicated-log-volume))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbinstance-from-dbsnapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBInstanceFromDBSnapshot"))
      common-lisp:nil "RestoreDBInstanceFromDBSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-dbinstance-from-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun restore-dbinstance-from-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname dbinstance-identifier
                     allocated-storage dbinstance-class engine master-username
                     master-user-password dbsecurity-groups
                     vpc-security-group-ids availability-zone
                     dbsubnet-group-name preferred-maintenance-window
                     dbparameter-group-name backup-retention-period
                     preferred-backup-window port multi-az engine-version
                     auto-minor-version-upgrade license-model iops
                     option-group-name publicly-accessible tags storage-type
                     storage-encrypted kms-key-id copy-tags-to-snapshot
                     monitoring-interval monitoring-role-arn
                     enable-iamdatabase-authentication source-engine
                     source-engine-version s3bucket-name s3prefix
                     s3ingestion-role-arn enable-performance-insights
                     performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features deletion-protection
                     max-allocated-storage network-type storage-throughput
                     manage-master-user-password master-user-secret-kms-key-id
                     dedicated-log-volume)
   (common-lisp:declare
    (common-lisp:ignorable dbname dbinstance-identifier allocated-storage
     dbinstance-class engine master-username master-user-password
     dbsecurity-groups vpc-security-group-ids availability-zone
     dbsubnet-group-name preferred-maintenance-window dbparameter-group-name
     backup-retention-period preferred-backup-window port multi-az
     engine-version auto-minor-version-upgrade license-model iops
     option-group-name publicly-accessible tags storage-type storage-encrypted
     kms-key-id copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     enable-iamdatabase-authentication source-engine source-engine-version
     s3bucket-name s3prefix s3ingestion-role-arn enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     enable-cloudwatch-logs-exports processor-features
     use-default-processor-features deletion-protection max-allocated-storage
     network-type storage-throughput manage-master-user-password
     master-user-secret-kms-key-id dedicated-log-volume))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbinstance-from-s3message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBInstanceFromS3"))
      common-lisp:nil "RestoreDBInstanceFromS3Result" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-dbinstance-from-s3))
(common-lisp:progn
 (common-lisp:defun restore-dbinstance-to-point-in-time
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbinstance-identifier
                     target-dbinstance-identifier restore-time
                     use-latest-restorable-time dbinstance-class port
                     availability-zone dbsubnet-group-name multi-az
                     publicly-accessible auto-minor-version-upgrade
                     license-model dbname engine iops option-group-name
                     copy-tags-to-snapshot tags storage-type tde-credential-arn
                     tde-credential-password vpc-security-group-ids domain
                     domain-iamrole-name domain-fqdn domain-ou
                     domain-auth-secret-arn domain-dns-ips
                     enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features dbparameter-group-name
                     deletion-protection source-dbi-resource-id
                     max-allocated-storage
                     source-dbinstance-automated-backups-arn
                     enable-customer-owned-ip custom-iam-instance-profile
                     backup-target network-type storage-throughput
                     allocated-storage dedicated-log-volume)
   (common-lisp:declare
    (common-lisp:ignorable source-dbinstance-identifier
     target-dbinstance-identifier restore-time use-latest-restorable-time
     dbinstance-class port availability-zone dbsubnet-group-name multi-az
     publicly-accessible auto-minor-version-upgrade license-model dbname engine
     iops option-group-name copy-tags-to-snapshot tags storage-type
     tde-credential-arn tde-credential-password vpc-security-group-ids domain
     domain-iamrole-name domain-fqdn domain-ou domain-auth-secret-arn
     domain-dns-ips enable-iamdatabase-authentication
     enable-cloudwatch-logs-exports processor-features
     use-default-processor-features dbparameter-group-name deletion-protection
     source-dbi-resource-id max-allocated-storage
     source-dbinstance-automated-backups-arn enable-customer-owned-ip
     custom-iam-instance-profile backup-target network-type storage-throughput
     allocated-storage dedicated-log-volume))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbinstance-to-point-in-time-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBInstanceToPointInTime"))
      common-lisp:nil "RestoreDBInstanceToPointInTimeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-dbinstance-to-point-in-time))
(common-lisp:progn
 (common-lisp:defun revoke-dbsecurity-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name cidrip
                     ec2security-group-name ec2security-group-id
                     ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name cidrip ec2security-group-name
     ec2security-group-id ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-dbsecurity-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeDBSecurityGroupIngress"))
      common-lisp:nil "RevokeDBSecurityGroupIngressResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'revoke-dbsecurity-group-ingress))
(common-lisp:progn
 (common-lisp:defun start-activity-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn mode kms-key-id
                     apply-immediately engine-native-audit-fields-included)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn mode kms-key-id apply-immediately
     engine-native-audit-fields-included))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-activity-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartActivityStream"))
      common-lisp:nil "StartActivityStreamResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'start-activity-stream))
(common-lisp:progn
 (common-lisp:defun start-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBCluster"))
      common-lisp:nil "StartDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'start-dbcluster))
(common-lisp:progn
 (common-lisp:defun start-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBInstance"))
      common-lisp:nil "StartDBInstanceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'start-dbinstance))
(common-lisp:progn
 (common-lisp:defun start-dbinstance-automated-backups-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbinstance-arn
                     backup-retention-period kms-key-id pre-signed-url)
   (common-lisp:declare
    (common-lisp:ignorable source-dbinstance-arn backup-retention-period
     kms-key-id pre-signed-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-dbinstance-automated-backups-replication-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBInstanceAutomatedBackupsReplication"))
      common-lisp:nil "StartDBInstanceAutomatedBackupsReplicationResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'start-dbinstance-automated-backups-replication))
(common-lisp:progn
 (common-lisp:defun start-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-identifier source-arn
                     s3bucket-name iam-role-arn kms-key-id s3prefix
                     export-only)
   (common-lisp:declare
    (common-lisp:ignorable export-task-identifier source-arn s3bucket-name
     iam-role-arn kms-key-id s3prefix export-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-export-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExportTask"))
      common-lisp:nil "StartExportTaskResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'start-export-task))
(common-lisp:progn
 (common-lisp:defun stop-activity-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn apply-immediately)
   (common-lisp:declare (common-lisp:ignorable resource-arn apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-activity-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopActivityStream"))
      common-lisp:nil "StopActivityStreamResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'stop-activity-stream))
(common-lisp:progn
 (common-lisp:defun stop-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBCluster"))
      common-lisp:nil "StopDBClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'stop-dbcluster))
(common-lisp:progn
 (common-lisp:defun stop-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBInstance"))
      common-lisp:nil "StopDBInstanceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'stop-dbinstance))
(common-lisp:progn
 (common-lisp:defun stop-dbinstance-automated-backups-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbinstance-arn)
   (common-lisp:declare (common-lisp:ignorable source-dbinstance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-dbinstance-automated-backups-replication-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBInstanceAutomatedBackupsReplication"))
      common-lisp:nil "StopDBInstanceAutomatedBackupsReplicationResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'stop-dbinstance-automated-backups-replication))
(common-lisp:progn
 (common-lisp:defun switchover-blue-green-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-identifier
                     switchover-timeout)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-identifier
     switchover-timeout))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-switchover-blue-green-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SwitchoverBlueGreenDeployment"))
      common-lisp:nil "SwitchoverBlueGreenDeploymentResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'switchover-blue-green-deployment))
(common-lisp:progn
 (common-lisp:defun switchover-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     target-db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     target-db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-switchover-global-cluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SwitchoverGlobalCluster"))
      common-lisp:nil "SwitchoverGlobalClusterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'switchover-global-cluster))
(common-lisp:progn
 (common-lisp:defun switchover-read-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-switchover-read-replica-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SwitchoverReadReplica"))
      common-lisp:nil "SwitchoverReadReplicaResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'switchover-read-replica))
