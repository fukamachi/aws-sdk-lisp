;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/snowball/api
  (:use)
  (:nicknames #:aws/snowball)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/snowball/api)
(common-lisp:progn
 (common-lisp:define-condition snowball-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'snowball-error))
(common-lisp:progn
 (common-lisp:defclass snowball-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "snowball" :api-version
                        "2016-06-30" :host-prefix "snowball" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AWSIESnowballJobManagementService"
                        :json-version "1.1"))
 (common-lisp:export 'snowball-request))
(common-lisp:defvar *error-map*
  '(("ClusterLimitExceededException" . cluster-limit-exceeded-exception)
    ("ConflictException" . conflict-exception)
    ("Ec2RequestFailedException" . ec2request-failed-exception)
    ("InvalidAddressException" . invalid-address-exception)
    ("InvalidInputCombinationException" . invalid-input-combination-exception)
    ("InvalidJobStateException" . invalid-job-state-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidResourceException" . invalid-resource-exception)
    ("KMSRequestFailedException" . kmsrequest-failed-exception)
    ("ReturnShippingLabelAlreadyExistsException"
     . return-shipping-label-already-exists-exception)
    ("UnsupportedAddressException" . unsupported-address-exception)))
(common-lisp:progn
 (common-lisp:defclass address common-lisp:nil
                       ((address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-address-address-id :shape "AddressId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-address-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (company :initarg :company :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-company :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (street1 :initarg :street1 :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-street1 :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (street2 :initarg :street2 :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-street2 :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (street3 :initarg :street3 :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-street3 :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (city :initarg :city :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-address-city :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-or-province :initarg :state-or-province
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-address-state-or-province :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefecture-or-district :initarg
                         :prefecture-or-district :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-prefecture-or-district
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (landmark :initarg :landmark :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-landmark :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (country :initarg :country :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-address-country :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (postal-code :initarg :postal-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-address-postal-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-address-phone-number :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-restricted :initarg :is-restricted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-address-is-restricted :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or address-type common-lisp:null)
                         :accessor struct-shape-address-type :shape
                         "AddressType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street1))
      (common-lisp:list
       (common-lisp:cons "Street1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street2))
      (common-lisp:list
       (common-lisp:cons "Street2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street3))
      (common-lisp:list
       (common-lisp:cons "Street3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-province))
      (common-lisp:list
       (common-lisp:cons "StateOrProvince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prefecture-or-district))
      (common-lisp:list
       (common-lisp:cons "PrefectureOrDistrict"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'landmark))
      (common-lisp:list
       (common-lisp:cons "Landmark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-restricted))
      (common-lisp:list
       (common-lisp:cons "IsRestricted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:deftype address-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype address-list () '(trivial-types:proper-list address))
 (common-lisp:defun make-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype address-type () 'common-lisp:string)
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-cluster-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-cancel-cluster-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-cluster-request 'make-cancel-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-cluster-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-cluster-result 'make-cancel-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-cancel-job-request-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-result 'make-cancel-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-result))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition cluster-limit-exceeded-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cluster-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cluster-limit-exceeded-exception
                    'cluster-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cluster-list-entry common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-list-entry-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-state :initarg :cluster-state :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor
                         struct-shape-cluster-list-entry-cluster-state :shape
                         "ClusterState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cluster-list-entry-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-list-entry-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-list-entry 'make-cluster-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-state))
      (common-lisp:list
       (common-lisp:cons "ClusterState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-list-entry-list ()
   '(trivial-types:proper-list cluster-list-entry))
 (common-lisp:defun make-cluster-list-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-metadata common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-metadata-cluster-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-metadata-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-cluster-metadata-kms-key-arn
                         :shape "KmsKeyARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-cluster-metadata-role-arn
                         :shape "RoleARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-state :initarg :cluster-state :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-state common-lisp:null)
                         :accessor struct-shape-cluster-metadata-cluster-state
                         :shape "ClusterState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-cluster-metadata-job-type
                         :shape "JobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor struct-shape-cluster-metadata-snowball-type
                         :shape "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cluster-metadata-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or job-resource common-lisp:null)
                         :accessor struct-shape-cluster-metadata-resources
                         :shape "JobResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-cluster-metadata-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shipping-option :initarg :shipping-option :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-cluster-metadata-shipping-option :shape
                         "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification common-lisp:null)
                         :accessor struct-shape-cluster-metadata-notification
                         :shape "Notification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-address-id :initarg :forwarding-address-id
                         :initform common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-cluster-metadata-forwarding-address-id
                         :shape "AddressId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tax-documents :initarg :tax-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or tax-documents common-lisp:null)
                         :accessor struct-shape-cluster-metadata-tax-documents
                         :shape "TaxDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-device-service-configuration :initarg
                         :on-device-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-metadata-on-device-service-configuration
                         :shape "OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-metadata 'make-cluster-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-state))
      (common-lisp:list
       (common-lisp:cons "ClusterState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-metadata))
   common-lisp:nil))
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compatible-image common-lisp:nil
                       ((ami-id :initarg :ami-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-compatible-image-ami-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compatible-image-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compatible-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compatible-image
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compatible-image 'make-compatible-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compatible-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compatible-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compatible-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compatible-image-list ()
   '(trivial-types:proper-list compatible-image))
 (common-lisp:defun make-compatible-image-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatible-image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (snowball-error)
     ((conflict-resource :initarg :conflict-resource :initform common-lisp:nil
       :reader conflict-exception-conflict-resource)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-conflict-resource
                    'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-address-request common-lisp:nil
                       ((address :initarg :address :initform
                         (common-lisp:error ":address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-address-request-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-address-request 'make-create-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-address-result common-lisp:nil
                       ((address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-address-result-address-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-address-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-address-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-address-result 'make-create-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((job-type :initarg :job-type :initform
                         (common-lisp:error ":job-type is required") :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         struct-shape-create-cluster-request-job-type :shape
                         "JobType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or job-resource common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-resources :shape
                         "JobResource" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (on-device-service-configuration :initarg
                         :on-device-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-on-device-service-configuration
                         :shape "OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-id :initarg :address-id :initform
                         (common-lisp:error ":address-id is required") :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-create-cluster-request-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-kms-key-arn :shape
                         "KmsKeyARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-create-cluster-request-role-arn
                         :shape "RoleARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         (common-lisp:error ":snowball-type is required") :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-snowball-type
                         :shape "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipping-option :initarg :shipping-option :initform
                         (common-lisp:error ":shipping-option is required")
                         :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-shipping-option
                         :shape "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-notification
                         :shape "Notification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-address-id :initarg :forwarding-address-id
                         :initform common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-create-cluster-request-forwarding-address-id
                         :shape "AddressId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tax-documents :initarg :tax-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or tax-documents common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-tax-documents
                         :shape "TaxDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-management :initarg :remote-management
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-management common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-remote-management
                         :shape "RemoteManagement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-cluster-size :initarg :initial-cluster-size
                         :initform common-lisp:nil :type
                         (common-lisp:or initial-cluster-size common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-initial-cluster-size
                         :shape "InitialClusterSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-create-jobs :initarg :force-create-jobs
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-cluster-request-force-create-jobs
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-ids :initarg :long-term-pricing-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or long-term-pricing-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-long-term-pricing-ids
                         :shape "LongTermPricingIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (snowball-capacity-preference :initarg
                         :snowball-capacity-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-capacity common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-snowball-capacity-preference
                         :shape "SnowballCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-management))
      (common-lisp:list
       (common-lisp:cons "RemoteManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-cluster-size))
      (common-lisp:list
       (common-lisp:cons "InitialClusterSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-create-jobs))
      (common-lisp:list
       (common-lisp:cons "ForceCreateJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-ids))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-result common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-create-cluster-result-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-list-entries :initarg :job-list-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or job-list-entry-list common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-result-job-list-entries
                         :shape "JobListEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-result 'make-create-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-create-job-request-job-type
                         :shape "JobType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or job-resource common-lisp:null)
                         :accessor struct-shape-create-job-request-resources
                         :shape "JobResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-device-service-configuration :initarg
                         :on-device-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-on-device-service-configuration
                         :shape "OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-job-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-create-job-request-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-create-job-request-kms-key-arn
                         :shape "KmsKeyARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-create-job-request-role-arn
                         :shape "RoleARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-capacity-preference :initarg
                         :snowball-capacity-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-capacity common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-snowball-capacity-preference
                         :shape "SnowballCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipping-option :initarg :shipping-option :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-shipping-option :shape
                         "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification common-lisp:null)
                         :accessor struct-shape-create-job-request-notification
                         :shape "Notification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-create-job-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-snowball-type :shape
                         "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-address-id :initarg :forwarding-address-id
                         :initform common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-create-job-request-forwarding-address-id
                         :shape "AddressId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tax-documents :initarg :tax-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or tax-documents common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-tax-documents :shape
                         "TaxDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-configuration :initarg :device-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or device-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-device-configuration
                         :shape "DeviceConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-management :initarg :remote-management
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-management common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-remote-management
                         :shape "RemoteManagement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-id :initarg :long-term-pricing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or long-term-pricing-id common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-long-term-pricing-id
                         :shape "LongTermPricingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact-level :initarg :impact-level :initform
                         common-lisp:nil :type
                         (common-lisp:or impact-level common-lisp:null)
                         :accessor struct-shape-create-job-request-impact-level
                         :shape "ImpactLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pickup-details :initarg :pickup-details :initform
                         common-lisp:nil :type
                         (common-lisp:or pickup-details common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-pickup-details :shape
                         "PickupDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-management))
      (common-lisp:list
       (common-lisp:cons "RemoteManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-level))
      (common-lisp:list
       (common-lisp:cons "ImpactLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pickup-details))
      (common-lisp:list
       (common-lisp:cons "PickupDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-result common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-create-job-result-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-result 'make-create-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-long-term-pricing-request common-lisp:nil
                       ((long-term-pricing-type :initarg
                         :long-term-pricing-type :initform
                         (common-lisp:error
                          ":long-term-pricing-type is required")
                         :type
                         (common-lisp:or long-term-pricing-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-long-term-pricing-request-long-term-pricing-type
                         :shape "LongTermPricingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-long-term-pricing-auto-renew :initarg
                         :is-long-term-pricing-auto-renew :initform
                         common-lisp:nil :type
                         (common-lisp:or java-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-long-term-pricing-request-is-long-term-pricing-auto-renew
                         :shape "JavaBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         (common-lisp:error ":snowball-type is required") :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor
                         struct-shape-create-long-term-pricing-request-snowball-type
                         :shape "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-long-term-pricing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-long-term-pricing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-long-term-pricing-request
                    'make-create-long-term-pricing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-type))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-long-term-pricing-auto-renew))
      (common-lisp:list
       (common-lisp:cons "IsLongTermPricingAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-long-term-pricing-result common-lisp:nil
                       ((long-term-pricing-id :initarg :long-term-pricing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or long-term-pricing-id common-lisp:null)
                         :accessor
                         struct-shape-create-long-term-pricing-result-long-term-pricing-id
                         :shape "LongTermPricingId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-long-term-pricing-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-long-term-pricing-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-long-term-pricing-result
                    'make-create-long-term-pricing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-long-term-pricing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-return-shipping-label-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-create-return-shipping-label-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipping-option :initarg :shipping-option :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-create-return-shipping-label-request-shipping-option
                         :shape "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-return-shipping-label-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-return-shipping-label-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-return-shipping-label-request
                    'make-create-return-shipping-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-return-shipping-label-result common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or shipping-label-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-return-shipping-label-result-status
                         :shape "ShippingLabelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-return-shipping-label-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-return-shipping-label-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-return-shipping-label-result
                    'make-create-return-shipping-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-return-shipping-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-transfer common-lisp:nil
                       ((bytes-transferred :initarg :bytes-transferred
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-transfer-bytes-transferred :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (objects-transferred :initarg :objects-transferred
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-transfer-objects-transferred :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-bytes :initarg :total-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-transfer-total-bytes :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-objects :initarg :total-objects :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-transfer-total-objects :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-transfer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-transfer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-transfer 'make-data-transfer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-transfer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-transfer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-transferred))
      (common-lisp:list
       (common-lisp:cons "BytesTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects-transferred))
      (common-lisp:list
       (common-lisp:cons "ObjectsTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-objects))
      (common-lisp:list
       (common-lisp:cons "TotalObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-transfer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dependent-service common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor struct-shape-dependent-service-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-version :initarg :service-version :initform
                         common-lisp:nil :type
                         (common-lisp:or service-version common-lisp:null)
                         :accessor
                         struct-shape-dependent-service-service-version :shape
                         "ServiceVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dependent-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dependent-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dependent-service 'make-dependent-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dependent-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dependent-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-version))
      (common-lisp:list
       (common-lisp:cons "ServiceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dependent-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dependent-service-list ()
   '(trivial-types:proper-list dependent-service))
 (common-lisp:defun make-dependent-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dependent-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-address-request common-lisp:nil
                       ((address-id :initarg :address-id :initform
                         (common-lisp:error ":address-id is required") :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-describe-address-request-address-id
                         :shape "AddressId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-address-request 'make-describe-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-address-result common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-describe-address-result-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-address-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-address-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-address-result 'make-describe-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addresses-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-describe-addresses-request-max-results
                         :shape "ListLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addresses-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addresses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-addresses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-request
                    'make-describe-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addresses-result common-lisp:nil
                       ((addresses :initarg :addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-describe-addresses-result-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-addresses-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-addresses-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-addresses-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-result
                    'make-describe-addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-describe-cluster-request-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-result common-lisp:nil
                       ((cluster-metadata :initarg :cluster-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-metadata common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-result-cluster-metadata
                         :shape "ClusterMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-result 'make-describe-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-metadata))
      (common-lisp:list
       (common-lisp:cons "ClusterMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-job-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-result common-lisp:nil
                       ((job-metadata :initarg :job-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or job-metadata common-lisp:null)
                         :accessor
                         struct-shape-describe-job-result-job-metadata :shape
                         "JobMetadata" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sub-job-metadata :initarg :sub-job-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or job-metadata-list common-lisp:null)
                         :accessor
                         struct-shape-describe-job-result-sub-job-metadata
                         :shape "JobMetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-result 'make-describe-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-metadata))
      (common-lisp:list
       (common-lisp:cons "JobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-job-metadata))
      (common-lisp:list
       (common-lisp:cons "SubJobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-return-shipping-label-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-return-shipping-label-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-return-shipping-label-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-return-shipping-label-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-return-shipping-label-request
                    'make-describe-return-shipping-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-return-shipping-label-result common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or shipping-label-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-return-shipping-label-result-status
                         :shape "ShippingLabelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-return-shipping-label-result-expiration-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-shipping-label-uri :initarg
                         :return-shipping-label-uri :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-return-shipping-label-result-return-shipping-label-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-return-shipping-label-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-return-shipping-label-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-return-shipping-label-result
                    'make-describe-return-shipping-label-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-shipping-label-uri))
      (common-lisp:list
       (common-lisp:cons "ReturnShippingLabelURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-return-shipping-label-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-configuration common-lisp:nil
                       ((snowcone-device-configuration :initarg
                         :snowcone-device-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or snowcone-device-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-device-configuration-snowcone-device-configuration
                         :shape "SnowconeDeviceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-configuration 'make-device-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowcone-device-configuration))
      (common-lisp:list
       (common-lisp:cons "SnowconeDeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-configuration))
   common-lisp:nil))
(common-lisp:deftype device-pickup-id () 'common-lisp:string)
(common-lisp:deftype device-service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ekson-device-service-configuration common-lisp:nil
                       ((kubernetes-version :initarg :kubernetes-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ekson-device-service-configuration-kubernetes-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eksanywhere-version :initarg :eksanywhere-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ekson-device-service-configuration-eksanywhere-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ekson-device-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ekson-device-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ekson-device-service-configuration
                    'make-ekson-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ekson-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ekson-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-version))
      (common-lisp:list
       (common-lisp:cons "KubernetesVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eksanywhere-version))
      (common-lisp:list
       (common-lisp:cons "EKSAnywhereVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ekson-device-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2ami-resource common-lisp:nil
                       ((ami-id :initarg :ami-id :initform
                         (common-lisp:error ":ami-id is required") :type
                         (common-lisp:or ami-id common-lisp:null) :accessor
                         struct-shape-ec2ami-resource-ami-id :shape "AmiId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snowball-ami-id :initarg :snowball-ami-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2ami-resource-snowball-ami-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2ami-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2ami-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ec2ami-resource 'make-ec2ami-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2ami-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2ami-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-ami-id))
      (common-lisp:list
       (common-lisp:cons "SnowballAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2ami-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2ami-resource-list ()
   '(trivial-types:proper-list ec2ami-resource))
 (common-lisp:defun make-ec2ami-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2ami-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ec2request-failed-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ec2request-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2request-failed-exception
                    'ec2request-failed-exception-message)))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-trigger-definition common-lisp:nil
                       ((event-resource-arn :initarg :event-resource-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-event-trigger-definition-event-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-trigger-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-trigger-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-trigger-definition 'make-event-trigger-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EventResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-trigger-definition-list ()
   '(trivial-types:proper-list event-trigger-definition))
 (common-lisp:defun make-event-trigger-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-trigger-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype gstin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-job-manifest-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-job-manifest-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-manifest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-manifest-request 'make-get-job-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-manifest-result common-lisp:nil
                       ((manifest-uri :initarg :manifest-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-job-manifest-result-manifest-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-manifest-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-manifest-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-manifest-result 'make-get-job-manifest-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-uri))
      (common-lisp:list
       (common-lisp:cons "ManifestURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-unlock-code-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-job-unlock-code-request-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-unlock-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-unlock-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-unlock-code-request
                    'make-get-job-unlock-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-unlock-code-result common-lisp:nil
                       ((unlock-code :initarg :unlock-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-job-unlock-code-result-unlock-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-unlock-code-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-unlock-code-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-unlock-code-result
                    'make-get-job-unlock-code-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlock-code))
      (common-lisp:list
       (common-lisp:cons "UnlockCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-snowball-usage-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-snowball-usage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-snowball-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-snowball-usage-request
                    'make-get-snowball-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-snowball-usage-result common-lisp:nil
                       ((snowball-limit :initarg :snowball-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-snowball-usage-result-snowball-limit
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowballs-in-use :initarg :snowballs-in-use :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-snowball-usage-result-snowballs-in-use
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-snowball-usage-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-snowball-usage-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-snowball-usage-result
                    'make-get-snowball-usage-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-limit))
      (common-lisp:list
       (common-lisp:cons "SnowballLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowballs-in-use))
      (common-lisp:list
       (common-lisp:cons "SnowballsInUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-software-updates-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-software-updates-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-software-updates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-software-updates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-software-updates-request
                    'make-get-software-updates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-software-updates-result common-lisp:nil
                       ((updates-uri :initarg :updates-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-software-updates-result-updates-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-software-updates-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-software-updates-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-software-updates-result
                    'make-get-software-updates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates-uri))
      (common-lisp:list
       (common-lisp:cons "UpdatesURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-software-updates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass indtax-documents common-lisp:nil
                       ((gstin :initarg :gstin :initform common-lisp:nil :type
                         (common-lisp:or gstin common-lisp:null) :accessor
                         struct-shape-indtax-documents-gstin :shape "GSTIN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-indtax-documents
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'indtax-documents
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'indtax-documents 'make-indtax-documents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input indtax-documents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input indtax-documents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gstin))
      (common-lisp:list
       (common-lisp:cons "GSTIN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input indtax-documents))
   common-lisp:nil))
(common-lisp:deftype impact-level () 'common-lisp:string)
(common-lisp:deftype initial-cluster-size () 'common-lisp:integer)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-address-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-address-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-address-exception
                    'invalid-address-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-combination-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-combination-exception
                    'invalid-input-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-state-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-job-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-job-state-exception
                    'invalid-job-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       invalid-resource-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-exception
                    'invalid-resource-exception-message
                    'invalid-resource-exception-resource-type)))
(common-lisp:deftype java-boolean () 'common-lisp:boolean)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-list-entry common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-job-list-entry-job-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-state :initarg :job-state :initform
                         common-lisp:nil :type
                         (common-lisp:or job-state common-lisp:null) :accessor
                         struct-shape-job-list-entry-job-state :shape
                         "JobState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-master :initarg :is-master :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-job-list-entry-is-master :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-job-list-entry-job-type :shape
                         "JobType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor struct-shape-job-list-entry-snowball-type
                         :shape "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-job-list-entry-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-list-entry-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-list-entry 'make-job-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-state))
      (common-lisp:list
       (common-lisp:cons "JobState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-master))
      (common-lisp:list
       (common-lisp:cons "IsMaster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list-entry-list ()
   '(trivial-types:proper-list job-list-entry))
 (common-lisp:defun make-job-list-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-logs common-lisp:nil
                       ((job-completion-report-uri :initarg
                         :job-completion-report-uri :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-job-logs-job-completion-report-uri :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-success-log-uri :initarg :job-success-log-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-logs-job-success-log-uri :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-failure-log-uri :initarg :job-failure-log-uri
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-logs-job-failure-log-uri :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-logs
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-logs
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-logs 'make-job-logs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-completion-report-uri))
      (common-lisp:list
       (common-lisp:cons "JobCompletionReportURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-success-log-uri))
      (common-lisp:list
       (common-lisp:cons "JobSuccessLogURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-failure-log-uri))
      (common-lisp:list
       (common-lisp:cons "JobFailureLogURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-metadata common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-job-metadata-job-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-state :initarg :job-state :initform
                         common-lisp:nil :type
                         (common-lisp:or job-state common-lisp:null) :accessor
                         struct-shape-job-metadata-job-state :shape "JobState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type (common-lisp:or job-type common-lisp:null)
                         :accessor struct-shape-job-metadata-job-type :shape
                         "JobType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor struct-shape-job-metadata-snowball-type
                         :shape "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-job-metadata-creation-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or job-resource common-lisp:null)
                         :accessor struct-shape-job-metadata-resources :shape
                         "JobResource" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-metadata-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-job-metadata-kms-key-arn :shape
                         "KmsKeyARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-job-metadata-role-arn :shape
                         "RoleARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-job-metadata-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shipping-details :initarg :shipping-details :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-details common-lisp:null)
                         :accessor struct-shape-job-metadata-shipping-details
                         :shape "ShippingDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-capacity-preference :initarg
                         :snowball-capacity-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-capacity common-lisp:null)
                         :accessor
                         struct-shape-job-metadata-snowball-capacity-preference
                         :shape "SnowballCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification common-lisp:null)
                         :accessor struct-shape-job-metadata-notification
                         :shape "Notification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-transfer-progress :initarg
                         :data-transfer-progress :initform common-lisp:nil
                         :type (common-lisp:or data-transfer common-lisp:null)
                         :accessor
                         struct-shape-job-metadata-data-transfer-progress
                         :shape "DataTransfer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-log-info :initarg :job-log-info :initform
                         common-lisp:nil :type
                         (common-lisp:or job-logs common-lisp:null) :accessor
                         struct-shape-job-metadata-job-log-info :shape
                         "JobLogs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-metadata-cluster-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forwarding-address-id :initarg :forwarding-address-id
                         :initform common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-job-metadata-forwarding-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tax-documents :initarg :tax-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or tax-documents common-lisp:null)
                         :accessor struct-shape-job-metadata-tax-documents
                         :shape "TaxDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-configuration :initarg :device-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or device-configuration common-lisp:null)
                         :accessor
                         struct-shape-job-metadata-device-configuration :shape
                         "DeviceConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote-management :initarg :remote-management
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-management common-lisp:null)
                         :accessor struct-shape-job-metadata-remote-management
                         :shape "RemoteManagement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-id :initarg :long-term-pricing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or long-term-pricing-id common-lisp:null)
                         :accessor
                         struct-shape-job-metadata-long-term-pricing-id :shape
                         "LongTermPricingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-device-service-configuration :initarg
                         :on-device-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-metadata-on-device-service-configuration
                         :shape "OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (impact-level :initarg :impact-level :initform
                         common-lisp:nil :type
                         (common-lisp:or impact-level common-lisp:null)
                         :accessor struct-shape-job-metadata-impact-level
                         :shape "ImpactLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pickup-details :initarg :pickup-details :initform
                         common-lisp:nil :type
                         (common-lisp:or pickup-details common-lisp:null)
                         :accessor struct-shape-job-metadata-pickup-details
                         :shape "PickupDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-id :initarg :snowball-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-metadata-snowball-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-metadata 'make-job-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-state))
      (common-lisp:list
       (common-lisp:cons "JobState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-details))
      (common-lisp:list
       (common-lisp:cons "ShippingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-progress))
      (common-lisp:list
       (common-lisp:cons "DataTransferProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-log-info))
      (common-lisp:list
       (common-lisp:cons "JobLogInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tax-documents))
      (common-lisp:list
       (common-lisp:cons "TaxDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-configuration))
      (common-lisp:list
       (common-lisp:cons "DeviceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-management))
      (common-lisp:list
       (common-lisp:cons "RemoteManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-level))
      (common-lisp:list
       (common-lisp:cons "ImpactLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pickup-details))
      (common-lisp:list
       (common-lisp:cons "PickupDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-id))
      (common-lisp:list
       (common-lisp:cons "SnowballId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-metadata-list ()
   '(trivial-types:proper-list job-metadata))
 (common-lisp:defun make-job-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-resource common-lisp:nil
                       ((s3resources :initarg :s3resources :initform
                         common-lisp:nil :type
                         (common-lisp:or s3resource-list common-lisp:null)
                         :accessor struct-shape-job-resource-s3resources :shape
                         "S3ResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-resources :initarg :lambda-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-resource-list common-lisp:null)
                         :accessor struct-shape-job-resource-lambda-resources
                         :shape "LambdaResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2ami-resources :initarg :ec2ami-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2ami-resource-list common-lisp:null)
                         :accessor struct-shape-job-resource-ec2ami-resources
                         :shape "Ec2AmiResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-resource 'make-job-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resources))
      (common-lisp:list
       (common-lisp:cons "S3Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-resources))
      (common-lisp:list
       (common-lisp:cons "LambdaResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2ami-resources))
      (common-lisp:list
       (common-lisp:cons "Ec2AmiResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-resource))
   common-lisp:nil))
(common-lisp:deftype job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-state-list () '(trivial-types:proper-list job-state))
 (common-lisp:defun make-job-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition kmsrequest-failed-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsrequest-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsrequest-failed-exception
                    'kmsrequest-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass key-range common-lisp:nil
                       ((begin-marker :initarg :begin-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-key-range-begin-marker :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-marker :initarg :end-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-key-range-end-marker :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-range 'make-key-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-marker))
      (common-lisp:list
       (common-lisp:cons "BeginMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-marker))
      (common-lisp:list
       (common-lisp:cons "EndMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-range))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-resource common-lisp:nil
                       ((lambda-arn :initarg :lambda-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-lambda-resource-lambda-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-triggers :initarg :event-triggers :initform
                         common-lisp:nil :type
                         (common-lisp:or event-trigger-definition-list
                                         common-lisp:null)
                         :accessor struct-shape-lambda-resource-event-triggers
                         :shape "EventTriggerDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-resource 'make-lambda-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-triggers))
      (common-lisp:list
       (common-lisp:cons "EventTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-resource-list ()
   '(trivial-types:proper-list lambda-resource))
 (common-lisp:defun make-lambda-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lambda-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-cluster-jobs-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-list-cluster-jobs-request-cluster-id
                         :shape "ClusterId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-cluster-jobs-request-max-results
                         :shape "ListLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-cluster-jobs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cluster-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-cluster-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cluster-jobs-request
                    'make-list-cluster-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cluster-jobs-result common-lisp:nil
                       ((job-list-entries :initarg :job-list-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or job-list-entry-list common-lisp:null)
                         :accessor
                         struct-shape-list-cluster-jobs-result-job-list-entries
                         :shape "JobListEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-cluster-jobs-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cluster-jobs-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-cluster-jobs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cluster-jobs-result 'make-list-cluster-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-clusters-request-max-results :shape
                         "ListLimit" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-clusters-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-result common-lisp:nil
                       ((cluster-list-entries :initarg :cluster-list-entries
                         :initform common-lisp:nil :type
                         (common-lisp:or cluster-list-entry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-result-cluster-list-entries
                         :shape "ClusterListEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-clusters-result-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-result 'make-list-clusters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-list-entries))
      (common-lisp:list
       (common-lisp:cons "ClusterListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compatible-images-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-compatible-images-request-max-results
                         :shape "ListLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-compatible-images-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-compatible-images-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compatible-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-compatible-images-request
                    'make-list-compatible-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compatible-images-result common-lisp:nil
                       ((compatible-images :initarg :compatible-images
                         :initform common-lisp:nil :type
                         (common-lisp:or compatible-image-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-compatible-images-result-compatible-images
                         :shape "CompatibleImageList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-compatible-images-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-compatible-images-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compatible-images-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-compatible-images-result
                    'make-list-compatible-images-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-images))
      (common-lisp:list
       (common-lisp:cons "CompatibleImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compatible-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-jobs-request-max-results :shape
                         "ListLimit" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-jobs-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-result common-lisp:nil
                       ((job-list-entries :initarg :job-list-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or job-list-entry-list common-lisp:null)
                         :accessor
                         struct-shape-list-jobs-result-job-list-entries :shape
                         "JobListEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-jobs-result-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:deftype list-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-long-term-pricing-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-long-term-pricing-request-max-results
                         :shape "ListLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-long-term-pricing-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-long-term-pricing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-long-term-pricing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-long-term-pricing-request
                    'make-list-long-term-pricing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-long-term-pricing-result common-lisp:nil
                       ((long-term-pricing-entries :initarg
                         :long-term-pricing-entries :initform common-lisp:nil
                         :type
                         (common-lisp:or long-term-pricing-entry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-long-term-pricing-result-long-term-pricing-entries
                         :shape "LongTermPricingEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-long-term-pricing-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-long-term-pricing-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-long-term-pricing-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-long-term-pricing-result
                    'make-list-long-term-pricing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-entries))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-long-term-pricing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pickup-locations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-pickup-locations-request-max-results
                         :shape "ListLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pickup-locations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pickup-locations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pickup-locations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pickup-locations-request
                    'make-list-pickup-locations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pickup-locations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pickup-locations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pickup-locations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pickup-locations-result common-lisp:nil
                       ((addresses :initarg :addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-list-pickup-locations-result-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-pickup-locations-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pickup-locations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-pickup-locations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pickup-locations-result
                    'make-list-pickup-locations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pickup-locations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pickup-locations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pickup-locations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-versions-request common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-versions-request-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dependent-services :initarg :dependent-services
                         :initform common-lisp:nil :type
                         (common-lisp:or dependent-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-versions-request-dependent-services
                         :shape "DependentServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-limit common-lisp:null) :accessor
                         struct-shape-list-service-versions-request-max-results
                         :shape "ListLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-service-versions-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-versions-request
                    'make-list-service-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-services))
      (common-lisp:list
       (common-lisp:cons "DependentServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-versions-result common-lisp:nil
                       ((service-versions :initarg :service-versions :initform
                         (common-lisp:error ":service-versions is required")
                         :type
                         (common-lisp:or service-version-list common-lisp:null)
                         :accessor
                         struct-shape-list-service-versions-result-service-versions
                         :shape "ServiceVersionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-versions-result-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dependent-services :initarg :dependent-services
                         :initform common-lisp:nil :type
                         (common-lisp:or dependent-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-versions-result-dependent-services
                         :shape "DependentServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-service-versions-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-versions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-service-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-versions-result
                    'make-list-service-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-versions))
      (common-lisp:list
       (common-lisp:cons "ServiceVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-services))
      (common-lisp:list
       (common-lisp:cons "DependentServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-versions-result))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype long-term-pricing-associated-job-id-list ()
   '(trivial-types:proper-list job-id))
 (common-lisp:defun make-long-term-pricing-associated-job-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype long-term-pricing-entry-list ()
   '(trivial-types:proper-list long-term-pricing-list-entry))
 (common-lisp:defun make-long-term-pricing-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            long-term-pricing-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long-term-pricing-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype long-term-pricing-id-list ()
   '(trivial-types:proper-list long-term-pricing-id))
 (common-lisp:defun make-long-term-pricing-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list long-term-pricing-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass long-term-pricing-list-entry common-lisp:nil
                       ((long-term-pricing-id :initarg :long-term-pricing-id
                         :initform common-lisp:nil :type
                         (common-lisp:or long-term-pricing-id common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-long-term-pricing-id
                         :shape "LongTermPricingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-end-date :initarg
                         :long-term-pricing-end-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-long-term-pricing-end-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-start-date :initarg
                         :long-term-pricing-start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-long-term-pricing-list-entry-long-term-pricing-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-type :initarg
                         :long-term-pricing-type :initform common-lisp:nil
                         :type
                         (common-lisp:or long-term-pricing-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-long-term-pricing-type
                         :shape "LongTermPricingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-active-job :initarg :current-active-job
                         :initform common-lisp:nil :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-long-term-pricing-list-entry-current-active-job
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replacement-job :initarg :replacement-job :initform
                         common-lisp:nil :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-long-term-pricing-list-entry-replacement-job
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-long-term-pricing-auto-renew :initarg
                         :is-long-term-pricing-auto-renew :initform
                         common-lisp:nil :type
                         (common-lisp:or java-boolean common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-is-long-term-pricing-auto-renew
                         :shape "JavaBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-term-pricing-status :initarg
                         :long-term-pricing-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-long-term-pricing-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowball-type :initarg :snowball-type :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-type common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-snowball-type
                         :shape "SnowballType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-ids :initarg :job-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          long-term-pricing-associated-job-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-long-term-pricing-list-entry-job-ids
                         :shape "LongTermPricingAssociatedJobIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-long-term-pricing-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'long-term-pricing-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'long-term-pricing-list-entry
                    'make-long-term-pricing-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          long-term-pricing-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          long-term-pricing-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-end-date))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-start-date))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-type))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-active-job))
      (common-lisp:list
       (common-lisp:cons "CurrentActiveJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement-job))
      (common-lisp:list
       (common-lisp:cons "ReplacementJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-long-term-pricing-auto-renew))
      (common-lisp:list
       (common-lisp:cons "IsLongTermPricingAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-status))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-ids))
      (common-lisp:list
       (common-lisp:cons "JobIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          long-term-pricing-list-entry))
   common-lisp:nil))
(common-lisp:deftype long-term-pricing-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nfson-device-service-configuration common-lisp:nil
                       ((storage-limit :initarg :storage-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-limit common-lisp:null)
                         :accessor
                         struct-shape-nfson-device-service-configuration-storage-limit
                         :shape "StorageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-unit :initarg :storage-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-unit common-lisp:null)
                         :accessor
                         struct-shape-nfson-device-service-configuration-storage-unit
                         :shape "StorageUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nfson-device-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'nfson-device-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nfson-device-service-configuration
                    'make-nfson-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nfson-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nfson-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-limit))
      (common-lisp:list
       (common-lisp:cons "StorageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-unit))
      (common-lisp:list
       (common-lisp:cons "StorageUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nfson-device-service-configuration))
   common-lisp:nil))
(common-lisp:deftype node-fault-tolerance () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass notification common-lisp:nil
                       ((sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor struct-shape-notification-sns-topic-arn
                         :shape "SnsTopicARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-states-to-notify :initarg :job-states-to-notify
                         :initform common-lisp:nil :type
                         (common-lisp:or job-state-list common-lisp:null)
                         :accessor
                         struct-shape-notification-job-states-to-notify :shape
                         "JobStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notify-all :initarg :notify-all :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-notification-notify-all :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-pickup-sns-topic-arn :initarg
                         :device-pickup-sns-topic-arn :initform common-lisp:nil
                         :type (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor
                         struct-shape-notification-device-pickup-sns-topic-arn
                         :shape "SnsTopicARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'notification 'make-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-states-to-notify))
      (common-lisp:list
       (common-lisp:cons "JobStatesToNotify"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notify-all))
      (common-lisp:list
       (common-lisp:cons "NotifyAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-pickup-sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "DevicePickupSnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass on-device-service-configuration common-lisp:nil
                       ((nfson-device-service :initarg :nfson-device-service
                         :initform common-lisp:nil :type
                         (common-lisp:or nfson-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-on-device-service-configuration-nfson-device-service
                         :shape "NFSOnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tgwon-device-service :initarg :tgwon-device-service
                         :initform common-lisp:nil :type
                         (common-lisp:or tgwon-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-on-device-service-configuration-tgwon-device-service
                         :shape "TGWOnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ekson-device-service :initarg :ekson-device-service
                         :initform common-lisp:nil :type
                         (common-lisp:or ekson-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-on-device-service-configuration-ekson-device-service
                         :shape "EKSOnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3on-device-service :initarg :s3on-device-service
                         :initform common-lisp:nil :type
                         (common-lisp:or s3on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-on-device-service-configuration-s3on-device-service
                         :shape "S3OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-on-device-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'on-device-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'on-device-service-configuration
                    'make-on-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          on-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          on-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nfson-device-service))
      (common-lisp:list
       (common-lisp:cons "NFSOnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tgwon-device-service))
      (common-lisp:list
       (common-lisp:cons "TGWOnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ekson-device-service))
      (common-lisp:list
       (common-lisp:cons "EKSOnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3on-device-service))
      (common-lisp:list
       (common-lisp:cons "S3OnDeviceService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          on-device-service-configuration))
   common-lisp:nil))
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pickup-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pickup-details-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor struct-shape-pickup-details-phone-number
                         :shape "PhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-pickup-details-email :shape "Email"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identification-number :initarg :identification-number
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pickup-details-identification-number
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identification-expiration-date :initarg
                         :identification-expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pickup-details-identification-expiration-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identification-issuing-org :initarg
                         :identification-issuing-org :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pickup-details-identification-issuing-org
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-pickup-id :initarg :device-pickup-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-pickup-id common-lisp:null)
                         :accessor struct-shape-pickup-details-device-pickup-id
                         :shape "DevicePickupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pickup-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pickup-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pickup-details 'make-pickup-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pickup-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pickup-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identification-number))
      (common-lisp:list
       (common-lisp:cons "IdentificationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identification-expiration-date))
      (common-lisp:list
       (common-lisp:cons "IdentificationExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identification-issuing-org))
      (common-lisp:list
       (common-lisp:cons "IdentificationIssuingOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-pickup-id))
      (common-lisp:list
       (common-lisp:cons "DevicePickupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pickup-details))
   common-lisp:nil))
(common-lisp:deftype remote-management () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition return-shipping-label-already-exists-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       return-shipping-label-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'return-shipping-label-already-exists-exception
                    'return-shipping-label-already-exists-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3on-device-service-configuration common-lisp:nil
                       ((storage-limit :initarg :storage-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or s3storage-limit common-lisp:null)
                         :accessor
                         struct-shape-s3on-device-service-configuration-storage-limit
                         :shape "S3StorageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-unit :initarg :storage-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-unit common-lisp:null)
                         :accessor
                         struct-shape-s3on-device-service-configuration-storage-unit
                         :shape "StorageUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-size :initarg :service-size :initform
                         common-lisp:nil :type
                         (common-lisp:or service-size common-lisp:null)
                         :accessor
                         struct-shape-s3on-device-service-configuration-service-size
                         :shape "ServiceSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fault-tolerance :initarg :fault-tolerance :initform
                         common-lisp:nil :type
                         (common-lisp:or node-fault-tolerance common-lisp:null)
                         :accessor
                         struct-shape-s3on-device-service-configuration-fault-tolerance
                         :shape "NodeFaultTolerance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3on-device-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      's3on-device-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3on-device-service-configuration
                    'make-s3on-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3on-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3on-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-limit))
      (common-lisp:list
       (common-lisp:cons "StorageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-unit))
      (common-lisp:list
       (common-lisp:cons "StorageUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-size))
      (common-lisp:list
       (common-lisp:cons "ServiceSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-tolerance))
      (common-lisp:list
       (common-lisp:cons "FaultTolerance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3on-device-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3resource common-lisp:nil
                       ((bucket-arn :initarg :bucket-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-s3resource-bucket-arn :shape
                         "ResourceARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-range :initarg :key-range :initform
                         common-lisp:nil :type
                         (common-lisp:or key-range common-lisp:null) :accessor
                         struct-shape-s3resource-key-range :shape "KeyRange"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-on-device-services :initarg
                         :target-on-device-services :initform common-lisp:nil
                         :type
                         (common-lisp:or target-on-device-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3resource-target-on-device-services
                         :shape "TargetOnDeviceServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3resource 'make-s3resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-range))
      (common-lisp:list
       (common-lisp:cons "KeyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-on-device-services))
      (common-lisp:list
       (common-lisp:cons "TargetOnDeviceServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3resource-list ()
   '(trivial-types:proper-list s3resource))
 (common-lisp:defun make-s3resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3storage-limit () 'common-lisp:double-float)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:deftype service-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass service-version common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-version-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service-version 'make-service-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-version-list ()
   '(trivial-types:proper-list service-version))
 (common-lisp:defun make-service-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass shipment common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-shipment-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tracking-number :initarg :tracking-number :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-shipment-tracking-number :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shipment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shipment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'shipment 'make-shipment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-number))
      (common-lisp:list
       (common-lisp:cons "TrackingNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipment))
   common-lisp:nil))
(common-lisp:deftype shipment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass shipping-details common-lisp:nil
                       ((shipping-option :initarg :shipping-option :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-shipping-details-shipping-option :shape
                         "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inbound-shipment :initarg :inbound-shipment :initform
                         common-lisp:nil :type
                         (common-lisp:or shipment common-lisp:null) :accessor
                         struct-shape-shipping-details-inbound-shipment :shape
                         "Shipment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (outbound-shipment :initarg :outbound-shipment
                         :initform common-lisp:nil :type
                         (common-lisp:or shipment common-lisp:null) :accessor
                         struct-shape-shipping-details-outbound-shipment :shape
                         "Shipment" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shipping-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shipping-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'shipping-details 'make-shipping-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipping-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipping-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-shipment))
      (common-lisp:list
       (common-lisp:cons "InboundShipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outbound-shipment))
      (common-lisp:list
       (common-lisp:cons "OutboundShipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipping-details))
   common-lisp:nil))
(common-lisp:deftype shipping-label-status () 'common-lisp:string)
(common-lisp:deftype shipping-option () 'common-lisp:string)
(common-lisp:deftype snowball-capacity () 'common-lisp:string)
(common-lisp:deftype snowball-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snowcone-device-configuration common-lisp:nil
                       ((wireless-connection :initarg :wireless-connection
                         :initform common-lisp:nil :type
                         (common-lisp:or wireless-connection common-lisp:null)
                         :accessor
                         struct-shape-snowcone-device-configuration-wireless-connection
                         :shape "WirelessConnection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snowcone-device-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'snowcone-device-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snowcone-device-configuration
                    'make-snowcone-device-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snowcone-device-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snowcone-device-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-connection))
      (common-lisp:list
       (common-lisp:cons "WirelessConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snowcone-device-configuration))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype storage-limit () 'common-lisp:integer)
(common-lisp:deftype storage-unit () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tgwon-device-service-configuration common-lisp:nil
                       ((storage-limit :initarg :storage-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-limit common-lisp:null)
                         :accessor
                         struct-shape-tgwon-device-service-configuration-storage-limit
                         :shape "StorageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-unit :initarg :storage-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-unit common-lisp:null)
                         :accessor
                         struct-shape-tgwon-device-service-configuration-storage-unit
                         :shape "StorageUnit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tgwon-device-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tgwon-device-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tgwon-device-service-configuration
                    'make-tgwon-device-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tgwon-device-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tgwon-device-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-limit))
      (common-lisp:list
       (common-lisp:cons "StorageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-unit))
      (common-lisp:list
       (common-lisp:cons "StorageUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tgwon-device-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-on-device-service common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-service-name common-lisp:null)
                         :accessor
                         struct-shape-target-on-device-service-service-name
                         :shape "DeviceServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transfer-option :initarg :transfer-option :initform
                         common-lisp:nil :type
                         (common-lisp:or transfer-option common-lisp:null)
                         :accessor
                         struct-shape-target-on-device-service-transfer-option
                         :shape "TransferOption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-on-device-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-on-device-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-on-device-service 'make-target-on-device-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-on-device-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-on-device-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-option))
      (common-lisp:list
       (common-lisp:cons "TransferOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-on-device-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-on-device-service-list ()
   '(trivial-types:proper-list target-on-device-service))
 (common-lisp:defun make-target-on-device-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-on-device-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tax-documents common-lisp:nil
                       ((ind :initarg :ind :initform common-lisp:nil :type
                         (common-lisp:or indtax-documents common-lisp:null)
                         :accessor struct-shape-tax-documents-ind :shape
                         "INDTaxDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tax-documents
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tax-documents
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tax-documents 'make-tax-documents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tax-documents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tax-documents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ind))
      (common-lisp:list
       (common-lisp:cons "IND"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tax-documents))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype transfer-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-address-exception
     (snowball-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-address-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-address-exception
                    'unsupported-address-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-cluster-request common-lisp:nil
                       ((cluster-id :initarg :cluster-id :initform
                         (common-lisp:error ":cluster-id is required") :type
                         (common-lisp:or cluster-id common-lisp:null) :accessor
                         struct-shape-update-cluster-request-cluster-id :shape
                         "ClusterId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-update-cluster-request-role-arn
                         :shape "RoleARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or job-resource common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-request-resources :shape
                         "JobResource" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (on-device-service-configuration :initarg
                         :on-device-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-request-on-device-service-configuration
                         :shape "OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-update-cluster-request-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shipping-option :initarg :shipping-option :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-request-shipping-option
                         :shape "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-request-notification
                         :shape "Notification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-address-id :initarg :forwarding-address-id
                         :initform common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-update-cluster-request-forwarding-address-id
                         :shape "AddressId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-result 'make-update-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-update-job-request-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-update-job-request-role-arn
                         :shape "RoleARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification :initarg :notification :initform
                         common-lisp:nil :type
                         (common-lisp:or notification common-lisp:null)
                         :accessor struct-shape-update-job-request-notification
                         :shape "Notification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or job-resource common-lisp:null)
                         :accessor struct-shape-update-job-request-resources
                         :shape "JobResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-device-service-configuration :initarg
                         :on-device-service-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or on-device-service-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-on-device-service-configuration
                         :shape "OnDeviceServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (address-id :initarg :address-id :initform
                         common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-update-job-request-address-id :shape
                         "AddressId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shipping-option :initarg :shipping-option :initform
                         common-lisp:nil :type
                         (common-lisp:or shipping-option common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-shipping-option :shape
                         "ShippingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-job-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snowball-capacity-preference :initarg
                         :snowball-capacity-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or snowball-capacity common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-snowball-capacity-preference
                         :shape "SnowballCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-address-id :initarg :forwarding-address-id
                         :initform common-lisp:nil :type
                         (common-lisp:or address-id common-lisp:null) :accessor
                         struct-shape-update-job-request-forwarding-address-id
                         :shape "AddressId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pickup-details :initarg :pickup-details :initform
                         common-lisp:nil :type
                         (common-lisp:or pickup-details common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-pickup-details :shape
                         "PickupDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-device-service-configuration))
      (common-lisp:list
       (common-lisp:cons "OnDeviceServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pickup-details))
      (common-lisp:list
       (common-lisp:cons "PickupDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-result 'make-update-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-shipment-state-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-update-job-shipment-state-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipment-state :initarg :shipment-state :initform
                         (common-lisp:error ":shipment-state is required")
                         :type (common-lisp:or shipment-state common-lisp:null)
                         :accessor
                         struct-shape-update-job-shipment-state-request-shipment-state
                         :shape "ShipmentState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-shipment-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-job-shipment-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-shipment-state-request
                    'make-update-job-shipment-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipment-state))
      (common-lisp:list
       (common-lisp:cons "ShipmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-shipment-state-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-shipment-state-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-job-shipment-state-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-shipment-state-result
                    'make-update-job-shipment-state-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-shipment-state-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-long-term-pricing-request common-lisp:nil
                       ((long-term-pricing-id :initarg :long-term-pricing-id
                         :initform
                         (common-lisp:error
                          ":long-term-pricing-id is required")
                         :type
                         (common-lisp:or long-term-pricing-id common-lisp:null)
                         :accessor
                         struct-shape-update-long-term-pricing-request-long-term-pricing-id
                         :shape "LongTermPricingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replacement-job :initarg :replacement-job :initform
                         common-lisp:nil :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-update-long-term-pricing-request-replacement-job
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-long-term-pricing-auto-renew :initarg
                         :is-long-term-pricing-auto-renew :initform
                         common-lisp:nil :type
                         (common-lisp:or java-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-long-term-pricing-request-is-long-term-pricing-auto-renew
                         :shape "JavaBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-long-term-pricing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-long-term-pricing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-long-term-pricing-request
                    'make-update-long-term-pricing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-term-pricing-id))
      (common-lisp:list
       (common-lisp:cons "LongTermPricingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement-job))
      (common-lisp:list
       (common-lisp:cons "ReplacementJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-long-term-pricing-auto-renew))
      (common-lisp:list
       (common-lisp:cons "IsLongTermPricingAutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-long-term-pricing-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-long-term-pricing-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-long-term-pricing-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-long-term-pricing-result
                    'make-update-long-term-pricing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-long-term-pricing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass wireless-connection common-lisp:nil
                       ((is-wifi-enabled :initarg :is-wifi-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-wireless-connection-is-wifi-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-wireless-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'wireless-connection 'make-wireless-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wireless-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wireless-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-wifi-enabled))
      (common-lisp:list
       (common-lisp:cons "IsWifiEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wireless-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-cluster))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address)
   (common-lisp:declare (common-lisp:ignorable address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-address))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type resources
                     on-device-service-configuration description address-id
                     kms-key-arn role-arn snowball-type shipping-option
                     notification forwarding-address-id tax-documents
                     remote-management initial-cluster-size force-create-jobs
                     long-term-pricing-ids snowball-capacity-preference)
   (common-lisp:declare
    (common-lisp:ignorable job-type resources on-device-service-configuration
     description address-id kms-key-arn role-arn snowball-type shipping-option
     notification forwarding-address-id tax-documents remote-management
     initial-cluster-size force-create-jobs long-term-pricing-ids
     snowball-capacity-preference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type resources
                     on-device-service-configuration description address-id
                     kms-key-arn role-arn snowball-capacity-preference
                     shipping-option notification cluster-id snowball-type
                     forwarding-address-id tax-documents device-configuration
                     remote-management long-term-pricing-id impact-level
                     pickup-details)
   (common-lisp:declare
    (common-lisp:ignorable job-type resources on-device-service-configuration
     description address-id kms-key-arn role-arn snowball-capacity-preference
     shipping-option notification cluster-id snowball-type
     forwarding-address-id tax-documents device-configuration remote-management
     long-term-pricing-id impact-level pickup-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-long-term-pricing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key long-term-pricing-type
                     is-long-term-pricing-auto-renew snowball-type)
   (common-lisp:declare
    (common-lisp:ignorable long-term-pricing-type
     is-long-term-pricing-auto-renew snowball-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-long-term-pricing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLongTermPricing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-long-term-pricing))
(common-lisp:progn
 (common-lisp:defun create-return-shipping-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id shipping-option)
   (common-lisp:declare (common-lisp:ignorable job-id shipping-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-return-shipping-label-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReturnShippingLabel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-return-shipping-label))
(common-lisp:progn
 (common-lisp:defun describe-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address-id)
   (common-lisp:declare (common-lisp:ignorable address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-address))
(common-lisp:progn
 (common-lisp:defun describe-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addresses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddresses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-addresses))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun describe-return-shipping-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-return-shipping-label-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReturnShippingLabel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-return-shipping-label))
(common-lisp:progn
 (common-lisp:defun get-job-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobManifest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-manifest))
(common-lisp:progn
 (common-lisp:defun get-job-unlock-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-unlock-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobUnlockCode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-unlock-code))
(common-lisp:progn
 (common-lisp:defun get-snowball-usage ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'snowball-request :method "POST" :path "/"
                                :operation "GetSnowballUsage"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-snowball-usage))
(common-lisp:progn
 (common-lisp:defun get-software-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-software-updates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSoftwareUpdates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-software-updates))
(common-lisp:progn
 (common-lisp:defun list-cluster-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cluster-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusterJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cluster-jobs))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-compatible-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compatible-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCompatibleImages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-compatible-images))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-long-term-pricing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-long-term-pricing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLongTermPricing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-long-term-pricing))
(common-lisp:progn
 (common-lisp:defun list-pickup-locations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pickup-locations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPickupLocations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-pickup-locations))
(common-lisp:progn
 (common-lisp:defun list-service-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name dependent-services
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-name dependent-services max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-versions))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id role-arn description resources
                     on-device-service-configuration address-id shipping-option
                     notification forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id role-arn description resources
     on-device-service-configuration address-id shipping-option notification
     forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id role-arn notification resources
                     on-device-service-configuration address-id shipping-option
                     description snowball-capacity-preference
                     forwarding-address-id pickup-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id role-arn notification resources
     on-device-service-configuration address-id shipping-option description
     snowball-capacity-preference forwarding-address-id pickup-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-job-shipment-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id shipment-state)
   (common-lisp:declare (common-lisp:ignorable job-id shipment-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-job-shipment-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateJobShipmentState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-job-shipment-state))
(common-lisp:progn
 (common-lisp:defun update-long-term-pricing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key long-term-pricing-id replacement-job
                     is-long-term-pricing-auto-renew)
   (common-lisp:declare
    (common-lisp:ignorable long-term-pricing-id replacement-job
     is-long-term-pricing-auto-renew))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-long-term-pricing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLongTermPricing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-long-term-pricing))
